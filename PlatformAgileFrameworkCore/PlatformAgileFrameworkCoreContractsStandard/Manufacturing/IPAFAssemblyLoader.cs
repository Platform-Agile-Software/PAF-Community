//@#$&+
//
//The MIT X11 License
//
//Copyright (c) 2010 - 2016 Icucom Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.
//@#$&-

using System;
using System.Reflection;
using PlatformAgileFramework.ErrorAndException;

namespace PlatformAgileFramework.Manufacturing
{
	/// <summary>
	/// This interface prescribes members that all Platform-agile assembly loaders for PAF
	/// must implement. <see cref="IPAFAssemblyLoader"/>s are <see cref="IPAFAssemblyResolver"/>s and can
	/// thus be used to hook the "AppDomain.AssemblyResolve" event.
	/// </summary>
	/// <history>
	/// <author> BMC </author>
	/// <date> 09nov2011 </date>
	/// <contribution>
	/// <para>
	/// Removed all support for cocoons for SL rewrite. Created history.
	/// </para>
	/// </contribution>
	/// </history>
	/// <threadsafety>
	/// Implementations must be thread-safe and reentrant.
	/// </threadsafety>
// ReSharper disable PartialTypeWithSinglePart
	// core
	public partial interface IPAFAssemblyLoader: IPAFAssemblyResolver
// ReSharper restore PartialTypeWithSinglePart
	{
		#region Properties
		/// <summary>
		/// Determines whether the loader should ignore bad format errors. This
		/// is sometimes useful when UNMANAGED DLL's may be present in some of the
		/// directory search paths. In this case, the loader will ignore
		/// <see cref="BadImageFormatException"/> that is generated by attempting
		/// to load a named DLL that is not a valid managed DLL. Default is
		/// typically <see langword="false"/>.
		/// </summary>
		bool IgnoreBadFormat { get; set; }
		/// <summary>
		/// Determines whether the loader should ignore incoming assembly
		/// names that are not in the <see cref="Assembly.FullName"/> format. In
		/// this case the <see cref="LoadAssembly"/> method will return <see langword="null"/>.
		/// This causes the CLR to drop through to it's normal load procedure for
		/// a DLL, using its prescribed search paths, or drop through to the next
		/// hooked resolver in its subscriber list. This feature is provided so
		/// this class acts as a RESOLVER only for the loading of dependent
		/// assemblies that are referenced in the manifest of an assembly that
		/// is directly loaded with a method like <c>Assembly.Load(String)</c>.
		/// Default is typically <see langword="false"/>.
		/// </summary>
		bool ProcessSimpleAssemblyName { get; set; }
		#endregion // Properties
		#region Methods
		/// <summary>
		/// <para>
		/// This is an assembly loader that attempts to locate an assembly from a
		/// file name only. The file must be in the current assembly probe path
		/// collection. For SL, the implementation decides whether to load the
		/// assembly from the website the XAP file, etc.
		/// </para>
		/// </summary>
		/// <param name="assemblyName">
		/// Assembly reference string. The expectation of the format is consistent with the string
		/// handed back from "AppDomain.AssemblyResolve" callback, so this method can be
		/// used as a resolver. See the summary for further details on allowable names.
		/// If an executable or dynamic library extension is already appended to the name,
		/// it is not replaced. Be aware that extensions are platform-specific.
		/// </param>
		/// <returns>
		/// The loaded assembly or <see langword="null"/> if unsuccessful. Normally, exceptions
		/// are generated from the runtime if assembly load is not successful if a file
		/// is found. <see langword="null"/> usually means that no file with the prescribed base name
		/// was found.
		/// </returns>
		/// <exceptions>
		/// <exception cref="ArgumentNullException"> is thrown if <paramref name="assemblyName"/>
		/// is <see langword="null"/> or blank. Message is "assemblyName".
		/// </exception>
		/// <exception cref="BadImageFormatException">s are typically supressed when
		/// <see cref="IgnoreBadFormat"/> is set.
		/// </exception>
		/// <exception cref="PAFStandardException{T}"> wraps any
		/// miscellaneous exceptions that are generated within the framework for various reasons
		/// when assemblies cannot be loaded and this method will throw this exception. The exception
		/// is the <exception cref="BadImageFormatException"/> mentioned above, when parameters are
		/// properly set.
		/// </exception>
		/// </exceptions>
		/// <remarks>
		/// Note that this loader is very much platform-dependent. MonoTouch can't load
		/// anything that is not statically linked.
		/// </remarks>
		Assembly LoadAssembly(string assemblyName);
		#endregion // Methods
	}
}