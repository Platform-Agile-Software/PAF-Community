using System.Threading.Tasks;using NUnit.Framework;using PlatformAgileFramework.MultiProcessing.Tasking;using PlatformAgileFramework.MultiProcessing.Tasking.TestClasses;// ReSharper disable once CheckNamespacenamespace PlatformAgileFramework.Multiprocessing.Tasking{	/// <summary>
	/// Tests for utils we put in for enhanced functionality or workarounds
	/// for broken Mono stuff.
	/// </summary>	[TestFixture]	public class TaskUtilsTests	{		/// <summary>
		/// For fiddling and test development.
		/// </summary>		public static int s_TimeScale = 10;
		/// <summary>		/// Tests the time-bound task supervisor. In this case, we want the task to timeout.		/// </summary>        [Test]		public void TestTimeBoundTaskExpiry_TimesOut()		{			var expiryTime = 500 * s_TimeScale;			var taskTime = 1000 * s_TimeScale;			var expiringTaskToTest = Task.Delay(taskTime);			var finishesFirst = TaskUtils.WaitAnyWithTimeoutAsync(new[] { expiringTaskToTest }, expiryTime).Result;			Assert.IsTrue(finishesFirst == -1);		}		/// <summary>		/// Tests the time-bound task supervisor. In this case, we want the task to complete.		/// </summary>		[Test]		public void TestTimeBoundTaskExpiry_Completes()		{			var expiryTime = 1000 * s_TimeScale;			var taskTime = 500 * s_TimeScale;			var expiringTaskToTest = Task.Delay(taskTime);			var finishesFirst = TaskUtils.WaitAnyWithTimeoutAsync(new[] { expiringTaskToTest }, expiryTime).Result;			Assert.IsTrue(finishesFirst == 0);		}		/// <summary>		/// Tests the time-bound task supervisor for the task timeout payload.. In this case, we want the task to complete.		/// </summary>		[Test]		public void TestTimeBoundTaskExpiryPayload_Completes()		{			var expiryTime = 1000 * s_TimeScale;			var taskTime = 500 * s_TimeScale;			var timedOutTaskPayloadTestClass = new TimedOutTaskPayloadTestClass();			timedOutTaskPayloadTestClass.DelayInMilliseconds = taskTime;			timedOutTaskPayloadTestClass.IntElement = 1;			timedOutTaskPayloadTestClass.StringElement = "";			var expiringTaskToTest = timedOutTaskPayloadTestClass.GetTheInt();			var payload				= expiringTaskToTest.WaitTaskWithTimeoutAsyncTimeOutPayload(expiryTime).Result;			Assert.IsTrue(!payload.TimedOut);			// If it didn't time out, we need to fetch it.			Assert.IsTrue(payload.ReturnValue == 1);			////////			// Now the string.			var stringExpiringTaskToTest = timedOutTaskPayloadTestClass.GetTheString();			var stringPayload				= stringExpiringTaskToTest.WaitTaskWithTimeoutAsyncTimeOutPayload(expiryTime).Result;			Assert.IsTrue(!payload.TimedOut);			// If it didn't time out, we need to fetch it.			Assert.IsTrue(stringPayload.ReturnValue == "");		}

		/// <summary>		/// Tests the time-bound task supervisor for the task timeout payload.. In this case, we want the task to timeout.		/// </summary>        [Test]		public void TestTimeBoundTaskExpiryPayload_TimesOut()		{			var expiryTime = 500 * s_TimeScale;			var taskTime = 1000 * s_TimeScale;			var timedOutTaskPayloadTestClass = new TimedOutTaskPayloadTestClass();			timedOutTaskPayloadTestClass.DelayInMilliseconds = taskTime;			timedOutTaskPayloadTestClass.IntElement = 1;			timedOutTaskPayloadTestClass.StringElement = "";			var expiringTaskToTest = timedOutTaskPayloadTestClass.GetTheInt();			var payload				= expiringTaskToTest.WaitTaskWithTimeoutAsyncTimeOutPayload(expiryTime).Result;			Assert.IsTrue(payload.TimedOut);		}	}}