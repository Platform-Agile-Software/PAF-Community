using System;using NUnit.Framework;using PlatformAgileFramework.Collections;using PlatformAgileFramework.Events;using PlatformAgileFramework.MultiProcessing.Tasking.TestClasses;using PlatformAgileFramework.Notification.SubscriberStores;using PlatformAgileFramework.Notification.TestHelpers;// ReSharper disable once CheckNamespacenamespace PlatformAgileFramework.Notification{	/// <summary>
	/// Tests for "safe" notifications.
	/// </summary>	[TestFixture]	public class NotificationDispatchTests	{		/// <summary>		/// For fiddling and test development.		/// </summary>		public static int s_TimeScale = 10;		/// <summary>		/// Test class that both publishes and receives events.		/// </summary>		public TimedOutPayloadTestClass m_TestClass;		/// <summary>		/// Store that publishes time-limited events.		/// </summary>		public IntegerPAFPayloadEventSubscriberStore m_TheStoreImplementation;		/// <summary>		/// Interface to store - always test to make sure we have correct methods exposed in the interface..		/// </summary>		public ITimeOutGenericPayloadNotificationSourcedSubscriberStore			<Action<object, IPAFEventArgsProvider<int>>, IPAFEventArgsProvider<int>, IPAFEventCallbackReceiver> m_TheStore;		/// <summary>		/// Recreate the store and test class fresh each test.		/// </summary>        [SetUp]		public void SetUp()		{			m_TheStoreImplementation = new IntegerPAFPayloadEventSubscriberStore(1);			m_TheStore = m_TheStoreImplementation;			// Our test class shows how an arbitrary class can raise an event on the store.			m_TestClass = new TimedOutPayloadTestClass(m_TheStore);		}		/// <summary>		/// Tests the time-bound task supervisor. In this case, we want the task to timeout.		/// </summary>		[Test]		public void TestTimeBoundEventExpiry_TimesOut()		{			var expiryTime = 500 * s_TimeScale;			var taskTime = 1000 * s_TimeScale;			// Set the task's delay time to be greater than the store timeout.			m_TestClass.DelayInMilliseconds = taskTime;			m_TestClass.Publish(expiryTime);			Assert.IsTrue(m_TheStoreImplementation.m_TimedOutSubscribers.SafeCount() == 1);		}		/// <summary>		/// Tests the time-bound task supervisor. In this case, we want the task to timeout.		/// </summary>		[Test]		public void TestTimeBoundEventExpiry_Completes()		{			var expiryTime = 500 * s_TimeScale;			var taskTime = 1000 * s_TimeScale;			// Set the task's delay time to be less than the store timeout.			m_TestClass.DelayInMilliseconds = expiryTime;			m_TestClass.Publish(taskTime);			Assert.IsTrue(m_TheStoreImplementation.m_TimedOutSubscribers.SafeCount() == 0);		}	}}