//@#$&+////The MIT X11 License////Copyright (c) 2010 - 2017 Icucom Corporation////Permission is hereby granted, free of charge, to any person obtaining a copy//of this software and associated documentation files (the "Software"), to deal//in the Software without restriction, including without limitation the rights//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//copies of the Software, and to permit persons to whom the Software is//furnished to do so, subject to the following conditions:////The above copyright notice and this permission notice shall be included in//all copies or substantial portions of the Software.////THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//THE SOFTWARE.//@#$&-using System;using NUnit.Framework;using PlatformAgileFramework.FrameworkServices.Tests;namespace PlatformAgileFramework.TypeHandling.Delegates{	/// <summary>	/// Tests for creating and releasing weak delegates.	/// </summary>    [TestFixture]	public class WeakPseudoDelegateTests : BasicServiceManagerTestFixtureBase	{		public static int s_IntReceivedCount;		/// <summary>		/// Gets around the problem of NUnit being crippled without testfixture setups.		/// </summary>		[SetUp]		public override void SetUp()		{			base.SetUp();			s_IntReceivedCount = 0;		}		/// <summary>		/// This one constructs a PD from components and verifies that it can		/// be converted to a full delegate.		/// </summary>        [Test]		public void ConstructDelegateFromComponents()		{			IPseudoDelegate<Action<int>> pd				= new WeakablePseudoDelegate<Action<int>>(this, "IntReceivingMethod", false);			var del = pd.GetDelegate();			Assert.IsTrue(del != null, "Delegate was reconstructed");			del.Invoke(1);			Assert.IsTrue(s_IntReceivedCount == 1, "s_IntReceivedCount == 1 (first received)");		}		void IntReceivingMethod(int receivedInt)		{			s_IntReceivedCount += receivedInt;		}	}}