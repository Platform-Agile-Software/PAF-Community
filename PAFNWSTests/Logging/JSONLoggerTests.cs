using System;using Delta.SafeTrac.Logging;using NUnit.Framework;using PlatformAgileFramework.FrameworkServices;using PlatformAgileFramework.FrameworkServices.Tests;// ReSharper disable once CheckNamespacenamespace PlatformAgileFramework.Logging.Tests{	//[TestFixture]	//public class JSONLoggerTests: BasicServiceManagerTestFixtureBase	//{	//	/// <summary>	//	/// Gets around the problem of NUnit being crippled without testfixture setups.	//	/// </summary>	//	[SetUp]	//	public override void SetUp()	//	{	//		base.SetUp();	//	}

	//	/// <summary>	//	/// This one just logs something.	//	/// This will log through the regular (not emergency) logger. For	//	/// tests, we usually like to write to console and log file.	//	/// </summary> //       // Currently commented out because of a problem with loading the correct version of NewtonSoft. //       // This has been tested and works fine. ToDo: KRM //       // [Test]	//	public void WriteDTOToLog()	//	{	//	    bool found;	//		var mainLoggerText = "MainLogger";	//	    var logger = PAFServices.Manager.GetTypedService<IPAFLoggingService>();	//	    // ReSharper disable once InconsistentNaming	//	    var JSONLogger = new PAFJSONDTOLoggingService(PAFLoggingLevel.Error, false, null, "JSONLogFile.txt"); //           PAFServices.Manager.AddTypedService(((IPAFLoggingService)JSONLogger), "JSONLogger", false);	//	    // ReSharper disable once InconsistentNaming	//	    var JSONLoggerInterface = PAFServices.Manager.GetTypedService<IPAFLoggingService>("JSONLogger");	//	    found = JSONLoggerInterface != null;	//	    Assert.IsTrue(found, "JSON logger not found");	//	    var logData = new SafeTracLogDataDTOLoader();	//	    logData.CreateSafeTracTimeStamp(DateTime.UtcNow); //           JSONLoggerInterface.LogEntry(logData);

 //           // Check if data was written.
 //           // First check if emergency logger was started. We have to get a handle on the main
 //           // logger, which is available by now.
 //           var mainLogger = ((IPAFEmergencyServiceProvider<IPAFLoggingService>) logger).MainService;	//		var logFileContents	//			= ((IPAFLoggingServiceInternal) mainLogger).ReadLogFile(EmergencyLoggingServiceBase.DEFAULT_EMERGENCY_FILE);	//		found = logFileContents.Contains(EmergencyLoggingServiceBase.LOAD_MESSAGE);	//		Assert.IsTrue(found, "Emergency Logger not started"); //           // Now examine the JSON output.	//		logFileContents	//			= ((IPAFLoggingServiceInternal)mainLogger).ReadLogFile("JSONLogFile.txt");	//		found = logFileContents.Contains(":");	//		Assert.IsTrue(found, "JSON logger not writing");	//	}	//}}