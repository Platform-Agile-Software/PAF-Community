//@#$&+////The MIT X11 License////Copyright (c) 2016 - 2018 Icucom Corporation////Permission is hereby granted, free of charge, to any person obtaining a copy//of this software and associated documentation files (the "Software"), to deal//in the Software without restriction, including without limitation the rights//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell//copies of the Software, and to permit persons to whom the Software is//furnished to do so, subject to the following conditions:////The above copyright notice and this permission notice shall be included in//all copies or substantial portions of the Software.////THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,//FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN//THE SOFTWARE.//@#$&-using NUnit.Framework;using PlatformAgileFramework.FileAndIO.FileAndDirectoryService;using PlatformAgileFramework.FrameworkServices;using PlatformAgileFramework.FrameworkServices.Tests;

// ReSharper disable once CheckNamespace
namespace PlatformAgileFramework.Logging.Tests{
	/// <summary>
	/// These tests test the correct operation of the logger, including the emergency	/// logger.
	/// </summary>    [TestFixture]	public class BasicLoggerTests : BasicServiceManagerTestFixtureBase	{
		/// <summary>		/// Logger file directory.		/// </summary>        public static string s_LoggerDirectory;

		/// <summary>		/// For independently manipulating storage.		/// </summary>        public IPAFStorageService m_StorageService;

		/// <summary>		/// Need one copy of the service manager internals.		/// </summary>        internal IPAFServiceManagerInternal<IPAFService> m_ServiceManagerInternal;

		/// <summary>		/// This one staples in the internal SM, staples in the storage service		/// and sets the logger directory.		/// </summary>        public override void TestFixtureSetUp()		{			base.TestFixtureSetUp();			m_ServiceManagerInternal				= (IPAFServiceManagerInternal<IPAFService>)PAFServices.Manager;			m_StorageService = PAFServices.Manager.GetTypedService<IPAFStorageService>();			s_LoggerDirectory =				"Documents:" + DS + "MainLoggerDirectory";		}		/// <summary>		/// This ensures that our test directories exist, then clears them.		/// </summary>		[SetUp]		public override void SetUp()		{			base.SetUp();			// Make sure the directory is there.			m_StorageService.PAFEnsureDirectoryExists(s_LoggerDirectory);			// Empty us out first.			m_StorageService.PAFEmptyDirectoryOfFiles(s_LoggerDirectory);		}		/// <summary>		/// This one logs something and tests the ability to set the		/// output file and use the debugging logger.		/// This will log through the regular (not emergency) logger. For		/// tests, we usually like to write to console and log file.		/// </summary>		[Test]		public void WriteSomethingToLog()		{			var mainLoggerText = "MainLogger";			var logger = PAFServices.Manager.GetTypedService<IPAFLoggingService>();			// Check if data was written.			// First check if emergency logger was started. We have to get a handle on the main			// logger, which is available by now.			var mainLogger = ((IPAFEmergencyServiceProvider<IPAFLoggingService>)logger).MainService;			var logFileContents				= ((IPAFLoggingServiceInternal)mainLogger).ReadOutputFile(EmergencyLoggingServiceBase.DEFAULT_EMERGENCY_FILE);			var found = logFileContents.Contains(EmergencyLoggingServiceBase.LOAD_MESSAGE);			Assert.IsTrue(found, "Emergency Logger not started");			// Redirect logger output.			((IPAFLoggingServiceInternal)mainLogger).SetOutputFile("MainLogFile.txt");			logger.LogEntry(mainLoggerText);			logFileContents				= ((IPAFLoggingServiceInternal)mainLogger).ReadOutputFile("MainLogFile.txt");			found = logFileContents.Contains(mainLoggerText);			Assert.IsTrue(found, "Main logger not writing");			PAFDebuggingLogger.StaticLogFile = "MainLogFile.txt";			PAFDebuggingLogger.StaticEnableTimeStamp = false;			PAFDebuggingLogger.StaticHeader = "DebugLoggerHeader";			PAFDebuggingLogger.MyLogger.MyLogEntry("Hello from debugging logger");			logFileContents				= ((IPAFLoggingServiceInternal)mainLogger).ReadOutputFile("MainLogFile.txt");			found = logFileContents.Contains("Hello from debugging logger");			Assert.IsTrue(found, "Debugging logger not writing");		}		/// <summary>		/// This one tests the ability to add a trace logger and another file writer.		/// </summary>		[Test]		public void AddLogWriters()		{			var mainLoggerText = "MainLogger";			var logger = PAFServices.Manager.GetTypedService<IPAFLoggingService>();			// Check if data was written.			// First check if emergency logger was started. We have to get a handle on the main			// logger, which is available by now.			var mainLogger = ((IPAFEmergencyServiceProvider<IPAFLoggingService>)logger).MainService;			var logFileContents				= ((IPAFLoggingServiceInternal)mainLogger).ReadOutputFile(EmergencyLoggingServiceBase.DEFAULT_EMERGENCY_FILE);			var found = logFileContents.Contains(EmergencyLoggingServiceBase.LOAD_MESSAGE);			Assert.IsTrue(found, "Emergency Logger not started");			// Redirect logger output.			((IPAFLoggingServiceInternal)mainLogger).SetOutputFile("MainLogFile.txt");			logger.LogEntry(mainLoggerText);			logFileContents				= ((IPAFLoggingServiceInternal)mainLogger).ReadOutputFile("MainLogFile.txt");			found = logFileContents.Contains(mainLoggerText);			Assert.IsTrue(found, "Main logger not writing");			PAFDebuggingLogger.StaticLogFile = "MainLogFile.txt";			PAFDebuggingLogger.StaticEnableTimeStamp = false;			PAFDebuggingLogger.StaticHeader = "DebugLoggerHeader";			PAFDebuggingLogger.MyLogger.MyLogEntry("Hello from debugging logger");			logFileContents				= ((IPAFLoggingServiceInternal)mainLogger).ReadOutputFile("MainLogFile.txt");			found = logFileContents.Contains("Hello from debugging logger");			Assert.IsTrue(found, "Debugging logger not writing");		}	}}