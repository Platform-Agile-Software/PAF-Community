using NUnit.Framework;using PlatformAgileFramework.FrameworkServices;using PlatformAgileFramework.FrameworkServices.Tests;// ReSharper disable once CheckNamespacenamespace PlatformAgileFramework.Logging.Tests{	[TestFixture]	public class BasicLoggerTests: BasicServiceManagerTestFixtureBase	{		/// <summary>		/// Gets around the problem of NUnit being crippled without testfixture setups.		/// </summary>		[SetUp]		public override void SetUp()		{			base.SetUp();		}

		/// <summary>
		/// This one just logs something.
		/// This will log through the regular (not emergency) logger. For
		/// tests, we usually like to write to console and log file.
		/// </summary>        [Test]		public void WriteSomethingToLog()		{			var mainLoggerText = "MainLogger";			var logger = PAFServices.Manager.GetTypedService<IPAFLoggingService>();			// Check if data was written.			// First check if emergency logger was started. We have to get a handle on the main			// logger, which is available by now.			var mainLogger = ((IPAFEmergencyServiceProvider<IPAFLoggingService>) logger).MainService;			var logFileContents				= ((IPAFLoggingServiceInternal) mainLogger).ReadLogFile(EmergencyLoggingServiceBase.DEFAULT_EMERGENCY_FILE);			var found = logFileContents.Contains(EmergencyLoggingServiceBase.LOAD_MESSAGE);			Assert.IsTrue(found, "Emergency Logger not started");			// Redirect logger output.			((IPAFLoggingServiceInternal)mainLogger).SetLogFile("MainLogFile.txt");			logger.LogEntry(mainLoggerText);			logFileContents				= ((IPAFLoggingServiceInternal)mainLogger).ReadLogFile("MainLogFile.txt");			found = logFileContents.Contains(mainLoggerText);			Assert.IsTrue(found, "Main logger not writing");			PAFDebuggingLogger.StaticLogFile = "MainLogFile.txt";			PAFDebuggingLogger.StaticEnableTimeStamp = false;			PAFDebuggingLogger.StaticHeader = "DebugLoggerHeader";			PAFDebuggingLogger.MyLogger.MyLogEntry("Hello from debugging logger");			logFileContents				= ((IPAFLoggingServiceInternal)mainLogger).ReadLogFile("MainLogFile.txt");			found = logFileContents.Contains("Hello from debugging logger");			Assert.IsTrue(found, "Debugging logger not writing");		}	}}