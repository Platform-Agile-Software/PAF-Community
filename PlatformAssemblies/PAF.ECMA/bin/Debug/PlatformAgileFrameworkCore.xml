<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PlatformAgileFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:PlatformAgileFramework.Application.ApplicationUtils">
            <summary>
            <para>
            Helper classes/methods for overall application support.
            This part is Silverlight compatible (single AppDomain).
            </para>
            <para>
            Many of the facilities found here are present in platform-specific
            assemblies. Because we must keep the PAF core platform-agile and
            actually platform-independent, we implement those items here in an
            abstract way, allowing platform-specific extensions to provide
            concrete functionality. For example, the "System.Windows.Application"
            object contains methods for establishing current trust levels.
            We don't want anything to do with this assembly in core, since
            this assembly is Microsoft-specific. Framework extenders and/or
            users will connect to the platform-specific assemblies either
            through delegates or partial classes or through inheritance, which
            are our extensibility mechanisms.
            </para>
            </summary>
            <history>
            <author> KRM </author>
            <date> 02sep2012 </date>
            <contribution>
            New.
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.Application.ApplicationUtils.s_IsElevatedTrustTestOverride">
            <summary>
            This field is included for testing purposes. The assembly containing
            this class will normally have its internals exposed to the test
            assembly. Test setup methods can set this field. If this field has
            no value, the methods in this class operate normally. If this field
            is set, the application thinks it is in one mode or the other. On
            the other hand, if this is being used in a trusted ECMA/CLR environment
            the field can just be set.
            </summary>
            <threadsafety>
            No thread safety - designed to be set once at application initialization.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.Application.ApplicationUtils.s_TrustSettingDelegate">
            <summary>
            In lieu of creating a second part to this class, the framework user/extender
            can simply provide a delegate that will tell us what security level we are at.
            If this is <see langword="null"/>, partial method can be used, or the <see cref="M:PlatformAgileFramework.Application.ApplicationUtils.IsElevatedTrust(System.Nullable{System.Boolean}@)"/>
            will return its default, which is <see langword="false"/>.
            </summary>
            <threadsafety>
            No thread safety - designed to be set once at application initialization. The
            implementation of the delegate, must however, be thread-safe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.Application.ApplicationUtils.IsElevatedTrustEnvironment">
            <summary>
            Method will determine whether we are operating in an elevated-trust
            environment. Clients typically call this method when deciding whether
            to call a full-featured method that is marked with
            <see cref="T:System.Security.SecurityCriticalAttribute"/> or use a safe method. A simple
            example is deciding whether to store a file in the file system or in
            isolated storage.
            </summary>
            <remarks>
            The static variable is checked first for a definitive trust level.
            Next, the delegate is called, if it is installed.
            Next, the partial OPTIONAL method is called, if it is loaded.
            If none of these checks produces a definitive answer about the
            trust level (non-<see langword="null"/>), <see langword="false"/>
            is returned. This was an arbitrary decision, but it will result
            in less dramatic problems if apps are fielded without having the
            connections made correctly in this class.
            </remarks>
            <exceptions>
            Lots, potentially. We can't control what the user/extender links in
            here and/or what exceptions to expect, so we don't catch them.
            Well-designed extensions will not throw exceptions or pass them
            unless the program should stop. If the extensions cannot provide
            a definate T/F, they should return <see langword="null"/>.
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.Application.BootStrapper">
            <summary>
            Classic "bootstrapper" that solves the chicken/egg problem for the service
            manager. For SO apps, this is the bootstrapper for the app, really. Loads
            things into the service manager in proper order to get basic services
            loaded and make the SM ready for use. Lazy singleton can have statics loaded
            before instantiation.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 28jun2017 </date>
            <description>
            Broke out platform assembly loading to better support testing.
            </description>
            </contribution>
            <contribution>
            <author> KRM </author>
            <date> 01apr2016 </date>
            <description>
            New.
            </description>
            </contribution>
            </history>
            <remarks>
            Addins providing the required services must be loaded, typically with
            <c>Assembly.LoadFrom(string)"</c> in order for the load mechanism in PAF
            core to find them.
            </remarks>
        </member>
        <member name="F:PlatformAgileFramework.Application.BootStrapper.s_Singleton">
            <summary>
            This a thread-safe wrapper for constructing the singleton.
            </summary>
            <remarks>
            Lazy class is thread-safe by default.
            </remarks>
        </member>
        <member name="F:PlatformAgileFramework.Application.BootStrapper.s_CurrentPlatformInfo">
            <summary>
            This one has to be manually set, since there is no reliable way
            to find out what platform we are on from Microsoft/Xamarin. Used
            to be able to examine BCL assys, but no more. Too many variations.....
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Application.BootStrapper.DirectoryMappings">
            <summary>
            We need this to do symbolic directory mapping.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Application.BootStrapper.DEFAULT_DIRECTORY_MAPPING_FILE_NAME">
            <summary>
            This is our "standard" file name.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Application.BootStrapper.DirectoryMappingFileName">
            <summary>
            This is settable for tests, etc.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Application.BootStrapper.DirectoryMappingFilePathWithFile">
            <summary>
            Static that can be reset for platform tests, etc. By default, this is set up
            to point to the <see cref="P:PlatformAgileFramework.Application.BootStrapper.DirectoryMappingFileName"/> living in
            <see cref="M:PlatformAgileFramework.Platform.PlatformUtils.FormPlatformAssemblyLoadPath"/>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Application.BootStrapper.s_IsPlatformAssemblyLoaded">
            <summary>
            Set when the platform-specific assembly is loaded.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Application.BootStrapper.s_AreCoreServicesLoaded">
            <summary>
            Set when the core services are loaded.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Application.BootStrapper.#ctor">
            <summary>
            For the singleton.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Application.BootStrapper.Instance">
            <summary>
            Get the singleton instance of the class.
            </summary>
            <returns>The singleton.</returns>
        </member>
        <member name="M:PlatformAgileFramework.Application.BootStrapper.ConstructBootStrapper">
            <summary>
            Not quite a constructor - a factory for the lazy construction.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Application.BootStrapper.LoadPlatformAssembly">
            <summary>
            Call this to load platform-specific assembly.
            </summary>
            <remarks>
            Separated out mostly to support tests not involving the service manager.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Application.BootStrapper.LoadCoreServices">
            <summary>
            This method will load the default logging, storage and UI service. These must be
            loaded before almost any other service, since most other services depend on these
            three. The method will load the platform assembly, if it's not loaded already.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.DataBanking.IPAFDataSetContainer`2">
            <summary>
            Container for data that is really nothing but a dictionary that can be
            filled through data queries or through other means.
            </summary>
            <typeparam name="TDataItem">
            The type of data item. Constrained to have access to its key although
            not necessarily a key/value type.
            </typeparam>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <threadsafety>Not thread-safe.</threadsafety>
        </member>
        <member name="T:PlatformAgileFramework.DataBanking.IPAFDataSetContainerProvider`2">
            <summary>
            Closure of the provider pattern to provide the data container.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.DataBanking.IPAFDataSetContainerProvider`2.Container">
            <summary>
            See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFProviderPattern`1"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFAsyncStorageServiceAbstract">
            <summary>
            This implementation typically employs standard stuff from <c>File</c>
            and <c>Directory</c>, which are exposed fully on ECMA and now also on
            Xamarin.Android and Xamarin.iOS. That is why we have some defaults in
            here assuming a wide-open file/directory system.
            </summary>
            <remarks>
            As usual, we employ explicit interface implementation with virtual
            backing methods for extenders. This class just adds the async stuff.
            The methods in this class do not throw or generate exceptions, since
            exceptional conditions will be platform-specific. Methods will throw
            or encapsulate exceptions thrown or generated in the implementation.  
            </remarks>
            <threadsafety>
            Depends on the implementation.
            </threadsafety>
            <history>
            <contribution>
            <author> Bello </author>
            <date> 12mar2016 </date>
            <description>
            New. Built this when TPL got fully functional.
            </description>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFAsyncStorageServiceAbstract.AsIasyncstorage">
            <summary>
            Saves some code.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFAsyncStorageServiceAbstract.#ctor">
            <summary>
            This default constructor just sets some needed fields.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFAsyncStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFAsyncStorageService#PAFOpenFileAsync(System.String)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFAsyncStorageService"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFAsyncStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFAsyncStorageService#PAFOpenFileAsync(System.String,System.Int32)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFAsyncStorageService"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFAsyncStorageServiceAbstract.PAFOpenFileAsyncPV(System.String,System.Int32)">
            <remarks>
            Support for <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFAsyncStorageService"/>.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract">
            <summary>
            This implementation typically employs standard stuff from <c>File</c>
            and <c>Directory</c>, which are exposed fully on ECMA and now also on
            Xamarin.Android and Xamarin.iOS. That is why we have some defaults in
            here assuming a wide-open file/directory system.
            </summary>
            <remarks>
            As usual, we employ explicit interface implementation with virtual
            backing methods for extenders.
            </remarks>
            <threadsafety>
            Depends on the implementation.
            </threadsafety>
            <history>
            <contribution>
            <author> Brian T. </author>
            <date> 22apr2015 </date>
            <desription>
            New. This is the reworked version that caters to the fact that
            Xamarin now exposes the file and directory stuff instead of using
            the Silverlight model. Seems kind of dangerous...............
            </desription>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.AsIstorage">
            <summary>
            Saves some code.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.m_ApplicationRootDirectory">
            <summary>
            Backing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.#ctor">
            <summary>
            This default constructor just sets some needed fields.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#ApplicationRootDirectory">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.ApplicationRootDirectoryPIV">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFAvailableFreeSpace">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFAvailableFreeSpacePIV">
            <summary>
            backing for the interface. Returns max value.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFAvailableSize">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFAvailableSizePIV">
            <summary>
            backing for the interface. Returns max value.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFQuota">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFQuotaPIV">
            <summary>
            backing for the interface. Returns max value.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFUsedSize">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFUsedSizePIV">
            <summary>
            backing for the interface. Returns 0.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#StorageTag">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.StorageTagPIV">
            <summary>
            backing for the interface.
            NO-OP returns "TAG" for base. 
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#GetConvertedFileSpec(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.GetConvertedFileOrDirectorySpecPIV(System.String)">
            <summary>
            backing for the interface.
            Gets path with symbolic directories converted.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#GetMappedDirectorySymbol(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.GetMappedDirectorySymbolPIV(System.String)">
            <summary>
            backing for the interface.
            Just accesses the static.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFCopyFile(System.String,System.String,System.Boolean)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFCopyFileSymbolicPIV(System.String,System.String,System.Boolean)">
            <summary>
            backing for the interface.
            symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFCopyFilePIV(System.String,System.String,System.Boolean)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFCreateDirectory(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFCreateDirectorySymbolicPIV(System.String)">
            <summary>
            Backing support for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFCreateDirectoryPIV(System.String)">
            <summary>
            Backing support for the interface. Since <c>DirectoryInfo</c>
            cannot be part of a platform-independent interface, an object
            is returned here for any interface extensions to use.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFCreateDirectory(System.String,System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFCreateDirectorySymbolicPIV(System.String,System.Object)">
            <summary>
            Backing support for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFCreateDirectoryPIV(System.String,System.Object)">
            <summary>
            Backing support for the interface.
            client object not used in this base
            implementation.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFCreateFile(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFCreateFileSmbolicPIV(System.String)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFCreateFilePIV(System.String)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFDeleteDirectory(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFDeleteDirectorySymbolicPIV(System.String)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFDeleteDirectoryPIV(System.String)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFDeleteDirectory(System.String,System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFDeleteDirectorySymbolicPIV(System.String,System.Object)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFDeleteDirectoryPIV(System.String,System.Object)">
            <summary>
            backing for the interface. Client object not used in this implementation.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFDeleteFile(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFSymbolicFileSymbolicPIV(System.String)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFDeleteFilePIV(System.String)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFDeleteFile(System.String,System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFDeleteFileSymbolicPIV(System.String,System.Object)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFDeleteFilePIV(System.String,System.Object)">
            <summary>
            backing for the interface. Client object not used in this implementation.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFDirectoryExists(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFDirectoryExistsSymbolicPIV(System.String)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFDirectoryExistsPIV(System.String)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFFileExists(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFFileExistsSymbolicPIV(System.String)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFFileExistsPIV(System.String)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFGetCreationTime(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetCreationTimeSymbolicPIV(System.String)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetCreationTimePIV(System.String)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFGetDirectoryNames">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetDirectoryNamesPIV">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFGetDirectoryNames(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetDirectoryNamesSymbolicPIV(System.String)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetDirectoryNamesPIV(System.String)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFGetFileNames">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetFileNamesPIV">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFGetFileNames(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetFileNamesSymbolicPIV(System.String)">
            <summary>
            Backing support for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetFileNamesPIV(System.String)">
            <summary>
            Backing support for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFGetLastAccessTime(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetLastAccessTimeSymbolicPIV(System.String)">
            <summary>
            Backing support for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetLastAccessTimePIV(System.String)">
            <summary>
            Backing support for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFGetLastWriteTime(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetLastWriteTimeSymbolicPIV(System.String)">
            <summary>
            Backing support for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFGetLastWriteTimePIV(System.String)">
            <summary>
            Backing support for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFIncreaseQuotaTo(System.Int64)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFIncreaseQuotaToPIV(System.Int64)">
            <summary>
            backing for the interface.
            NO-OP in ECMA. returns <see langword="true"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFIncreaseQuotaTo(System.Int64,System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFIncreaseQuotaToPIV(System.Int64,System.Object)">
            <summary>
            backing for the interface.
            NO-OP in ECMA. returns <see langword="true"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFMoveDirectory(System.String,System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFMoveDirectorySymbolicPIV(System.String,System.String)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFMoveDirectoryPIV(System.String,System.String)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFMoveFile(System.String,System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFMoveFileSymbolicPIV(System.String,System.String)">
            <summary>
            backing for the interface.
            Symbolic shim.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFMoveFilePIV(System.String,System.String)">
            <summary>
            backing for the interface.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFOpenFile(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFOpenFile(System.String,PlatformAgileFramework.FileAndIO.PAFFileAccessMode)">
            <remarks>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFOpenFileSymbolicPIV(System.String,PlatformAgileFramework.FileAndIO.PAFFileAccessMode)">
            <remarks>
            backing for interface.
            Symbolic shim.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFOpenFilePIV(System.String,PlatformAgileFramework.FileAndIO.PAFFileAccessMode)">
            <remarks>
            backing for interface.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFOpenFile(System.String,PlatformAgileFramework.FileAndIO.PAFFileAccessMode,System.Object)">
            <remarks>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>. <paramref name="clientObject"/> is
            not used in this implementation.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFOpenFileSymbolicPIV(System.String,PlatformAgileFramework.FileAndIO.PAFFileAccessMode,System.Object)">
            <remarks>
            backing for interface.
            Symbolic shim.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFOpenFilePIV(System.String,PlatformAgileFramework.FileAndIO.PAFFileAccessMode,System.Object)">
            <remarks>
            backing for interface.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFRemove">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFRemovePIV">
            <summary>
            backing for interface. Doesn't do a thing by default.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#PAFRemove(System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PAFRemovePIV(System.Object)">
            <summary>
            backing for interface. Doesn't do a thing by default.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.PlatformAgileFramework#FileAndIO#FileAndDirectoryService#IPAFStorageService#SetApplicationRoot(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceAbstract.SetApplicationRootPIV(System.String)">
            <summary>
            backing for interface.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceExtensions">
            <summary>
            Helpers for working with files. Added back, since there is more flexibility
            on the phones now.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 04Jun2016 </date>
            <description>
            New.
            Put only the stuff in here that will work in core.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Unsafe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceExtensions.PAFEnsureDirectoryExists(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService,System.String,System.Boolean)">
            <summary>
            Ensures that a directory exists. Creates it if it doesn't.
            </summary>
            <param name="storageService">
            One of us.
            </param>
            <param name="directoryPath">
            The directory to ensure the existance of. Can have a mapped symbol
            on the front, can have a terminating separator or not. If it is
            <see cref="F:System.String.Empty"/> we are assumed to be referencing the CWD
            and we return <see langword="true"/> Cannot be <see langword="null"/>.
            </param>
            <param name="createRecursively">
            If <see langword="false"/>, only the last directory segment will be
            created. If <see langword="true"/>, the path will be built segment
            by segment.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">directoryPath</exception>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            Message = <see cref="F:PlatformAgileFramework.ErrorAndException.CoreCustomExceptions.PAFFileAndIOExceptionMessageTags.DIRECTORY_NOT_FOUND"/>
            is thrown if we are not recursing and the directory path up to the leaf
            directory to be created does not exist.
            </exception>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            Message = <see cref="F:PlatformAgileFramework.ErrorAndException.CoreCustomExceptions.PAFFileAndIOExceptionMessageTags.ERROR_CREATING_DIRECTORY"/>
            is thrown if directory creation fails. This exception wraps one thrown by the OS.
            </exception>
            </exceptions>
            <remarks>
            This method won't handle shares. (//)
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceExtensions.PAFEmptyDirectoryOfFiles(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService,System.String,System.Boolean)">
            <summary>
            Empties a directory by deleting files.
            </summary>
            <param name="storageService">
            One of us.
            </param>
            <param name="directoryPath">
            The directory to remove files from. Can have a mapped symbol
            on the front, can have a terminating separator or not.
            Cannot be <see langword="null"/> or <see cref="F:System.String.Empty"/>.
            </param>
            <param name="emptyRecursively">
            If <see langword="false"/>, only the top-level directory will be
            emptied.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">directoryPath</exception>
            We do not catch other exceptions that come up from the implementation
            for lack of permission, file in use, etc.
            </exceptions>
            <remarks>
            This method won't handle shares. (//)
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceExtensions.PAFEmptyDirectoryOfDirectories(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService,System.String)">
            <summary>
            Empties a directory by deleting all directories recursively down its tree.
            Files must be deleted down the tree first, so this is done.
            </summary>
            <param name="storageService">
            One of us.
            </param>
            <param name="directoryPath">
            The directory to clear. Can have a mapped symbol
            on the front, can have a terminating separator or not.
            Cannot be <see langword="null"/> or <see cref="F:System.String.Empty"/>. 
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">directoryPath</exception>
            We do not catch other exceptions that come up from the implementation
            for lack of permission, file in use, etc.
            </exceptions>
            <remarks>
            This method won't handle shares. (//)
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageServiceExtensions.PAFEmptyAndDeleteDirectory(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService,System.String)">
            <summary>
            Empties a directory by deleting all files recursively down its tree..
            </summary>
            <param name="storageService">
            One of us.
            </param>
            <param name="directoryPath">
            The directory to ensure the existance of. Can have a mapped symbol
            on the front, can have a terminating separator or not. If it is
            <see cref="F:System.String.Empty"/> we are assumed to be referencing the CWD
            and we return <see langword="true"/> Cannot be <see langword="null"/>.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">directoryPath</exception>
            We do not catch other exceptions that come up from the implementation
            for lack of permission, file in use, etc.
            </exceptions>
            <remarks>
            This method won't handle shares. (//)
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageServiceInternal">
            <summary>
            Internal part of split interface. See <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 17jan2012 </date>
            <description>
            New.
            </description>
            </contribution>
            <contribution>
            <author> KRM </author>
            <date> 22jun2014 </date>
            <description>
            Exposed symbolic directory translation stuff, since XML classes need to be supplied
            with filenames.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageServiceInternal.GetMappedDirectorySymbolInternal(System.String)">
            <summary>
            Translates a symbolic directory symbol to a real directory spec on the native machine
            or environment.
            </summary>
            <param name="symbolicDirectorySymbol">
            The stringful symbol.
            </param>
            <returns><see langword="null"/> if symbol not in dictionary.</returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageServiceInternal.GetConvertedFileSpecInternal(System.String)">
            <summary>
            Translates a file specification symbol to a real file path on the native machine
            or environment.
            </summary>
            <param name="fileSpec">
            The stringful symbol.
            </param>
            <returns><see langword="null"/> if symbol not in dictionary.</returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageServiceInternal.SetApplicationRootInternal(System.String)">
            <summary>
            Sets application root in cases where it needs to be forced.
            </summary>
            <param name="rootDirSpec">
            The stringful root spec with no trailing dirsep.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream">
            <summary>
            <para>
            Default for our file service. Does the streams that support files and other
            thngs.
            </para>
            </summary>
            <history>
            <contribution>
            <author> BMC </author>
            <date> 17jan2016 </date>
            <description>
            New.
            Decided not to support any PCL's that do not have the concept of a <see cref="T:System.IO.Stream"/>.
            Tired of trying to support every single scenario in the universe.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Unsafe.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.m_StreamInUse">
            <summary>
            This is the stream we are built with.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.#ctor(System.IO.Stream)">
            <summary>
            Just embeds a stream
            </summary>
            <param name="stream">Incoming <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFCanRead">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <returns>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </returns>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFCanSeek">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary> 
            <returns>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </returns>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFCanSetLength">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            This one always returns <see langword="true"/> because we don't
            know what we are. This is from the addin interface and has to stay, but
            it's OK, since we are documenting it, no?
            </summary> 
            <returns>
            <see langword="true" />.
            </returns>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFCanWrite">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary> 
            <returns>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </returns>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFLength">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary> 
            <returns>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </returns>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFPosition">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <remarks>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFGetStream">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <returns>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFFlush">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            This is a no op.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFFlush(System.Boolean)">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            Just calls <see cref="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFFlush"/>.
            </summary>
            <param name="flushToDisk">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            Not used.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFSetLength(System.Int64)">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <param name="value">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFTrySetStorageSize(System.Int64,System.Boolean,System.Object)">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <param name="value">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
            <param name="acceptAvailableSize">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
            <param name="clientObject">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            Unused in this implementation.
            </param>
            <returns>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <returns>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </returns>
            <param name="buffer">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
            <param name="offset">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
            <param name="count">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFReadByte">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <returns>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFSeek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary> 
            <param name="offset">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
            <param name="origin">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
            <returns>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFWriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <param name="buffer">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
            <param name="offset">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
            <param name="count">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.PAFWriteByte(System.Byte)">
            <summary>
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <param name="value">
            <see cref = "T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.Dispose">
            <summary>
            <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.PAFStorageStream.Dispose(System.Boolean)">
            <summary>
            Disposes the stream.
            </summary>
            <param name="disposing">
            If <see langword="true"/>, disposes stream.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream">
            <summary>
            This is an interface that models methods on "System.IO.IsolatedStorage.IsolatedStorageFileStream".
            The interface is designed to allow retrofitting existing Silverlight storage access
            code to control other storage implementations. See individual implementation classes
            for details of the behavior of methods. Most cannot be described in the interface,
            since implementations may differ widely.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.CanRead">
            <remarks/>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.CanWrite">
            <remarks/>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.CanSeek">
            <remarks/>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.Length">
            <remarks/>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.Position">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.GetStream">
            <summary>
            This method exposes a standard <see cref="T:System.IO.Stream"/>when needed
            for passing into normal framework methods. For a wrapped
            implementation this is just the contained stream. For other
            implementations, it can be a surrogate
            <see cref="T:System.IO.MemoryStream"/> or something similar.
            </summary>
            <returns>The stream.</returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.Flush">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.Flush(System.Boolean)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.ReadByte">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.SetLength(System.Int64)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.WriteByte(System.Byte)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.EndRead(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFileStream.EndWrite(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile">
            <summary>
            This is an interface that models methods on "System.IO.IsolatedStorage.IsolatedStorageFile".
            The interface is designed to allow retrofitting existing Silverlight storage access
            code to control other storage implementations. See individual implementation classes
            for details of the behavior of methods. They cannot be described in the interface,
            since implementations may differ widely.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.UsedSize">
            <remarks/>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.Quota">
            <remarks/>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.AvailableFreeSpace">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.Remove">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.IncreaseQuotaTo(System.Int64)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.DeleteFile(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.FileExists(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.DirectoryExists(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.CreateDirectory(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.DeleteDirectory(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.GetFileNames">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.GetFileNames(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.GetDirectoryNames">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.GetDirectoryNames(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.OpenFile(System.String,PlatformAgileFramework.FileAndIO.PAFFileAccessMode)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.CreateFile(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.GetCreationTime(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.GetLastAccessTime(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.GetLastWriteTime(System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.CopyFile(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.CopyFile(System.String,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.MoveFile(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IIsolatedStorageFile.MoveDirectory(System.String,System.String)">
            <remarks/>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.StorageStreamExtensionMethods">
            <summary>
            Extension methods for the <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/> interface. Put
            them here to avoid too much clutter in <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 28jan2012 </date>
            <description>
            New.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.StorageStreamExtensionMethods.PAFReadChars(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.Text.Encoding)">
            <summary>
            Reads a character set from the <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/> with UNICODE
            encoding or a specified encoding. The stream is read from the current position
            to the end.
            </summary>
            <param name="storageStream">
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>
            </param>
            <param name="encoding">
            An instance of the <see cref="T:System.Text.Encoding"/> class that specifies how byte
            to character mapping is to be performed. <see langword="null"/> will cause
            UniCode encoding to be used, Little-endian, no mark.
            </param>
            <exceptions>
            Various exceptions will be thrown if the implementation relies on native
            implementations.
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.StorageStreamExtensionMethods.PAFReadString(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.Text.Encoding)">
            <summary>
            Reads a string from a <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>. Just calls
            into <see cref="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.StorageStreamExtensionMethods.PAFReadChars(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.Text.Encoding)"/>.
            </summary>
            <param name="storageStream">
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>
            </param>
            <param name="encoding">
            See <see cref="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.StorageStreamExtensionMethods.PAFReadChars(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.Text.Encoding)"/>.
            </param>
            <returns>
            String decoded from a stream. Empty stream returns <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.StorageStreamExtensionMethods.PAFWriteChars(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.Collections.Generic.IEnumerable{System.Char},System.Text.Encoding)">
            <summary>
            Writes a character set to the <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/> with UNICODE
            encoding or a specified encoding. The stream is written at the current position.
            </summary>
            <param name="storageStream">
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>
            </param>
            <param name="charactersToWrite">
            The characters to write.
            </param>
            <param name="encoding">
            An instance of the <see cref="T:System.Text.Encoding"/> class that specifies how byte
            to character mapping is to be performed. <see langword="null"/> will cause
            UTF8.
            </param>
            <exceptions>
            Various exceptions will be thrown if the implementation relies on native
            implementations. These exceptions should be documented and usually wrapped
            </exceptions>
            <threadsafety>
            This method cannot be relied upon to write safely after calling
            <see cref="P:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService.PAFAvailableFreeSpace"/>
            or similar methods, since another thread may have snuck in and done
            another allocation or write in the intervening time. Either
            <see cref="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream.PAFSetLength(System.Int64)"/> (with caught exception)
            or <see cref="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream.PAFTrySetStorageSize(System.Int64,System.Boolean,System.Object)"/> should be called
            to ensure that there is enough space on this stream to do the write.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.StorageStreamExtensionMethods.PAFWriteString(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.String,System.Text.Encoding)">
            <summary>
            Writes a string to the <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/> with UNICODE
            encoding or a specified encoding. The stream is written at the current position.
            </summary>
            <param name="storageStream">
            <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream"/>
            </param>
            <param name="stringToWrite">
            String to be written to a stream. <see langword="null"/> does
            nothing. <see cref="F:System.String.Empty"/> does nothing.
            </param>
            <param name="encoding">
            An instance of the <see cref="T:System.Text.Encoding"/> class that specifies how byte
            to character mapping is to be performed. <see langword="null"/> will cause
            UniCode encoding to be used, Little-endian, no mark.
            </param>
            <exceptions>
            See <see cref="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.StorageStreamExtensionMethods.PAFReadChars(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.Text.Encoding)"/>.
            </exceptions>
            <threadsafety>
            See <see cref="M:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.StorageStreamExtensionMethods.PAFReadChars(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.Text.Encoding)"/>.
            </threadsafety>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary">
            <summary>
            This is the default implementation of <see cref="T:PlatformAgileFramework.FileAndIO.SymbolicDirectories.ISymbolicDirectoryMappingDictionary"/>.
            It provides an instance dictionary and a static dictionary. Instance dictionary is checked
            first (if the class is instantiated), then a static dictionary is checked. This
            allows the framework to save emergency files to drive letter mapped file paths
            before the full framework has been set up. This is useful for emergency log
            files and the like.
            </summary>
            <threadsafety>
            safe - uses monitor locks.
            </threadsafety>
            <history>
            <description>
            <author> KRM </author>
            <date> 10apr2016 </date>
            <contribution>
            Just added some DOCs down in remarks. This facility has been around since
            .Net 1.1 in various forms.
            </contribution>
            </description>
            </history>
            <remarks>
            The instance piece of this was developed for/with a customer who wanted to overload
            mappings on the fly. We don't use it in core. The interface allows it to be
            used as a service within the service manager.
            </remarks>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.s_DirectoryMappingDictionary">
            <summary>
            The dictionary containing the mappings.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.m_DirectoryMappingDictionary">
            <summary>
            The dictionary containing the mappings. This is the instance version,
            which can augment and/or override the static version. Access is thread-safe
            if access rules (below) are followed.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.#cctor">
            <summary>
            Static constructor just builds with hardwired constants that are set
            in <see cref="T:PlatformAgileFramework.Platform.PlatformUtils"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.#ctor">
            <summary>
            Default constructor just creates the instance dictionary.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor builds with a pre-loaded dictionary.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.AddStaticMapping(System.String,System.String)">
            <summary>
            Adds a mapping to the static mapping dictionary.
            </summary>
            <param name="token">
            The token for the drive or other string key.
            </param>
            <param name="directory">
            The directory that this token should be replaced with in
            file/directory operations.
            </param>
            <returns>
            <see langword="false"/> if another thread snuck in before us and
            added the mapping we are trying to add.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.AddStaticMapping_Internal(System.String,System.String)">
            <summary>
            Adds a mapping to the static mapping dictionary.
            </summary>
            <param name="token">
            The token for the drive or other string key.
            </param>
            <param name="directory">
            The directory that this token should be replaced with in
            file/directory operations.
            </param>
            <returns>
            <see langword="false"/> if another thread snuck in before us and
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.AddMapping(System.String,System.String)">
            <summary>
            Adds a mapping to the instance mapping dictionary.
            </summary>
            <param name="token">
            The token for the drive or other string key.
            </param>
            <param name="directory">
            The directory that this token should be replaced with in
            file/directory operations.
            </param>
            <returns>
            <see langword="false"/> if another thread snuck in before us and
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.AddMapping_Internal(System.String,System.String)">
            <summary>
            Adds a mapping to the instance mapping dictionary.
            </summary>
            <param name="token">
            The token for the drive or other string key.
            </param>
            <param name="directory">
            The directory that this token should be replaced with in
            file/directory operations.
            </param>
            <returns>
            <see langword="false"/> if another thread snuck in before us and
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.GetStaticMapping(System.String)">
            <summary>
            Gets a mapping from the static mapping dictionary.
            </summary>
            <param name="token">The token for the drive or other string key.</param>
            <returns>
            The mapping if found or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.GetStaticMapping_Internal(System.String)">
            <summary>
            Gets a mapping from the static mapping dictionary.
            </summary>
            <param name="token">The token for the drive or other string key.</param>
            <returns>
            The mapping if found or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.GetMapping(System.String)">
            <summary>
            Gets a mapping from the mapping dictionaries. Instance mapping dictionary
            is checked first, followed by the static dictionary.
            </summary>
            <param name="token">The token for the drive or other string key.</param>
            <returns>
            The mapping if found or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.GetMapping_Internal(System.String)">
            <summary>
            Gets a mapping from the mapping dictionaries. Instance mapping dictionary
            is checked first, followed by the static dictionary.
            </summary>
            <param name="token">The token for the drive or other string key.</param>
            <returns>
            The mapping if found or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.SymbolicDirectories.SymbolicDirectoryMappingDictionary.PopulateStaticDictionaryFromXML(System.String)">
            <summary>
            Loads static directory mappings from an XML file.
            </summary>
            <param name="filePath">
            Path to the xml file, including directory and filename.
            </param>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionData">
            <summary>
            Sealed version of <see cref="T:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionData.#ctor(System.String,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase"/>.
            <see cref="P:PlatformAgileFramework.FileAndIO.Exceptions.IPAFStoragePathFormatExceptionData.ProblematicStoragePath"/>.
            </summary>
            <param name="problematicStoragePath">
            See <see cref="T:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase"/>.
            </param>
            <param name="extensionData">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="isFatal">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="pafLoggingLevel">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.Exceptions.PAFStreamOperationExceptionDataBase">
            <summary>
            Base class for filename exceptions.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.Exceptions.PAFStreamOperationExceptionDataBase.STREAM_NOT_EXPANDABLE">
            <summary>
            Issued when a client attempts to expand a stream that is not
            expandable.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.Exceptions.PAFStreamOperationExceptionDataBase.STREAM_SIZE_LIMIT_REACHED">
            <summary>
            Issued when a client attempts to expand a stream that is at its
            limit.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.Exceptions.PAFStreamOperationExceptionDataBase.m_ProblematicStream">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.Exceptions.PAFStreamOperationExceptionDataBase.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.Exceptions.PAFStreamOperationExceptionDataBase.#ctor(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor builds with the standard arguments plus the
            <see cref="P:PlatformAgileFramework.FileAndIO.Exceptions.IPAFStreamOperationExceptionData.ProblematicStream"/>.
            </summary>
            <param name="problematicStream">
            See <see cref="T:PlatformAgileFramework.FileAndIO.Exceptions.IPAFStoragePathFormatExceptionData"/>.
            </param>
            <param name="extensionData">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="pafLoggingLevel">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="isFatal">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FileAndIO.Exceptions.PAFStreamOperationExceptionDataBase.ProblematicStream">
            <summary>
            See <see cref="T:PlatformAgileFramework.FileAndIO.Exceptions.IPAFStreamOperationExceptionData"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.Exceptions.PAFStreamOperationExceptionData">
            <summary>
            Sealed class for filename exceptions.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.Exceptions.PAFStreamOperationExceptionData.#ctor(PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageStream,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor builds with the standard arguments plus the
            <see cref="P:PlatformAgileFramework.FileAndIO.Exceptions.IPAFStreamOperationExceptionData.ProblematicStream"/>.
            </summary>
            <param name="problematicStream">
            See <see cref="T:PlatformAgileFramework.FileAndIO.Exceptions.IPAFStreamOperationExceptionData"/>.
            </param>
            <param name="extensionData">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="pafLoggingLevel">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="isFatal">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase">
            <summary>
            <para>
            The base class for STORAGE AREA NAME exception data.
            </para>
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 09jul2015 </date>
            <description>
            </description>
            I changed ALL the names having to do with FILEs, since it was confusing
            clients who were using this for NON-FILE storage. We had brought the exception
            over from ECMA and it was confusing folks.
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase.DIRECTORY_SYMBOL_NOT_FOUND">
            <summary>
            Error message. Issued when a symbolic directory mapping
            symbol (e.g. C_DRIVE:, MyData:, etc.) is not found in the
            dictionary.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase.DIRECTORY_SPECIFICATION_NOT_ALLOWED">
            <summary>
            Error message. Issued when an operation can take a filename only
            or a symbolic directory followed by a filename. This means specifically
            that no directory specification characters ("/" or "\") are allowed
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase.BAD_FILE_PATH">
            <summary>
            Error message. Issued when a file path cannot be resolved to a correct normalized
            file path. Usually accompanied by an inner exception.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase.PROBLEMATIC_STORAGE_PATH">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase.#ctor(System.String,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})" -->
        <member name="P:PlatformAgileFramework.FileAndIO.Exceptions.PAFStoragePathFormatExceptionDataBase.ProblematicStoragePath">
            <summary>
            See <see cref="T:PlatformAgileFramework.FileAndIO.Exceptions.IPAFStoragePathFormatExceptionData"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal`1">
            <summary>
            Provides a way to set the Generic service object by trusted callers.
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/>.
            </summary>
            <typeparam name="T">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/>.
            </typeparam>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 16apr2016 </date>
            <description>
            New - the internal inerface was missing.
            </description>
            </contribution>
            </history>
            <typesafety>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/>.
            </typesafety>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal`1.SetServiceInternal(`0)">
            <summary>
            Setter for the service - only for full-trust environments.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.LoadServiceManager">
            <summary>
            Version for ECMA that loads the service manager with
            pre-configured services.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 07apr2016 </date>
            <desription>
            New.
            </desription>
            </contribution>
            </history>
            <remarks>
            There is nothing in this class, since we had to chop things up for the phones.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.LoadServiceManager.LoadManager">
            <summary>
            This one currently does nothing.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject`1">
            <summary>
            <para>
            Class providing services to services during the <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>
            pipeline stages.
            </para>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject`1.#ctor">
            <summary>
            For inheritance support.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject`1.#ctor(PlatformAgileFramework.FrameworkServices.IPAFServiceManager{`0},PlatformAgileFramework.FrameworkServices.ServicePipelineStage)">
            <summary>
            Builds with a service manager.
            </summary>
            <param name="serviceManager">
            The manager.
            </param>
            <param name="pipelineStage">
            Sets the <see cref="!:PipelineStage"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServices">
            <summary>
            This FrameworkService "manager" contains a singleton version of basic or "core"
            services that must be present even to start an application. These services
            have to do with loading files, interacting with the user during error
            conditions, etc. These services are often initialized with stand-in versions.
            As the application loads, the client may overload these services with more
            sophisticated versions to service the full application.
            </summary>
            <history>
            <author> DAP </author>
            <date> 21feb2012 </date>
            <contribution>
            Made necessary mods to use one base service manager for both remote
            and local services - code consolidation. Moved everything but dynamic
            deadlock detection/resolution out of Core according to KRM.
            </contribution>
            <author> KRM </author>
            <date> 27jan2012 </date>
            <contribution> Converted from 3.5 and cleaned up. </contribution>
            </history>
            <threadsafety>
            Synchronized.
            </threadsafety>
            <remarks>
            This service manager is both a Generic and non-Generic service manager.
            We had to build it this way to support legacy applications. But you don't
            have to build YOUR service manager this way! Better to require Generic
            services for type-safety.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServices.s_SiPAFUIService">
            <summary>
            This is the UI service. This is the simple console and dialog window service.
            It is usually augmented with something more substantial once the app gets running.
            This service is usually a singleton (one instance per app domain) so they
            are static.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServices.s_SiPAFLoggingService">
            <summary>
            This is the logging service. It is dependent on the storage service usually.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServices.s_SiPAFStorageService">
            <summary>
            This is the storage service. This is fundamental file/directory access
            in simplest cases. This service can be pre-loaded with a basic implementation that
            is needed to even read configuration files to get the application parameterized,
            then replaced with something more specific.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServices.s_1ForInitializing">
            <summary>
            Lock for multithread access. 1 indicates already initializing.
            </summary>
            <remarks>
            This is a lock variable and must never be touched by anyone except
            the initialization method. Not volatile since it is not accessed directly.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServices.IsInitialized">
            <summary>
            Just tells our internals if initialization is complete.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServices.s_DisposalKey">
            <summary>
            Disposal key.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServices.s_Services">
            <summary>
            Our singleton service set.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServices.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceManager"/> class.
            This is the standard one that the regular <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServices.Manager"/> property
            retrieves.
            </summary>
            <remarks>
            This is private to enforce the singleton condition.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServices.Manager">
            <summary>
            Gets the singleton instance after ensuring it is completely constructed.
            </summary>
            <value>The singleton instance.</value>
            <remarks>
            Lazy construction needed here, since the "AppDomain" creator
            may wish to set static fields before first access.
            </remarks>
            <security>
            Security safe so external app can access services without being trusted.
            </security>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServices.GetStaticGuid">
            <summary>
            Checks to see whether the disposal key has been loaded and generates
            a random guid if not.
            </summary>
            <returns>
            Preloaded or new random key.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServices.InstantiateAndProvision(System.Object)">
            <summary>
            This method is the "bootstrapper" for the service manager. It installs basic
            critical services from service objets that are either pre-loaded as statics
            or created by searching assemblies for implementations.
            </summary>
            <param name="o">An optional provisioning object.</param>
            <returns></returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServices.BuildInitialServices">
            <summary>
            <para>
            This is a helper method that builds the services from <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.InitialServicesInternal"/>,
            one-by-one, in enumeration order and adds them to the service array without initializing
            them.
            </para>
            <para>
            The method will construct the initial set of services. It then checks to see if
            these services contain <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingService"/> or <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>
            or <see cref="T:PlatformAgileFramework.FileAndIO.FileAndDirectoryService.IPAFStorageService"/>. If they do, <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServices.s_SiPAFLoggingService"/>
            and/or <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServices.s_SiPAFUIService"/> and/or <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServices.s_SiPAFStorageService"/>
            are replaced with these versions. If they don't and <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServices.s_SiPAFLoggingService"/>
            or <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServices.s_SiPAFLoggingService"/> or <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServices.s_SiPAFStorageService"/> are loaded,
            they are used instead. If no UI and/or Logger service has been provided from either
            input source, defaults are constructed.
            </para>
            </summary>
            <remarks>
            Currently, we cannot survive without a storage service being supplied, either in the
            <see cref="!:PAFGeneralServiceManager&lt;IPAFService&gt;.InitialServicesInternal"/> or in the static
            in this class.
            </remarks>
            <exceptions>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.SERVICE_NOT_FOUND"/> is thrown if storage service not loaded. It is wrapped
            in a general exception.
            </exception>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.SERVICE_CREATION_FAILED"/> is thrown as a wrapper if any exceptions
            occur in the method.
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData">
            <summary>
            Exceptions that occur where multiple services must be identified
            as problematic.
            </summary>
            <remarks>
            Implementations should normally be at least "[PAFSerializable]".
            </remarks>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 11Oct2014 </date>
            <description>
            Documented.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Implementations should be safe.
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData.Services">
            <summary>
            Gets the problematic services.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData.AddService(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription)">
            <summary>
            This method adds an service to the list of services if the list is not
            sealed. If a service passed to this method is <see langword="null"/>,
            this seals the list. The <see langword="null"/> service is not added
            to the list.
            </summary>
            <param name="service">Service to be added.</param>
            <exceptions>
            <exception> <see cref="T:System.InvalidOperationException"/> is thrown if
            the list has been sealed by adding a <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceTypeMismatchExceptionData">
            <summary>
            Exceptions that occur handling services that have the wrong type.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceTypeMismatchExceptionData.RequiredType">
            <summary>
            The type that the service was supposed to be.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionData">
            <summary>
            Sealed implementation of <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData"/>.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 11oct2014 </date>
            New.
            </contribution>
            </history>
            <threadsafety>
            Safe after locking.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionData.#ctor(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription},System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            See base.
            </summary>
            <param name="services">
            See base.
            </param>
            <param name="extensionData">
            See base.
            </param>
            <param name="pafLoggingLevel">
            See base.
            </param>
            <param name="isFatal">
            See base.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase">
            <summary>
            Implementation of <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData"/>.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 11oct2014 </date>
            New.
            </contribution>
            </history>
            <threadsafety>
            Safe after locking.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.DUPLICATE_TYPES_IN_SERVICE_TYPE_DICTIONARY">
            <summary>
            Error message. There was an attempt to add a duplicate type to a
            service type dictionary.
            name.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.ONLY_ONE_DEFAULT_SERVICE_IMPLEMENTATION_IS_ALLOWED">
            <summary>
            Error message. There was an attempt to load a service dictionary
            with more than one service tagged as "default".
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.ONLY_ONE_UNNAMED_SERVICE_IMPLEMENTATION_IS_ALLOWED">
            <summary>
            Error message. There was an attempt to load a service dictionary
            with more than one service with a blank or <see langword="null"/>
            name.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.SERVICE_TYPES_DO_NOT_MATCH">
            <summary>
            Error message. The types of two services needed to match and they
            did not.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.m_ServiceItems">
            <summary>
            The services.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.#ctor(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription},System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor builds with the standard arguments plus exceptions.
            </summary>
            <param name="services">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.Services"/>. May be <see langword="null"/>. If this
            enumeration is not <see langword="null"/> and terminates with a
            <see langword="null"/> service, no more services may be added with the
            <see cref="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.AddService(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription)"/> method. The terminating <see langword="null"/>
             is not added to the list.
            </param>
            <param name="extensionData">
            Sets <see cref="P:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData.ExtensionData"/>.
            </param>
            <param name="pafLoggingLevel">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="isFatal">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.Services">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.AddService(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription)">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData"/>
            </summary>
            <param name="service">
            <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData"/>
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceTypeMismatchExceptionData">
            <summary>
            Sealed version of <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceTypeMismatchExceptionDataBase"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceTypeMismatchExceptionData.#ctor(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.IPAFTypeHolder,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase"/>.
            <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData.ProblematicService"/>.
            </summary>
            <param name="problematicService">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData"/>.
            </param>
            <param name="requiredType">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceTypeMismatchExceptionData"/>.
            </param>
            <param name="extensionData">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="isFatal">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="pafLoggingLevel">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceTypeMismatchExceptionDataBase">
            <summary>
            Base class for service exceptions.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceTypeMismatchExceptionDataBase.INTERFACE_TYPE_DOES_NOT_INHERIT_FROM_REQUIRED_TYPE">
            <summary>
            Indicates that a service's type (interface type) does not inherit
            from the required interface type.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceTypeMismatchExceptionDataBase.m_RequiredType">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceTypeMismatchExceptionDataBase.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceTypeMismatchExceptionDataBase.#ctor(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.IPAFTypeHolder,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor builds with the standard arguments plus the
            <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData.ProblematicService"/>
            and the
            <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceTypeMismatchExceptionData.RequiredType"/>.
            </summary>
            <param name="problematicService">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData"/>.
            </param>
            <param name="requiredType">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceTypeMismatchExceptionData"/>.
            </param>
            <param name="extensionData">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="pafLoggingLevel">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="isFatal">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceTypeMismatchExceptionDataBase.RequiredType">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceTypeMismatchExceptionData"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceImplementationTypeExceptionData">
            <summary>
            Exceptions that occur handling services when the implementation type is known.
            Use <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceImplementationTypeExceptionData"/>
            to describe errors encountered when loading a service implementing an interface
            (described by <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData.ProblematicService"/>
            that is implemented by a specific concrete type.
            Note that because our service discovery process can involve a partial type
            description, this type description can be an assembly-qualified type name,
            a namespace-qualified type name or just a namespace or just an unqualified
            type name. This data should give whatever information we have about the
            concrete implementing type we are dealing with.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceImplementationTypeExceptionData.ProblematicImplementationTypeAssemblyName">
            <summary>
            Assembly name.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceImplementationTypeExceptionData.ProblematicImplementationTypeNameSpace">
            <summary>
            Portion before the dot in a namespace-qualified type name.
            (e.g. the "System.Collections" in "System.Collections.Generic").
            No terminating dot, please.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceImplementationTypeExceptionData.ProblematicImplementationTypeSimpleName">
            <summary>
            Last segment beyond the dot in a namespace-qualified type name.
            (e.g. the "String" in "System.String").
            No dots, please.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionData">
            <summary>
            Sealed version of <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionData.#ctor(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.ServicePipelineStage,PlatformAgileFramework.TypeHandling.IPAFTypeHolder,PlatformAgileFramework.TypeHandling.IPAFTypeHolder,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            See base.
            </summary>
            <param name="problematicServices">
            See base.
            </param>
            <param name="pipelineStage">
            See base.
            </param>
            <param name="problematicImplementationType">
            See base.
            </param>
            <param name="problematicServiceInterface">
            See <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData.ProblematicService"/>.
            </param>
            <param name="extensionData">
            See base.
            </param>
            <param name="pafLoggingLevel">
            See base.
            </param>
            <param name="isFatal">
            See base.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase">
            <summary>
            Base class for service pipeline exceptions.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase.SERVICE_DEADLOCK_IN_STAGE">
            <summary>
            <para>
            Error message. Used when the scheduling procedure cannot break
            service dependency deadlocks and the pipeline methods associated
            with a given stage cannot be completed. This error really does not
            make sense without a <see cref="T:PlatformAgileFramework.FrameworkServices.ServicePipelineStage"/> loaded. 
            </para>
            <para>
            In this case, the
            <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData.ProblematicService"/> is
            loaded with the type of the service manager (also a service) that
            encountered the deadlock.
            </para>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase.m_ProblematicServices">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase.m_PipelineStage">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase.#ctor(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.ServicePipelineStage,PlatformAgileFramework.TypeHandling.IPAFTypeHolder,PlatformAgileFramework.TypeHandling.IPAFTypeHolder,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor loads props.
            </summary>
            <param name="problematicServices">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicePipelineExceptionData.ProblematicServices"/>.
            </param>
            <param name="pipelineStage">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicePipelineExceptionData.PipelineStage"/>.
            May be <see langword="null"/>.
            </param>
            <param name="problematicServiceManagerType">
            Can be <see langword="null"/>. This container holds the full
            type description of the service manager.
            </param>
            <param name="problematicServiceBaseType">
            Can be <see langword="null"/>. This is the base type that the
            service manager serves. For the root manager, it will be
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </param>
            <param name="extensionData">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="pafLoggingLevel">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="isFatal">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase.ProblematicServices">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicePipelineExceptionData"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase.PipelineStage">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicePipelineExceptionData"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicePipelineExceptionData">
            <summary>
            Exceptions that occur when executing the service "pipeline" associated with
            service construction or teardown. An example is a problem resolving the
            order of execution of either load or initialization phases of a set of
            services supported by a given SM. Use <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData"/>
            to extract the name of the service manager - also a service.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicePipelineExceptionData.ProblematicServices">
            <summary>
            Set of services that the manager had a problem with.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicePipelineExceptionData.PipelineStage">
            <summary>
            Stage in the pipeline that we had the problem in. This will return
            <see langword="null"/> if the problem is not related to any particular
            stage. 
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase">
            <summary>
            Base class for service exceptions concerning multiple services. See
            <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData"/>.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 11oct2014 </date>
            <description>
            New. Implementation of <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServicesExceptionData"/>
            </description>
            </contribution>
            </history>
            <threadsafety>
            Uses a locked collection - safe after locking.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.MULTIPLE_IMPLEMENTATIONS_FOUND">
            <summary>
            Error message. Normally used when we need to locate an unique service
            and we find multiples with the same characteristics.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.OBJECT_NOT_A_SERVICE">
            <summary>
            Error message. Normally used when a client attempts to install
            a service object that does not inherit from <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.SERVICE_ALREADY_CREATED">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.SERVICE_CREATION_FAILED">
            <summary>
            Error message. General message used in an exception that often wraps another.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.SERVICE_IMPLEMENTATION_NOT_FOUND">
            <summary>
            Used when a concreate class implementing a sevice interface cannot be located.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.SERVICE_NOT_FOUND">
            <summary>
            Error message. This error message is the only one to be used when a
            service cannot be found within the manager. Use this when no construction
            exception or other exceptions occur, but the service is not contained
            in the SM's catalog.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.TYPE_DOES_NOT_IMPLEMENT_INTERFACE">
            <summary>
            Error message. Normally used when an object intended to be used as
            a service does not implement a required interface.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.TYPE_IS_NOT_RESOLVED">
            <summary>
            Error message. Issued when a type must be resolved as a <see cref="T:System.Type"/>
            and it is not.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.TYPE_NOT_AN_INTERFACE_TYPE">
            <summary>
            Error message. Normally used when a service infrastructure method
            expects a pure interface type.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.m_ProblematicService">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.#ctor(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor builds with the standard arguments plus the
            <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData.ProblematicService"/>.
            </summary>
            <param name="problematicService">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData"/>.
            </param>
            <param name="extensionData">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="pafLoggingLevel">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="isFatal">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.ProblematicService">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData">
            <summary>
            Exceptions that occur handling services.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData.ProblematicService">
            <summary>
            The problematic service. <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>).
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionData">
            <summary>
            Sealed version of <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionData.#ctor(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase"/>.
            <see cref="P:PlatformAgileFramework.FrameworkServices.Exceptions.IPAFServiceExceptionData.ProblematicService"/>.
            </summary>
            <param name="problematicService">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase"/>.
            </param>
            <param name="extensionData">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="isFatal">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="pafLoggingLevel">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceCreator`1">
            <summary>
            Generic version.
            </summary>
            <param name="servicePipelineObject">
            See non-Generic version.
            </param>
            <param name="serviceDescription">
            See non-Generic version.
            </param>
            <param name="typeFilter">
            See non-Generic version.
            </param>
            <param name="localServiceInstantiator">
            See non-Generic version.
            </param>
            <returns>
            See non-Generic version.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator`1">
            <summary>
            Generic version.
            </summary>
            <param name="servicePipelineObject">
            See non-Generic version.
            </param>
            <param name="serviceDescription">
            See non-Generic version.
            </param>
            <param name="typeFilter">
            See non-Generic version.
            </param>
            <param name="assemblyList">
            See non-Generic version.
            </param>
            <returns>
            See non-Generic version.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1">
            <summary>
            This interface handles basic services within the PAF system. It is intended
            to be used to hold framework services such as file service, resource service
            and other basic services. The generic version provides some type-safety.
            </summary>
            <history>
            <author> DAP </author>
            <date> 04jan2012 </date>
            <contribution>
            Changed to a public interface. 4.0 security allows us to expose it
            and simply leave the methods security critical.
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1.ServiceArray">
            <summary>
            Just an accessor for the service list. This array is a ThreadSafe collection
            that is generated in the current sort order of the service manager dictionary.
            It represents the internal collection of services at the moment the Property
            is requested. The dictionary is NOT locked during the use of the array
            obtained from this call.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1.AddService(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0})">
            <summary>
            Adds an <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/> to the list of available services.
            </summary>
            <param name="iFservice">
            A valid service description.
            </param>
            <remarks>
            Checks to see if it is a pure interface type and throws an exception if it is.
            </remarks>
            <exception>
            An exception must be thrown if an attempt is made to add a pure interface.
            A <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/> is thrown with a
            <see cref="F:PlatformAgileFramework.ErrorAndException.CoreCustomExceptions.PAFConstructorExceptionData.ATTEMPT_TO_INSTANTIATE_PURE_INTERFACE"/> message.
            </exception>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1.AddServices(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0}})">
            <summary>s
            Adds a group of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>s.
            </summary>
            <param name="iFservices">
            An enumeration of valid service description.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1.CreateService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator{`0})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceCreator`1"/>.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceCreator`1"/>.
            </param>
            <param name="serviceDescription">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceCreator`1"/>.
            </param>
            <param name="localServiceInstantiator">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceCreator`1"/>.
            </param>
            <param name="typeFilter">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceCreator`1"/>.
            </param>
            <returns>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceCreator`1"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1.GetServices``1(System.Boolean)">
            <summary>
            This method requests a class of services by its type. All loaded services
            that derive from the specified type are returned.
            </summary>
            <param name="exactTypeMatch">
            If set to <see langword="true"/>, derived Types will not be returned.
            </param>
            <returns>
            The found <typeparamref name="T"></typeparamref> matching the type
            <typeparamref name="U"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1.InstantiateLocalService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <summary>
            Creates a service from loaded assemblies.
            </summary>
            <param name="servicePipelineObject">
            Callees need <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ServiceManager"/>.
            </param>
            <param name="serviceDescription">
            A proper service description for the context under which the service is being
            created. See details on <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/>. If this
            service is already constructed this method does nothing.
            </param>
            <param name="typeFilter">
            Optional filter on the type.
            </param>
            <returns>
            An instantiated, but not loaded or initialized <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            If service is already constructed, the service is simply returned.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1.MakeServiceDefaultForInterface``1(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0})">
            <summary>
            This method modifies the default DEFAULT lookup procedure by allowing
            an interface type to have a service object registered as it's default
            implementor. Normally, the service implementing an interface with a
            BLANK name is the default. Usual procedure is for a caller to grab a
            service from the manager and use it here as an argument. This method
            will cause the "IsDefault" property on the service to be set.
            </summary>
            <param name="iFservice">
            The specific service to be registered as the default. This service
            must already be present in the dictionary of services and be constructed.
            </param>
            <exceptions>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"> is thrown if the
            <paramref name="iFservice"/> is not found.
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.SERVICE_NOT_FOUND"/>.
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServicePipelineDelegate`1">
            <summary>
            This delegate is the common method signature that corresponds to the
            pipeline methods, load, initialize, etc.
            </summary>
            <param name="servicePipelineObject">
            Object that is passed to the pipeline methods.
            </param>
            <typeparam name="T">
            Subinterface of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </typeparam>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFGenericServicePipelineDelegateDelegate`1">
            <summary>
            This delegate accepts the common method signature that corresponds to the
            pipeline methods, load, initialize, etc.
            </summary>
            <param name="pipelineDelegate">
            The delegate.
            </param>
            <param name="servicePipelineObject">
            Object that is passed to the pipeline methods.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject`1">
            <summary>
            <para>
            Interface for an an object providing services to services during the
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/> pipeline stages.
            </para>
            </summary>
            <typeparam name="T">
            Subinterface of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </typeparam>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject`1.GenericServiceManager">
            <summary>
            Returns a subtyped service manager.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary">
            <summary>
            <para>
            This interface provides storage for typed services that may or may not
            be instantiated. The dictionary exploits the fact that services are
            also named and typed objects. The inner dictionary is constrained to
            have elements with "default" identification for identifying a specific
            service implementation as the "default" for an interface. The inner
            dictionary uses service name and the "default" indicator to sort/access
            and the outer uses interface type.
            </para>
            <para>
            We place novel methods and properties on this interface so as not to
            restrict access to functionality on the underlying dictionaries. This
            gives developers a great deal of flexibility in using this type.
            </para>
            </summary>
            <remarks>
            Don't need to subclass dictionaries, really. Elements have necessary
            info for doing everything with custom comparers. This dictionary was
            factored out of original implementation to exclude lifetime management
            machinery for non-singleton services.
            </remarks>
            <threadsafety>
            Implementations do not necessarily have to be thread-safe. Implementations
            may be designed to be used inside a lock. Document, please!!!!!
            </threadsafety>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 20jun2013 </date>
            <description>
            New - developed two-level sort for speed. This makes it easier for clients
            to fetch a service fresh each time it's needed, rather than storing a
            reference because of efficiency concerns. Profiling has revealed this
            to be a problem in the old dictionary.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary.AddService(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription)">
            <summary>
            Normally, this method will partition the incoming items into separate
            dictionaries, based on the key.
            </summary>
            <param name="serviceDescription">An instantiated service.</param>
            <exceptions>
            Normal exceptions will propagate up from dictionaries concerning duplicates.
            These are not caught. No exceptions need be caught or thrown from the
            implementation.
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary.GetService(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject,System.Boolean)">
            <summary>
            This method looks for a service throughout the inner dictionaries.
            </summary>
            <param name="nto">nto key to look for.</param>
            <param name="exactInterfaceTypeMatch">
            If <see langword="false"/>, derived interfaces will be included in
            the search, if the dictionary does not have an exact match.
            </param>
            <returns>Located service or <see langword="null"/>.</returns>
            <exceptions>
            <exception> <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/>
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.SERVICE_NOT_FOUND"/>.
            This exception will wrap any infrastructure exceptions as
            inner exceptions.
            </exception>
            No exceptions caught or thrown.
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary.GetAllServices">
            <summary>
            Gets all services from all of the dictionaries, lined up in their
            sort order.
            </summary>
            <returns>Never <see langword="null"/>.</returns>
            <exceptions>
            No exceptions thrown or caught.
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal">
            <summary>
            Internal version of the interface for the serializer and for internal
            sets.
            </summary>
            <history>
            <author> DAP </author>
            <date> 21feb2012 </date>
            <contribution>
            New. - built with the public interface.
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal.SetIsDefault(System.Boolean)">
            <summary>
            See corresponding prop on <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal.SetServiceInterfaceType(PlatformAgileFramework.TypeHandling.IPAFTypeHolder)">
            <summary>
            See corresponding prop on <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal.SetServiceImplementationType(PlatformAgileFramework.TypeHandling.IPAFTypeHolder)">
            <summary>
            See corresponding prop on <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal.SetServiceName(System.String)">
            <summary>
            See corresponding prop on <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal.SetServiceObject(System.Object)">
            <summary>
            See corresponding prop on <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceCreator">
            <summary>
            This is a delegate used in creating a service, either remote or local.
            </summary>
            <param name="servicePipelineObject">
            The pipeline object that is needed for staged services.
            </param>
            <param name="serviceDescription">
            The description of the service to be created.
            </param>
            <param name="typeFilter">
            An optional type filter on service implementation types.
            Default = <see langword="null"/>.
            </param>
            <param name="localServiceInstantiator">
            Instantiator for local services. Default = <see langword="null"/>
            will cause an internal default to be used.
            </param>
            <returns>
            Never <see langword="null"/>.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator">
            <summary>
            This is a delegate used in creating a local service from type information
            that is already loaded into the current "AppDomain".
            </summary>
            <param name="servicePipelineObject">
            The pipeline object that is needed for staged services.
            </param>
            <param name="serviceDescription">
            The description of the service interface and implementation.
            </param>
            <param name="typeFilter">
            An optional type filter on service implementation types.
            </param>
            <param name="assemblyList">
            Optional list of assemblies to constrain the search to. Default = <see langword="null"/>
            causes all assemblies in current "AppDomain" to be searched.
            </param>
            <returns>
            Service instance or <see langword="null"/>.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended">
            <summary>
            This interface provides internal access to manager parent.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended.CreateService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)">
            <summary>
            Creates a service from either loaded assemblies or a specific assembly
            in "available assemblies" or anywhere else we have a spec for.
            </summary>
            <param name="servicePipelineObject">
            Callees need <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ServiceManager"/>.
            </param>
            <param name="serviceDescription">
            The <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/> provides a description
            of the service to be created. Please see the documentation for this
            interface.
            </param>
            <param name="typeFilter">
            Optional filter on the created service.
            </param>
            <param name="localServiceInstantiator">
            Constructs services after their type information is verified as
            available in current "AppDomain".
            </param>
            <returns>
            A framework service. Never <see langword="null"/>.
            </returns>
            <exceptions>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.SERVICE_CREATION_FAILED"/>
            </exception>
            </exceptions>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended.ParentManager">
            <summary>
            Provides access to a parent manager.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager"/>.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServicePipelineDelegate">
            <summary>
            This delegate is the common method signature that corresponds to the
            pipeline methods, load, initialize, etc.
            </summary>
            <param name="servicePipelineObject">
            Object that is passed to the pipeline methods.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServicePipelineDelegateDelegate">
            <summary>
            This delegate accepts the common method signature that corresponds to the
            pipeline methods, load, initialize, etc.
            </summary>
            <param name="pipelineDelegate">
            The delegate.
            </param>
            <param name="servicePipelineObject">
            Object that is passed to the pipeline methods.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject">
            <summary>
            <para>
            Interface for an an object providing services to services during the
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/> pipeline stages.
            </para>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ExecutionException">
            <summary>
            Carries an exception that may be generated during the execution of a
            pipeline stage. This is <see langword="null"/> if all is well.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.PipelineStage">
            <summary>
            This is the stage of the pipeline our task is working on. Can
            be <see langword="null"/> if the work is not stage-related.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ServiceManager">
            <summary>
            Returns a base service manager.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFGenericServiceDictionary">
            <summary>
            This is an implementation of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary"/> that
            is primarily used by service managers.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 20jun2013 </date>
            <description>
            New.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Not thread-safe. Must be locked externally.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGenericServiceDictionary.#ctor">
            <summary>
            Constructor installs our <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceTypeComparer"/> to sort our
            inner dictionaries.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGenericServiceDictionary.NewInnerDictionary">
            <summary>
            Default just returns a standard dictionary. It is, however, specialized
            by the installation of our custom comparer, which compares items
            by name and default flag.
            </summary>
            <returns>
            Empty dictionary.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGenericServiceDictionary.AddService(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGenericServiceDictionary.GetService(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject,System.Boolean)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGenericServiceDictionary.GetAllServices">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary"/>
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions">
            <summary>
            Extensions and helpers for service descriptions and related types.
            </summary>
            <history>
            <author> DAP </author>
            <date> 21feb2012 </date>
            <contribution>
            New - moved repetitive code into this class.
            </contribution>
            </history> 
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions.ChangeDefaultFlag``1(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0},System.Nullable{System.Boolean})">
            <summary>
            This generates a new description from an old one with
            just the default flag modified.
            </summary>
            <param name="serviceDescription">
            Incoming description that is to be cloned with just the
            <see cref="!:IPAFServiceDescription&lt;T&gt;.IsDefault"/> property
            mofified.
            </param>
            <param name="isDefault">
            <see langword="null"/> flips the flag.
            <see langword="true"/> sets the flag.
            <see langword="false"/> clears the flag.
            </param>
            <returns>
            A description with the default flag changed appropriately.
            </returns>
            <remarks>
            Generates a <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1"/> to implement
            the interface. Note that a reference copy of the service object
            is made. A copy of the entire service is made to avoid external
            clients needing full trust or having access to our internals.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions.GetServiceDescriptionInterface(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject)">
            <summary>
            This generates a full description from the nto.
            </summary>
            <param name="nto">Defaulted nto.</param>
            <returns>
            A description with the name, default flag and the interface type.
            Implementation type is <see langword="null"/>.
            </returns>
            <remarks>
            Generates a <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceDescription"/> to implement
            the interface.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions.GetServiceDescription(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject)">
            <summary>
            This generates a full description from the nto.
            </summary>
            <param name="nto">Defaulted nto.</param>
            <returns>
            A description with the name, default flag and the interface type.
            Implementation type is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions.SafeSetIsDefault(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,System.Boolean)">
            <summary>
            Makes a safe call into the service description property. Useful for user-supplied services without
            access to the internal interface.
            </summary>
            <param name="serviceDescription">One of us.</param>
            <param name="isDefault">param to set.</param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions.SafeSetServiceObject(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,System.Object)">
            <summary>
            Makes a safe call into the service description property. Useful for user-supplied services without
            access to the internal interface.
            </summary>
            <param name="serviceDescription">One of us.</param>
            <param name="serviceObject">param to set.</param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions.FindServiceInterfaceInCollection``1(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription})">
            <summary>
            Finds a service interface in a collection of services.
            </summary>
            <param name="serviceDescriptions">Collection to search.</param>
            <returns>
            First located service or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions.FindServiceInterfaceInCollectionInternal``1(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription})">
            <summary>
            Finds a service interface in a collection of services.
            </summary>
            <param name="serviceDescriptions">Collection to search.</param>
            <returns>
            First located service or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions.FindServiceImplementationTypeInCollectionInternal``1(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription})">
            <summary>
            Finds a service implementation type in a collection of services.
            </summary>
            <param name="serviceDescriptions">Collection to search.</param>
            <returns>
            First located service or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescriptionExtensions.FindServiceImplementationTypeInCollection``1(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription})">
            <summary>
            Finds a service implementation type in a collection of services.
            </summary>
            <param name="serviceDescriptions">Collection to search.</param>
            <returns>
            First located service or <see langword="null"/>.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceTypeComparer">
            <summary>
            This class implements a comparison of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>s.
            We compare the interface type. This is designed to be used in the
            outer dictionary of a two-level service dictionary.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 20jun2013 </date>
            <description>
            Built for the two-level dictionary scheme.
            </description>
            </contribution>
            </history>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PlatformAgileFramework.FrameworkServices.PAFServiceTypeComparer.DefaultMainCompare(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject,PlatformAgileFramework.Collections.IPAFNamedAndTypedObject)" -->
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceTypeComparer.GetHashCode(System.Object)">
            <summary>
            This override gets the hash code of the service interface type, because
            that is what we are sorting by.
            </summary>
            <param name="obj">
            An <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>.
            </param>
            <returns>The hash code of the service interface type.</returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">
            "obj"
            </exception>
            <exception cref="T:System.ArgumentException">
            "Not a 'IPAFNamedAndTypedObject'"
            </exception>
            <exception> <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/>
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.TYPE_IS_NOT_RESOLVED"/>. The
            interface type must be resolved for this method. Dictionary throws
            a cryptic exception, so a better one is thrown here.
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceInstanceComparer">
            <summary>
            This class implements a comparison of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>s.
            We compare the interface name and the "default" indicator. This is designed
            to be used in dictionaries where interface type is the same.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 20jun2013 </date>
            <description>
            Built for the two-level dictionary scheme.
            </description>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceInstanceComparer.IgnoreCase">
            <summary>
            Determines whether a case-insensitive comparision is made on
            the name.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceInstanceComparer.#ctor">
            <summary>
            Default constructor builds with case-insensitive comparison.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceInstanceComparer.#ctor(System.Boolean)">
            <summary>
            Constructor allows case-sensitive comparison to be set.
            </summary>
            <param name="ignoreCase">
            <see langword="true"/> for case-insensitive comparison.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceInstanceComparer.DefaultMainCompare(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject,PlatformAgileFramework.Collections.IPAFNamedAndTypedObject)">
            <summary>
            Compares the <see cref="!:IPAFNamedAndTypedObject.ObjectName"/>s.
            Blank or <see langword="null"/> name is ordered first. This is
            overridden if the default flag is set on the item.
            </summary>
            <param name="firstKey">
            The first <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> to compare.
            </param>
            <param name="secondKey">
            The other <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> to compare.
            </param>
            <returns>
            See <see cref="T:System.Collections.Generic.IComparer`1"/>
            </returns>
            <exceptions>
            <exception> <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/>
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.ONLY_ONE_UNNAMED_SERVICE_IMPLEMENTATION_IS_ALLOWED"/>
            is thrown if both <see cref="!:IPAFNamedAndTypedObject.ObjectName"/>s are 
            <see langword="null"/> or blank. Dictionary throws a cryptic
            exception, so a better one is thrown here.
            </exception>
            <exception> <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/>
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicesExceptionDataBase.ONLY_ONE_DEFAULT_SERVICE_IMPLEMENTATION_IS_ALLOWED"/>
            is thrown if both <see cref="!:IPAFNamedAndTypedObject.IsDefaultObject"/>s are 
            <see langword="true"/>. Dictionary throws a cryptic
            exception, so a better one is thrown here.
            </exception>
            <exception> <see cref="T:System.ArgumentException"/> is thrown if either
            <paramref name="firstKey"/> or <paramref name="secondKey"/>
            is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceInstanceComparer.GetHashCode(System.Object)">
            <summary>
            This override gets the hash code of the service name, because that is
            what we are sorting by.
            </summary>
            <param name="obj">
            An <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </param>
            <returns>The hash code of the service name.</returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">
            "obj"
            </exception>
            <exception cref="T:System.ArgumentException">
            "Not a 'IPAFServiceDescription'"
            </exception>
            </exceptions>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PlatformAgileFramework.FrameworkServices.PAFServiceDictionaryExtensions" -->
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDictionaryExtensions.EnumerateAllServices(PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary)">
            <remarks>
            Enumerates all services in the layered dictionary, in their sort
            order. See <see cref="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary.GetAllServices"/>
            This extension method has exactly the same functionality.
            Factored into an extension method so it can be used in anybody's
            dictionary. No exceptions are generated or caught.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDictionaryExtensions.GetAnyServicesUnsafe(PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary,System.Type,System.Boolean)">
            <summary>
            This is a helper method. It retrieves a set of services by type, irrespective
            of name.
            </summary>
            <param name="serviceDictionary">
            One of us.
            </param>
            <param name="interfaceType">
            This is the type of the service interface.
            </param>
            <param name="exactTypeMatch">
            If set to <see langword="true"/>, derived Types will not be returned.
            </param>
            <remarks>
            Services are returned in sort order.
            </remarks>
            <threadsafety>
            Unsafe lock unsynchronized dictionary before use.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDictionaryExtensions.GetServiceInterfacesOfType(PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary,System.Type,System.Boolean)">
            <summary>
            Gets all services of a given interface type.
            </summary>
            <param name="serviceDictionary">One of us.</param>
            <param name="interfaceType">type to look for.</param>
            <param name="exactTypeMatch">
            Allow derived interfaces. Default = <see langword="true"/>
            </param>
            <returns>
            Found services or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDictionaryExtensions.GetTypedServiceDescriptions``1(PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary,System.Boolean)">
            <summary>
            For the generic dictionary/manager implementation. Selects Generic services
            of a given type from the dictionary.
            </summary>
            <param name="serviceDictionary">
            Dictionary to pull the Generic services out of.
            </param>
            <param name="exactTypeMatch">
            Allow derived interfaces. Default = <see langword="true"/>
            </param>
            <typeparam name="T">Type constrained to be a service and a class.</typeparam>
            <returns>
            Collection of Generic services or <see langword="null"/>
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDictionaryExtensions.GetUnconstructedServices(PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary)">
            <summary>
            Finds all unconstructed services in a service dictionary.
            </summary>
            <param name="serviceDictionary">Dictionary to search.</param>
            <returns>Collection of services needing to be instantiated, or <see langword="null"/>.</returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDictionaryExtensions.GetUnstagedServices(PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary,PlatformAgileFramework.FrameworkServices.ServicePipelineStage)">
            <summary>
            Finds all constructed services in a service dictionary which wear
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/> and have not gone through the appropriate
            service lifetime stage.
            </summary>
            <param name="serviceDictionary">Dictionary to search.</param>
            <param name="pipelineStage">Service pipeline stage that service has not undergone.</param>
            <returns>Collection of services needing to be acted upon, or <see langword="null"/>.</returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDictionaryExtensions.TryLocateService(PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary,PlatformAgileFramework.Collections.IPAFNamedAndTypedObject,System.Boolean)">
            <remarks>
            See <see cref="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDictionary.GetService(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject,System.Boolean)"/>. This extension
            method has exactly the same functionality without the exceptions.
            Factored into an extension method so it can be used in anybody's
            dictionary. No exceptions are generated or caught.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceComparer`1">
            <summary>
            This class implements a comparison of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/>s.
            We compare the interface type and the name. This is just a wrapper on the base
            class.
            </summary>
            <history>
            <contribution>
            <author> DAV </author>
            <date> 21jun2012 </date>
            <description>
            Built this type-safe comparer to work with the new service dictionary.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceComparer`1.#ctor">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceComparer"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceComparer`1.#ctor(System.Boolean)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceComparer"/>.
            </summary>
            <param name="ignoreCase">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceComparer"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceComparer`1.DefaultMainCompare(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0})">
            <remarks>
            Delegates to <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceComparer"/>.
            </remarks>
            <exceptions>
            See exceptions on base class.
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceComparer`1.Compare(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0})">
            <remarks>
            Delegates to <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceComparer"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceComparer`1.Equals(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0})">
            <remarks>
            Delegates to <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceComparer"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceComparer`1.GetHashCode(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0})">
            <remarks>
            Delegates to <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceComparer"/>.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceComparer">
            <summary>
            This class implements a comparison of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>s.
            We compare the interface type and the name.
            </summary>
            <history>
            <contribution>
            <author> DAV </author>
            <date> 21jun2012 </date>
            <description>
            Documented this base comparer.
            </description>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceComparer.IgnoreCase">
            <summary>
            Determines whether a case-insensitive comparision is made on
            the name.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceComparer.#ctor">
            <summary>
            Default constructor builds with case-insensitive comparison.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceComparer.#ctor(System.Boolean)">
            <summary>
            Constructor allows case-sensitive comparison to be set.
            </summary>
            <param name="ignoreCase">
            <see langword="true"/> for case-insensitive comparison.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceComparer.DefaultMainCompare(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription)">
            <summary>
            First compares the types of the <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceInterfaceType"/>s.
            then, if those are the same, compares the <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceName"/>s.
            Blank or <see langword="null"/> name is ordered first.
            </summary>
            <param name="firstKey">
            The first <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/> to compare.
            </param>
            <param name="secondKey">
            The other <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/> to compare.
            </param>
            <returns>
            See <see cref="T:System.Collections.Generic.IComparer`1"/>
            </returns>
            <exceptions>
            <exception> <see cref="T:System.ArgumentException"/> is thrown if
            both <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceName"/>s are 
            is <see langword="null"/> or blank.
            </exception>
            <exception> <see cref="T:System.ArgumentException"/> is thrown if
            either <see cref="!:IPAFServiceDescription.ServiceInterfaceType.TypeType"/>
            is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription">
            <summary>
            <para>
            This interface defines components that are used to describe a service
            - both it's service interface and it's implementing type. The service
            is optionally assigned a name. Service names must be unique within any
            "AppDomain". This interface contains sufficient information
            to describe local services only. This is the information exposed in Core.
            Service dictionaries have been rewritten to make it difficult, but not
            impossible to access services by specifying their implementation type.
            It is possible for clients to assign names to services corresonding to
            assembly-qualified names of their implementing types. This is not a
            good idea, since it is at odds with the principles of "Service Orientation".
            </para>
            <para>
            This interface is needed to support our service discovery process. In PAF,
            the discovery process is designed to work with partial information or very
            specific information. One extreme is to simply provide an interface name.
            The service creation logic can search through loaded assemblies to find
            constructable types that implement the interface. However, in Core, no
            code generation is supported, so the client usually has access to an actual
            interface <see cref="T:System.Type"/> object. Additional information about a
            service's implementation can be provided. This is provided in the
            <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceImplementationType"/> property. This is necessary when
            information needs to be provided to the service manager concerning a
            specific implementation of the service interface needs to be used.
            </para>
            <para>
            It should be mentioned that any conceivable type of filter on
            <see cref="T:System.Type"/>s  can be created using <see cref="T:PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter"/>.
            This can be applied additionally to provide further filtering on
            service types.
            </para>
            </summary>
            <history>
            <author> DAP </author>
            <date> 21feb2012 </date>
            <contribution>
            New - made this to unify the way we describe services. It was done in
            different ways in different places. Sometimes this was necessary, but
            mostly not.
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.IsDefault">
            <summary>
            This property is used when the interface is used
            within a collection of services to identify the default
            implementation of the service interface to be handed out to
            clients requesting services by type only.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceInterfaceType">
            <summary>
            Description of the interface type that will be requested from the
            service manager. As a best practice, services should not be exposed as
            concrete types. It is recommended that this property always be
            populated with an interface type and that a service be requested by
            interface and possibly name. This can never be <see langword="null"/>.
            </summary>
            <remarks>
            Note that setter should almost never be used - any implementation of
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/> is normally immutable
            WRT to interface type.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceImplementationType">
            <summary>
            <para>
            Description of the concrete implementation type that implements the service.
            Only elevated-trust callers can access a service according to its concrete
            type in PAF. It is generally discouraged. This property need be
            non-<see langword="null"/> only when there is a need to describe the
            concrete implementation when the implementation is known.
            </para>
            <para>
            This property can contain full type information, including an assembly name
            that could be searched for in various locations, depending on the settings
            of the <see cref="T:PlatformAgileFramework.Manufacturing.IPAFAssemblyLoader"/> in use within the service manager or
            the <see cref="T:PlatformAgileFramework.TypeHandling.IPAFTypeHolder"/>.
            </para>
            <para>
            Partial information can be in the form of a namespace (with or without an
            assembly spec). An example would be something like "System.Drawing" or
            <see cref="N:System"/>. If the namespace is not <see langword="null"/>, it
            is used as a filter on returned types. Only Types within the given namespace
            will be checked for the interface implementation. This is useful in cases
            where services may be implemented by several different Types in an assembly,
            but the Types are organized so that only one Type within a given namespace
            implements an interface. An example of this is <c>System.Data.OleDb.OleDbConnection</c>
            versus <c>System.Data.SqlClient.SqlClientConnection</c>. Both Types
            implement <c>System.Data.IDbConnection</c> and live in the same assembly,
            but in different namespaces. This is a questionable practice for designers
            of assemblies, but it's done often, so we support it.
            </para>
            </summary>
            <exceptions>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"> with
            <see cref="!:PAFTypeMismatchExceptionDataBase.FIRST_TYPE_NOT_CASTABLE_TO_SECOND_TYPE"/>
            message if the implementation type does not inherit from the interface.
            </exception>
            <exception cref="T:System.ArgumentNullException"> is thrown if
            <paramref name="value"/> is <see langword="null"/> in set.
            </exception>
            </exceptions>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceName">
            <summary>
            This is an optional name for the service. If blank or <see cref="F:System.String.Empty"/>,
            this service will be the default service implementation for this interface.
            There can only be one default service in any "AppDomain" for
            a given interface type (<see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceInterfaceType"/>). This property
            must never be <see langword="null"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceObject" -->
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal">
            <summary>
            This interface provides internal access to manager parent.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal.CreateServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended"/>.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal.ParentManagerInternal">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended"/>.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceDescription">
            <summary>
            <para>
            This class is an implementation of the <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>
            interface.
            </para>
            </summary>
            <history>
            <author> DAP </author>
            <date> 07jan2012 </date>
            <contribution>
            Rewrote the class based on type holders.
            </contribution>
            </history>
            <threadsafety>
            Safe. Secured with monitors - low traffic.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_ServiceInterfaceType">
            <summary>
            Backing field. Concrete type for serialization.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_ServiceInterfaceType_Lock">
            <summary>
            Lock for the interface.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_ServiceImplementationType">
            <summary>
            Backing field. Concrete type for serialization.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_ServiceImplementationType_Lock">
            <summary>
            Lock for the implementation.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_ServiceName">
            <summary>
            Backing field.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_ServiceName_Lock">
            <summary>
            Lock for the name.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_ServiceObject">
            <summary>
            Backing field.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_ServiceObject_Lock">
            <summary>
            Lock for the service object.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_IsDefault">
            <summary>
            Backing field.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.m_IsDefault_Lock">
            <summary>
            Lock for the default flag.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.#ctor">
            <summary>
            For the serializer.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.#ctor(PlatformAgileFramework.TypeHandling.IPAFTypeHolder,PlatformAgileFramework.TypeHandling.IPAFTypeHolder,System.String,System.Boolean,System.Object)">
            <summary>
            This constructor loads props.
            </summary>
            <param name="serviceInterfaceType">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceInterfaceType"/>.
            Can not be <see langword="null"/>.
            </param>
            <param name="serviceImplementationType">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceImplementationType"/>.
            Default = <see langword="null"/>.
            </param>
            <param name="serviceName">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceName"/>.
            Default = <see langword="null"/>. Constructor turns null into blank.
            </param>
            <param name="isDefault">
            Allows a preset of this property. Rarely used, since this flag is normally
            set after the description is added to the service manager.
            </param>
            <param name="serviceObject">
            Service implementation instance that is validated in this constructor.
            If this parameter is present it overrides <paramref name="serviceImplementationType"/>
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if
            <paramref name="serviceInterfaceType"/>
            is <see langword="null"/>.
            </exception>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"> with
            <see cref="F:PlatformAgileFramework.TypeHandling.Exceptions.PAFTypeMismatchExceptionMessageTags.FIRST_TYPE_NOT_CASTABLE_TO_SECOND_TYPE"/>
            message if the implementation type does not inherit from the interface.
            </exception>
            Additional exceptios are thrown from <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.ValidateServiceObject(System.Object)"/> if
            the incoming service object is not <see langword="null"/>. See that method for
            details.
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.#ctor(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject)">
            <summary>
            This constructor builds a description from a <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>.
            In the cases where we don't need to specify an implementation, this is
            all we need. Name is transferred and the type info is transferred to the
            <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceInterfaceType"/>.
            </summary>
            <param name="nto">
            Incoming object.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if
            <paramref name="nto"/>
            is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.InitializePAFServiceDescription">
            <summary>
            Initializes basic stuff in the class. Can be called multiple times.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.ValidateServiceObject(System.Object)" -->
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.IsDefault">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.ServiceInterfaceType">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.ServiceImplementationType">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.ServiceName">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.ServiceObject">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.GetDescriptionHelper(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject)">
            <summary>
            Helper to create one of us from a <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>.
            </summary>
            <param name="ntod">The object to create from.</param>
            <returns>
            A service description without any implementation information.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.SetServiceObjectI(System.Object)">
            <summary>
            Little helper, appreciated by all.
            </summary>
            <param name="serviceObject">Sets the non-Generic.</param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#FrameworkServices#IPAFServiceDescriptionInternal#SetIsDefault(System.Boolean)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </summary>
            <param name="isDefault">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#FrameworkServices#IPAFServiceDescriptionInternal#SetServiceInterfaceType(PlatformAgileFramework.TypeHandling.IPAFTypeHolder)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </summary>
            <param name="typeHolder">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </param>
            <remarks>
            Since this implementation is serializable, we create an actual concrete
            container.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#FrameworkServices#IPAFServiceDescriptionInternal#SetServiceImplementationType(PlatformAgileFramework.TypeHandling.IPAFTypeHolder)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </summary>
            <param name="typeHolder">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </param>
            <remarks>
            Since this implementation is serializable, we create an actual concrete
            container.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#FrameworkServices#IPAFServiceDescriptionInternal#SetServiceName(System.String)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </summary>
            <param name="serviceName">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#FrameworkServices#IPAFServiceDescriptionInternal#SetServiceObject(System.Object)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </summary>
            <param name="obj">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal"/>.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#Collections#IPAFNamedObject#ObjectName">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/> - set is <see cref="T:System.Security.SecurityCriticalAttribute"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#Collections#IPAFNamedObject#ObjectValue">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/> - set is <see cref="T:System.Security.SecurityCriticalAttribute"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#Collections#IPAFNamedObject#IsDefaultObject">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/> - set is <see cref="T:System.Security.SecurityCriticalAttribute"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#Collections#IPAFNamedAndTypedObject#AssemblyQualifiedObjectType">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> - set throws exception.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.PlatformAgileFramework#Collections#IPAFNamedAndTypedObject#ObjectType">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> - set throws exception.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceManager">
            <summary>
            <para>
            This class is a base implementation of the <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager"/>
            interface for use through inheritance. The class also contains necessary
            methods for startup and shutdown of the manager by deriving from
            <see cref="T:PlatformAgileFramework.FrameworkServices.PAFService"/>.
            </para>
            </summary>
            <history>
            <contribution>
            <author> JAW(P) </author>
            <date> 05mar2016 </date>s
            <description>
            Rewrote to exclude stuff not in PCL profile 344 to support Xamarin.Forms.
            </description>
            </contribution>
            <contribution>
            <author> DAP </author>
            <date> 07jan2012 </date>
            <description>
            Rewrote the class to provide a base class for supporting all scenarios
             - core/extended and local/remote.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Safe.
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.InitialServices">
            <summary>
            This is an optional set of services that can be loaded by an "AppDomain"
            creator if these are to be created when the service first starts. Usually loaded
            by a worker if done from afar. This is also an extensibility point for framework
            builders. Basic low-level services that are platform-specific can be pre-created
            and loaded here at application start. In core, these types must have parameterless
            constructors.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceManager.m_ServiceDictionaryWrapper">
            <summary>
            A dictionary to handle the services.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceManager.m_ParentManager">
            <summary>
             Backing for ParentManagerPIV.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.ParentManagerPIV">
            <summary>
            Backing.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServiceManager.m_RootServiceManagerInternal">
            <summary>
            This is normally loaded at/after construction time for any instance of a
            service manager. For a manager that is not the root manager, it is
            normally poined at the root manager, which is already constructed.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.#ctor(System.Guid,System.Type,System.String,PlatformAgileFramework.FrameworkServices.IPAFServiceManager,System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription},PlatformAgileFramework.FrameworkServices.PAFServiceCreator,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)">
            <summary>
            This constructor loads name and type of the manager WHEN
            CONSIDERED AS A SERVICE and an optional disposal guid.
            </summary>
            <param name="guid">
            The key that the class instantiator supplies so that the instantiator
            is the only one that can dispose the instance. The default
            for no argument supplied is "default(Guid)" which is the very
            same as <see cref="F:System.Guid.Empty"/>.
            </param>
            <param name="serviceType">
            A type for the manager AS A SERVICE. Under almost all circumstances, this should be
            an interface type. If the type is the same as another service installed in
            a service manager, the name must be different. If the parameter is
            <see langword="null"/> the type of "this" is used. Default is the type
            of "this". It is best to hide the type of "this" and register the service
            by its interface type.
            </param>
            <param name="serviceManagerName">
            A name for the manager AS A SERVICE that is unique within its <paramref name="serviceType"/>.
            or <see langword="null"/> or blank. <see langword="null"/> or blank indicates the default service
            for the service type. This is entirely adequate for simple scenarios where there
            is only one service of a given type. However, there must be only one default
            service or the service manager will throw an exception. Default = blank, which
            is what is installed in the dictionary. Service managers that allow multiple
            instances of the same service type often employ a factory to auto-generate
            names.
            </param>
            <param name="parentManager">
            Optional parent when a service manager is in a hierarchy.
            </param>
            <param name="services">
            Set of services to install.
            </param>
            <param name="serviceCreator">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.ServiceCreator"/>. Default = <see langword="null"/>
            causes <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.DefaultServiceCreator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)"/> to be used.
            </param>
            <param name="localServiceInstantiator">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.LocalServiceInstantiator"/>. Default = <see langword="null"/>
            causes <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.DefaultLocalServiceInstantiator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})"/> to be used.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.InitializeServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            This method initializes the service manager by initializing all contained
            services, then calling the base.InitializeService to broadcast the event.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.LoadServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            This method loads the service manager by loading all contained
            services, then calling the base.LoadService to broadcast the event.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.RootServiceManager">
            <summary>
            This is provided from the root manager if it is under construction
            and just returns the static root manager if we are anything
            but the root manager. This is the standard implementation. Others
            are possible with non-static root managers. (customer requiremet).
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.RootServiceManagerInternal">
            <summary>
            See <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.RootServiceManager"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.ServiceCreator">
            <summary>
            Pluggable service creator. Immutable field needs no synchronization.
            </summary>
            <threadsafety>
            Set only during construction, please!
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.LocalServiceInstantiator">
            <summary>
            Pluggable service instantiator.
            </summary>
            <threadsafety>
            Set only during construction, please!
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.CreateServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            This version in Core only builds services with default constructors.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="serviceDescription">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="localServiceInstantiator">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="typeFilter">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <returns>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </returns>
            <remarks>
            Common implementation for both interfaces. safe/critical so we can
            load stuff.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.InitializeServicesPIV(System.Nullable{System.Boolean})">
            <summary>
            Initializes a set of services "en-masse" after they have been
            constructed and loaded. Services are iteratively initialized to
            resolve dependencies. If a service needs construction
            or loading, it is constructed and/or loaded.
            </summary>
            <param name="initializeOnThread">
            Determines if services are allowed to be initialized on
            background threads.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.LoadServicesPIV(System.Nullable{System.Boolean})">
            <summary>
            Loads a set of services "en-masse" after they have been
            constructed. Services are iteratively loaded to
            resolve dependencies. If a service needs construction,
            it is constructed.
            </summary>
            <param name="loadOnThread">
            Determines if services are allowed to be loaded on
            background threads.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerExtended#ParentManager">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.GetServicePIV(System.Type,System.String,System.Boolean,System.Object)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.PlatformAgileFramework#FrameworkServices#IPAFServiceManager#GetService(System.Type,System.String,System.Boolean,System.Object)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.PlatformAgileFramework#FrameworkServices#IPAFServiceManager#GetService(System.Type,System.Boolean,System.Object)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.PlatformAgileFramework#FrameworkServices#IPAFServiceManager#GetService(System.Type,System.Object)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.PlatformAgileFramework#FrameworkServices#IPAFServiceManager#GetService(System.Type)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerInternal#CreateServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="serviceDescription">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="localServiceInstantiator">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="typeFilter">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <returns>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </returns>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerInternal#ParentManagerInternal">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerExtended#CreateService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.AddServiceHelper(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription)">
            <summary>
            Non-virtual helper to add services to the manager. This should be the
            only way a service is added to the manager.
            </summary>
            <param name="serviceDescription">Incoming service.</param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">
            "serviceDescription"
            </exception>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.OBJECT_NOT_A_SERVICE"/> if the service interface type
            does not inherit from <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </exception>
            </exceptions>
            <remarks>
            We no longer expose a public method to add non-Generic services. This is
            to help with type safety. We have to keep the ability for ourselves to
            install legacy non-Generic services.
            </remarks>
            <threadsafety>
            Locks the dictionary with a write lock during the addition.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.AddServicesHelper(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription})">
            <remarks>
            See <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.AddServiceHelper(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription)"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.CreateInitialServices(PlatformAgileFramework.FrameworkServices.IPAFServiceManager)">
            <summary>
            <para>
            This is a helper method that builds the services from <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.InitialServicesInternal"/>,
            one-by-one, in enumeration order and adds them to the service array without
            initializing them.
            </para>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.DefaultServiceCreator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)">
            <summary>
            Creates a service from either loaded assemblies or a specific assembly
            in "available assemblies" or anywhere else we have a spec for. This
            version in Core only builds services with default constructors.
            </summary>
            <param name="servicePipelineObject">
            Callees need <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ServiceManager"/>.
            </param>
            <param name="serviceDescription">
            The <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/> provides a description
            of the service to be created. Please see the documentation for this
            interface.
            </param>
            <param name="typeFilter">
            Optional filter on the created service. Default = <see langword="null"/>.
            </param>
            <param name="localServiceInstantiator">
            Constructs services after their type information is verified as
            available in current "AppDomain". Default = <see langword="null"/>
            causes <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.DefaultLocalServiceInstantiator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})"/> to be used.
            </param>
            <returns>
            A framework service. Never <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.DefaultLocalServiceInstantiator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates a service from loaded assemblies. This method only builds
            services with default constructors.
            </summary>
            <param name="servicePipelineObject">
            Callees need <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ServiceManager"/>.
            </param>
            <param name="serviceDescription">
            Standard service description.
            </param>
            <param name="typeFilter">
            Optional filter on the type. Default = <see langword="null"/>.
            </param>
            <param name="assemblyList">
            Optional list of assemblies to constrain the search to. Default = <see langword="null"/>
            causes all assemblies in current "AppDomain" to be searched.
            </param>
            <returns>
            A constructed service, never <see langword="null"/>.
            </returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> for <paramref name="servicePipelineObject"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"> for <paramref name="serviceDescription"/>.
            </exception>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.MULTIPLE_IMPLEMENTATIONS_FOUND"/> if the service discovery process
            discovers multiple implementations.
            </exception>
            </exceptions>
            		// TODO - KRM - Need to make all type filters deep-copyable.
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.GetNamedService(System.String,System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription})">
            <summary>
            This method requests a specific service by its name.
            </summary>
            <param name="serviceName">
            Textual name of the service. If <see langword="null"/> or blank,
            we return the first service found.
            </param>
            <param name="iFServiceDescriptions">
            Set of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>s.
            </param>
            <returns>
            The found <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/> or <see langword="null"/>.
            </returns>
            <remarks>
            This method is handy when used in conjunction with GetServices to get
            an array of services that inherit from a given Type. After gathering
            an array of services, those services can then be checked by name and the first
            one found is returned.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.StageDependentServices(PlatformAgileFramework.FrameworkServices.IPAFServiceManager{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.ServicePipelineStage,System.Boolean)">
            <summary>
            Loads/initializes services that have dependencies.
            </summary>
            <param name="serviceManager">
            A service manager that services can call upon during the load/initialization process.
            This is allowed to be <see langword="null"/> only if <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.RootServiceManager"/>
            is not <see langword="null"/> or we are not the root service.
            </param>
            <param name="pipelineStage">
            This is the stage we are working on in the pipeline. Currently,
            <see cref="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.LOAD"/> and <see cref="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.INITIALIZE"/>
            are supported.
            </param>
            <param name="initializeOnThread">
            <see langword="true"/> to initialize each service on a separate thread. In this
            case, the SM must wait for the completion of each thread by examining the
            "IsInitialized" property of each service.
            </param>
            <exceptions>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            Message: <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServicePipelineExceptionDataBase.SERVICE_DEADLOCK_IN_STAGE"/>
            if there is a circular dependency between services.
            </exception>
            Exceptions occurring from the pipeline stage methods are collected and
            rethrown from within this method.
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.CoreStandardServicePipelineDelegator`1">
            <summary>
            <para>
            Class providing a method with the same signature as <see cref="!:WaitCallback"/>
            wrapping a <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServicePipelineDelegate`1"/>.
            </para>
            </summary>
            <history>
            <contribution>
            <author> BMC </author>
            <date> 22jan2012 </date>
            <description>
            Killed all the pseudo-delegate stuff in lieu of simple wrappers like
            these. We only need two of these in core. Pseudo-delegates moved to
            extended.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Not thread-safe. The method exposed by this class is designed to be
            called by a single thread.
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.CoreStandardServicePipelineDelegator`1.PipelinedService">
            <summary>
            The service that needs to be staged.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.CoreStandardServicePipelineDelegator`1.#ctor(PlatformAgileFramework.MultiProcessing.Threading.Delegates.PAFContravariantThreadMethod{PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{`0}},PlatformAgileFramework.FrameworkServices.IPAFServiceExtended)">
            <summary>
            Builds with a service delegate.
            </summary>
            <param name="servicePipelineDelegate">
            The delegate.
            </param>
            <param name="pipelinedService">
            The service that needs to be staged.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.CoreStandardServicePipelineDelegator`1.FetchNeededServices(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject)">
            <summary>
            This method checks the services required for either load or
            initialization and verifies that they are available. This method
            uses only the service interface to check for default services.
            Since this class is used only in the service setup stages,
            default services should be the ones sought.
            </summary>
            <param name="pipelineObject">
            Standard pipeline object carrying the manager, etc.. <see langword="null"/>
            or <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.PipelineStage"/> = <see langword="null"/>
            returns <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if all is well and all services are available.
            If <see langword="false"/>, the <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ExecutionException"/>
            should be checked.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.ServiceExtensionMethods">
            <summary>
            Extension methods for the service types.
            </summary>
            <history>
            <contribution>
            <author> JAW(P) </author>
            <date> 07mar2015 </date>s
            <description>
            Added history and added GetServiceNTO.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServiceExtensionMethods.GetRootManager(PlatformAgileFramework.FrameworkServices.IPAFService)">
            <summary>
            Climbs the service hierarchy tree to find the root.
            </summary>
            <param name="service">
            The service that is POTENTIALLY in a hierarchy to find the root
            for. This method acts by calling either
            <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.ServiceManager"/>
            or
            <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.ServiceManagerInternal"/>
            to locate the managers in an upward chain.
            </param>
            <returns>
            The topmost manager that this service is allowed access to. Possibly
            <see langword="null"/>.
            </returns>
            <remarks>
            Note that if the service is not contained within a manager, this
            method will always return <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServiceExtensionMethods.GetUnstagedServices``1(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0}},PlatformAgileFramework.FrameworkServices.ServicePipelineStage)">
            <summary>
            Returns the set of uninitialized services in the incoming set.
            </summary>
            <typeparam name="T">
            Can be any Type implementing <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </typeparam>
            <param name="services">
            The services. <see langword="null"/> returns <see langword="null"/>.
            </param>
            <param name="pipelineStage">
            The stage we want to check as being completed. Supported stages
            are <see cref="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.CONSTRUCTION"/>,
            <see cref="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.LOAD"/> and
            <see cref="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.INITIALIZE"/>.
            </param>
            <returns>
            The services that are as yet unconstructed/loaded/unitialized.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServiceExtensionMethods.FilterUninitializedService``1(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0})">
            <summary>
            This method returns <see langword="null"/> if the incoming service is not
            initialized and does not implement <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFEmergencyServiceProvider`1"/>.
            Services that are not <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/> are automatically
            considered initialized.
            </summary>
            <param name="service">A service to check.</param>
            <returns><see langword="null"/> if service not initialized. </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServiceExtensionMethods.FilterUninitializedServices``1(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0}})">
            <summary>
            This method returns the subset of the incoming services that are not
            initialized and do not implement <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFEmergencyServiceProvider`1"/>.
            Services that are not <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/> are automatically
            considered initialized.
            </summary>
            <param name="services">Services to check.</param>
            <returns>
            Set of initialized services. Never <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServiceExtensionMethods.GetServiceNTO(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription)">
            <summary>
            This method creates a <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> from an
            incoming <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription"/>.
            </summary>
            <param name="serviceDescription">
            One of us. <see langword="null"/> returns <see langword="null"/>.
            </param>
            <returns> The constructed NTO. </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServiceExtensionMethods.GetServiceNTOFromServiceObject``1(``0)">
            <summary>
            This method creates a <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> from an
            incoming <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </summary>
            <param name="serviceObject">
            One of us. <see langword="null"/> returns <see langword="null"/>.
            </param>
            <returns> The constructed NTO. </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServiceExtensionMethods.ServiceIsInitialized(PlatformAgileFramework.FrameworkServices.IPAFService)">
            <summary>
            This method determines whether a service has been initialized.
            Services that are not <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/> are automatically
            considered initialized.
            </summary>
            <param name="service">
            Service to check. <see langword="null"/> returns <see langword="false"/>.
            </param>
            <returns> <see langword="true"/> if initialized. </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServiceExtensionMethods.ServiceIsLoaded(PlatformAgileFramework.FrameworkServices.IPAFService)">
            <summary>
            This method determines whether a service has been loaded.
            Services that are not <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/> are automatically
            considered loaded.
            </summary>
            <param name="service">Service to check. </param>
            <returns> <see langword="true"/> if loaded. </returns>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.ServicePipelineStage">
            <summary>
            This class describes what stage of the service pipeline we are in.
            </summary>
            <remarks>
            Gaps left in the enums for framework extenders/builders.
            </remarks>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.CONSTRUCTION">
            <summary>
            Construction of the service object.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.LOAD">
            <summary>
            Loading stage and initialization of emergency services.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.INITIALIZE">
            <summary>
            Full service initialization.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.SERVICING">
            <summary>
            Main operating mode - providing services.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.UPDATE">
            <summary>
            Update notifications for services.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.UNINITIALIZE">
            <summary>
            Full service uninitialization.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.UNLOAD">
            <summary>
            Unloading stage and uninitialization of emergency services.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.#ctor(System.String,System.Int32)">
            <remarks>
            See base.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.ServicePipelineStage.#ctor(System.String,System.Int32,System.Boolean)">
            <remarks>
            See base.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1">
            <summary>
            Generic interface adds the capability to provide a type-safe service. It also
            provides extra flexibility to pre-instantiate services before adding them to
            a manager. This allows the implementation type to be left unspecified for services
            that do not need to be constructed "on-demand". In core, only services with
            parametrless constructors for their implementations are supported as "on-demand"
            services. We also implement <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/>.
            </summary>
            <typeparam name="T">
            This is an INTERFACE type. Implementations must test to see whether the Generic
            is indeed an interface type, not a class or struct during construction.
            </typeparam>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 21feb2012 </date>
            <description>
            New - part of new service description. This generic interface was added to
            prevent (to an extent) type mismatch errors on the interface, especially when
            late binding to the implementation. The type of the interface is usually known
            at run time. It's the implementation type that my not be available even during
            the life of the program, except as a proxy.
            </description>
            </contribution>
            </history>
            <typesafety>
            Implementations do not necessarily need to be type-safe, since the implementation is
            usually constructed once and then only modified by the SM, which keeps these
            in a concurrent container.
            </typesafety>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1.Service">
            <summary>
            This is an optional instantiated service. It can be <see langword="null"/>.
            It provides the capability to pre-build the service.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1.SetService(`0)">
            <summary>
            Setter for the service - only for full-trust environments.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1">
            <summary>
            This class is an implementation of the <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/>
            interface. Implements <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/> so we can handle
            it our dictionaries.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 12apr2065 </date>
            <description>
            Added support for the (new) internal interface.
            </description>
            </contribution>
            <contribution>
            <author> KRM </author>
            <date> 20aug2015 </date>
            <description>
            Touched up the arg to the exception just a bit so it would compile. This
            should not have been necessary.
            </description>
            </contribution>
            <contribution>
            <author> JAW(P) </author>
            <date> 09mar2015 </date>
            <description>
            Put in check for type compliance with the Generic. Build a partial method
            to call into stuff in extended.
            </description>
            </contribution>
            <contribution>
            <author> DAP </author>
            <date> 21feb2012 </date>
            <description>
            New - part of new service description.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Safe. - TODO - KRM, no, not safe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.#cctor">
            <summary>
            Constructor throws an exception if <typeparamref name="T"/> is not an
            interface type.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.#ctor">
            <summary>
            For the serializer.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.#ctor(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject{`0},PlatformAgileFramework.TypeHandling.IPAFTypeHolder,System.String)">
            <summary>
            This constructor loads props and also optionally loads an instantiated
            service.
            </summary>
            <param name="serviceObjectNto">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceInterfaceType"/>,
            <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceName"/>,
            <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.IsDefault"/>,
            <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1.Service"/>
            Can not be <see langword="null"/>.
            Note that <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1.Service"/> can be
            <see langword="null"/> if service is not instantiated.
            </param>
            <param name="serviceImplementationType">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceImplementationType"/>.
            Default = <see langword="null"/>.
            </param>
            <param name="serviceName">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceName"/>.
            Default = <see langword="null"/>. If this is <see langword="null"/>,
            the name is taken from the incoming <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/>
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if
            <paramref name="serviceObjectNto"/> is <see langword="null"/>.
            "nto"
            </exception>
            No exceptions are caught. Exception service comes from 
            <see cref="M:PlatformAgileFramework.TypeHandling.PAFTypeHolder.FromNTO(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject)"/>
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.#ctor(PlatformAgileFramework.TypeHandling.IPAFTypeHolder,PlatformAgileFramework.TypeHandling.IPAFTypeHolder,System.String,System.Boolean)">
            <summary>
            This constructor loads props. but does not set service object. This is the
            legacy constructor.
            </summary>
            <param name="serviceInterfaceType">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceInterfaceType"/>.
            Can be <see langword="null"/>.
            </param>
            <param name="serviceImplementationType">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceImplementationType"/>.
            Default = <see langword="null"/>.
            </param>
            <param name="serviceName">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceName"/>.
            Default = <see langword="null"/>.
            </param>
            <param name="isDefault">
            Is the service the default for its interface type? Used mostly
            for service collections.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if
            <paramref name="serviceInterfaceType"/>
            is <see langword="null"/>.
            </exception>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="!:PAFTypeMismatchExceptionDataBase.FIRST_TYPE_NOT_CASTABLE_TO_SECOND_TYPE"/>
            is thrown if the Generic constraint is not satisfied.
            </exception>
            No exceptions are caught.
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.#ctor(`0,System.String,System.Boolean)">
            <summary>
            This constructor builds from a preconstructed servive.
            </summary>
            <param name="service">
            Generic service that defines everything.
            Can't be <see langword="null"/>.
            </param>
            <param name="serviceName">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.ServiceName"/>.
            Default = <see langword="null"/>. If you don't name it and
            there is another service of the same type/name, an exception
            is thrown.
            </param>
            <param name="isDefault">
            Is the service the default for its interface type? Used mostly
            for service collections.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if
            <paramref name="service"/>
            is <see langword="null"/>.
            </exception>
            No exceptions are caught.
            </exceptions>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.Service">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.SetService(`0)">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.PlatformAgileFramework#FrameworkServices#IPAFServiceDescriptionInternal{T}#SetServiceInternal(`0)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescriptionInternal`1"/>
            </summary>
            <param name="serviceObject"></param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.ObjectName">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.AssemblyQualifiedObjectType">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.IsDefaultObject">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.ItemValue">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.ObjectType">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServiceDescription`1.ObjectValue">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/>.
            </summary>
            <exceptions>
            Value is validated in the set. See <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceDescription.ValidateServiceObject(System.Object)"/> for
            exceptions that are thrown.
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDelegator`2">
            <summary>
            Interface for a service that can delegate its functions to another type.
            </summary>
            <typeparam name="T">
            Generic type that implements <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/> and can be
            more general than <typeparamref name="U"/>
            </typeparam>
            <typeparam name="U">
            A framework service.
            </typeparam>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDelegator`2.ServiceDelegate">
            <summary>
            A service that is attached to the implementing type to provide the actual service
            functionality that the class will forward calls to.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDelegator`2.DelegatedService">
            <summary>
            Returns a service that the external callers can request to make calls on. Should
            return <c>null</c> if <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDelegator`2.ServiceDelegate"/> is not installed.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject">
            <summary>
            <para>
            Class providing services to services during the <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>
            pipeline stages.
            </para>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject.m_ServiceManager">
            <summary>
            Backing for the prop, which has to be virtual.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject.#ctor">
            <summary>
            For inheritance support.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject.#ctor(PlatformAgileFramework.FrameworkServices.IPAFServiceManager,PlatformAgileFramework.FrameworkServices.ServicePipelineStage)">
            <summary>
            Builds with a service manager.
            </summary>
            <param name="serviceManager">
            The manager.
            </param>
            <param name="pipelineStage">
            Sets the <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject.PipelineStage"/>.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject.ExecutionException">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject.PipelineStage">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFServicePipelineObject.ServiceManager">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFEmergencyServiceProvider`1">
            <summary>
            <para>
            Interface for a service that can provide various types of "emergency" services
            before it is initialized.
            </para>
            <para>
            This interface provides access to an emergency service that can be used in situations
            where the main service is not available. This can happen during application initialization
            when needed files are missing, etc., before the service manager is set up.
            </para>
            <para>
            Applications can be designed to look for a type wearing this interface, either statically
            linked or late bound. It is typically the service manager that will do this if it has trouble
            instantiating the normal service.
            </para>
            </summary>
            <typeparam name="T">
            Any implementation of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </typeparam>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFEmergencyServiceProvider`1.EmergencyService">
            <summary>
            Returns the emergency service. This is present so clients can access the original
            emergency service, even after the main service is loaded. What is actually returned
            is completely implementation dependent. In a standard, simple delegation pattern,
            this property will always return a reference to the type instance implementing the
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFEmergencyServiceProvider`1"/> and <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFEmergencyServiceProvider`1.MainService"/> will
            return a reference to a wrapped <typeparamref name="T"/>, if one has been created.
            </summary>
            <remarks>
            This property is left here from the legacy implementation that clients still use
            in their own apps. The standard <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/> within
            PAF core will not return the emergency text logger, for example. 
            </remarks>
            <history>
            <author> BMC </author>
            <date> 26sep2013 </date>
            <contribution>
            Added DOCs.
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFEmergencyServiceProvider`1.MainServiceDescription">
            <summary>
            This is the main service that may be loaded after a setup
            stage is complete.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFEmergencyServiceProvider`1.MainService">
            <summary>
            This is the main service that may be loaded after a setup
            stage is complete. This is the actual service instance.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1">
            <summary>
            This interface handles basic services within the PAF system. It is intended
            to be used to hold framework services such as file service, resource service
            and other basic services. This is the internal version for core framework
            extenders. The implementations of the properties and methods here should not
            be marked as <see cref="T:System.Security.SecurityCriticalAttribute"/>. These are essentially a
            copy of methods in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/> with internal
            visibility. Framework extenders can use the <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/>
            to expose these members to their extensions.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05jan2012 </date>
            <contribution>
            Rebuilt/ReDOC'ed for the SL model.
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1.ServiceArrayInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1.AddServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </summary>
            <param name="iFservice">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </remarks>
            <exception>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </exception>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1.AddServicesInternal(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0}})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </summary>
            <param name="iFservices">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1.CreateServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator{`0})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="serviceDescription">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="typeFilter">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="localServiceInstantiator">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <returns>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1.GetServicesInternal``1(System.Boolean)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </summary>
            <param name="exactTypeMatch">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <returns>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1.InstantiateLocalServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="serviceDescription">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="typeFilter">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <returns>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1.MakeServiceDefaultForInterfaceInternal``1(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </summary>
            <param name="iFservice">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <exceptions>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended">
            <summary>
            <para>
            This interface must be implemented by all services wishing to provide
            a PAF Framework service. These are the secured properties and methods
            that are only exposed as security-critical.
            </para>
            <para>
            The service manager implementation follows a pipeline model with load, initialize,
            uninitialize and unload stages. Any service can be constructed at any time. The service
            is then responsible for declaring any services it needs to access during the
            load stage. After the service is loaded, it is compelled to declare any services it
            needs to access during the initialize stage.
            </para>
            <para>
            The service manager uses the service dependency information to resolve deadlocks by
            scheduling service load/initialization for the various services. Services can provide
            "emergency" versions of themselves that need few or no other services to be loaded
            and/or initialized. The service manager can then provide an early instantiation of the
            service to break deadlocks.
            </para>
            </summary>
            <remarks>
            <para>
            In PAF core, there are no out-of-the-box services provided that implement the
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/> interface in a non-trivial way.
            However, the standard base <see cref="T:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1"/> supports manipulating
            such services.
            </para>
            <para>
            <see cref="T:System.IDisposable"/> is normally implemented by all framework services. It
            is not placed on the contract inerface, since we don't want the outside world
            to necessarily have access to it through the contract interface.
            </para>
            </remarks>
            <history>
            <author> DAP </author>
            <date> 04jan2012 </date>
            <contribution>
            Changed to a public interface. 4.0 security allows us to expose it and simply
            leave the methods security critical. Documented the service dependency mechanism
            more carefully. Also changed all references to "service broker" to "service manager"
            to avoid confusion with MS stuff. We used the name long before MS did, but that's
            just tough, I guess.
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.LifetimeManagedObject">
            <summary>
            Manipulates the LMO for remote services. Implementation not provided in Core.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.ServiceManager">
            <summary>
            This property gets the manager associated with the service. It is often
            used to climb a tree of managers that are constructed hierarchically.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.ServiceIsInitialized">
            <summary>
            This property determines whether a service has already been initialized.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.ServiceIsLoaded">
            <summary>
            This property determines whether a service has already been loaded.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.ServiceIsUninitialized">
            <summary>
            This property determines whether a service has already been uninitialized.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.ServiceIsUnloaded">
            <summary>
            This property determines whether a service has already been unloaded.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.ServicesRequiredForInitialization">
            <summary>
            These are the services that must be present in order for this service to be
            initialized. These are the names of the service interfaces or classes prefixed
            with namespaces. These can also be assembly-qualified names or a mix. Can
            return <see langword="null"/> if no prerequisites for initialization.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.ServicesRequiredForLoad">
            <summary>
            These are the services that must be present in order for this service to be
            loaded. These are the names of the service interfaces or classes prefixed
            with namespaces. Can return <see langword="null"/> if no prerequisites. If these
            minimal prerequisites cannot be met, the service manager will generally
            throw an exception.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.InitializeService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            This method is called to create the "full" service, which may be different
            than the "emergency" service.
            </summary>
            <param name="pipelineObject">
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject"/> that can carry application-specific data.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.LoadService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            This method is called to load service without initializing it.
            Service manager needs to load/initialize services in certain order
            sometimes. Note that after some services are loaded, they must be able
            to be called upon to perform their advertised services. In these cases,
            an "emergency service" may be used. For example, an emergency version
            of a logging service may simply write to a local file.
            </summary>
            <param name="pipelineObject">
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject"/> that can carry application-specific data.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.UninitializeService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            This method is called before the service is unloaded. In some special cases,
            we need uninitialize and unload stages.
            </summary>
            <param name="pipelineObject">
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject"/> that can carry application-specific data.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.UnloadService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            This method is called to unload the service.
            </summary>
            <param name="pipelineObject">
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject"/> that can carry application-specific data.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.UpdateService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            This method is called whenever a service is updated, say with a culture
            change. It is also used to call services after an initial call to InitializeService
            has indicated a deadlock had to be broken by overriding a "soft" dependency
            in order to get services initialized. This gives the deadlock-breaking service
            a chance to complete its initialization.
            </summary>
            <param name="pipelineObject">
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject"/> that can carry application-specific data.
            </param>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.Initialize">
            <summary>
            Event to broadcast "Initialize". This event is fired after initialization is complete.
            </summary>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.Load">
            <summary>
            Event to broadcast "Load". This event is fired after loading is complete.
            </summary>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.Uninitialize">
            <summary>
            Event to broadcast "Uninitialize". This event is fired after uninitialization is complete.
            </summary>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.Unload">
            <summary>
            Event to broadcast "Unload". This event is fired after unloading is complete.
            </summary>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended.Update">
            <summary>
            Event to broadcast "Update". This event is fired after updating is complete.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal">
            <summary>
            Remnants of the internal interface that must be provided for the SL model.
            </summary>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 04jan2012 </date>
            <description>
            Took a lot of stuff out of here and moved it to extended.
            Added history.
            </description>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.LifetimeManagedObjectInternal">
            <summary>
            Manipulates the LMO for remote services.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.ServiceManagerInternal">
            <summary>
            This property gets the manager associated with the service. It is often
            used to climb a tree of managers that are constructed hierarchically. This
            property can return <see langword="null"/> if the service has not yet
            been added to a service manager or if the information is not revealed
            by the service designer. This latter case is rare.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.SecurityObjectInternal">
            <summary>
            Secures the service. Used in extended.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.ServicesRequiredForInitializationInternal">
            <summary>
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.ServicesRequiredForLoadInternal">
            <summary>
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.SetServiceIsInitialized(System.Boolean)">
            <summary>
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="serviceIsInitialized">
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.SetServiceIsLoaded(System.Boolean)">
            <summary>
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="serviceIsLoaded">
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.SetServiceIsUninitialized(System.Boolean)">
            <summary>
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="serviceIsUninitialized">
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.SetServiceIsUnloaded(System.Boolean)">
            <summary>
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="serviceIsUnloaded">
            See the corresponding property in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.InitializeServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="pipelineObject">
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.LoadServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="pipelineObject">
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.UninitializeServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="pipelineObject">
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.UnloadServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="pipelineObject">
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal.UpdateServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="pipelineObject">
            See the corresponding method in <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1">
            <summary>
            <para>
            This Type handles basic services within the PAF system. It is intended
            to be used to hold framework services such as file service, resource service
            and other basic services. It provides a default implementation of
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager`1"/> and <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager"/>
            so that legacy applications that use non-Generic services can be supported
            in a single manager.
            </para>
            </summary>
            <typeparam name="T">
            This type parameter allows specialization of the service manager to satisfy
            requests for service types that are more specific than <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            Normally a "core" or "root" service manager just closes this with
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </typeparam>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 21feb2012 </date>
            <description>
            Made necessary mods to use one base service manager for both remote
            and local services - code consolidation.
            </description>
            </contribution>
            <contribution>
            <author> KRM </author>
            <date> 27jan2012 </date>
            <description>
             Converted from 3.5 and cleaned up.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Safe.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.m_TypedLocalServiceInstantiator">
            <summary>
            Pluggable service instantiator. Immutable field needs no synchronization.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.#ctor(System.Guid,System.Type,System.String,System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0}},PlatformAgileFramework.FrameworkServices.PAFServiceCreator,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator{`0},PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)">
            <summary>
            Constructor that gives the service manager a name and a set of
            initial services. Noted that services are not initialized as they
            are placed into the service manager.
            </summary>
            <param name="guid">
            The key that the class instantiator supplies so that the instantiator
            is the only one that can dispose the instance. The default
            for no argument supplied is "default(Guid)" which is the very
            same as <see cref="F:System.Guid.Empty"/>.
            </param>
            <param name="serviceManagerType">
            A type for the service. Under almost all circumstances, this should be
            an interface type. This should follow the same convention as any other
            service. See base.
            </param>
            <param name="serviceManagerName">
            Name for a named service manager or blank or <see langword="null"/> for no name.
            </param>
            <param name="services">
            Set of services to install.
            </param>
            <param name="serviceCreator">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.ServiceCreator"/>. Default = <see langword="null"/>
            causes <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.DefaultServiceCreator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)"/> to be used.
            </param>
            <param name="localServiceInstantiator">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.LocalServiceInstantiator"/>. Default = <see langword="null"/>
            causes <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.DefaultLocalServiceInstantiator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})"/> to be used.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.#ctor(System.Int32,System.Guid,System.Type,System.String,System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0}},PlatformAgileFramework.FrameworkServices.PAFServiceCreator,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator{`0},PlatformAgileFramework.FrameworkServices.PAFServiceCreator{`0})">
            <summary>
            Constructor that gives the service manager a name and a set of
            initial services. Internal version of
            <see cref="T:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1"/>
            </summary>
            <param name="myFakeInternalConstructorArgument">
            Just exists so we can have another internal constructor that does
            the same thing as the public one. Doesn't do a thing.
            </param>
            <param name="guid">
            <see cref="T:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1"/>
            </param>
            <param name="serviceManagerType">
            <see cref="T:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1"/>
            </param>
            <param name="serviceManagerName">
            <see cref="T:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1"/>
            </param>
            <param name="services">
            <see cref="T:PlatformAgileFramework.FrameworkServices.PAFServiceManager"/>
            </param>
            <param name="serviceCreator">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.ServiceCreator"/>. Default = <see langword="null"/>
            causes <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.DefaultServiceCreator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator)"/> to be used.
            </param>
            <param name="localServiceInstantiator">
            Loads <see cref="F:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.m_TypedLocalServiceInstantiator"/>.
            Default = <see langword="null"/>
            causes <see cref="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.DefaultTypedLocalServiceInstantiator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})"/> to be used.
            </param>
            <param name="typedLocalServiceInstantiator">
            Loads <see cref="P:PlatformAgileFramework.FrameworkServices.PAFServiceManager.LocalServiceInstantiator"/>.
            Default = <see langword="null"/>
            causes <see cref="M:PlatformAgileFramework.FrameworkServices.PAFServiceManager.DefaultLocalServiceInstantiator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})"/> to be used.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.ServiceArrayPIV">
            <summary>
            Just an accessor for the service list.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.AddServicePIV``1(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0})">
            <remarks>
            Backing for the interfaces.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.AddServicesPIV(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0}})">
            <remarks>
            Backing for the interfaces.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.GetServicesPIV``1(System.Boolean)">
            <remarks>
            Backing for the interfaces.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.GetTypedServicePIV``1(System.String,System.Boolean,System.Object)">
            <remarks>
            Backing for the interfaces.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.MakeServiceDefaultForInterfacePIV``1(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0})">
            <remarks>
            Backing for the interfaces.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManager{T}#AddTypedService``1(``0,System.String,System.Boolean)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManager{T}#GetTypedService``1(System.String,System.Boolean,System.Object)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager`1"/>.
            The default service is identified
            by <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription.IsDefault"/> being set or a blank
            name or by being first in the set of installed services of a given type.
            The identification of the "default" service is made by applying these
            criteria in that order.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManager{T}#GetTypedService``1(System.Boolean,System.Object)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManager{T}#GetTypedService``1(System.Object)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManager{T}#GetTypedService``1">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManager`1"/>.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerExtended{T}#ServiceArray">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerExtended{T}#AddService(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0})">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            Checks to see if it is a pure interface type and ignores it if it is.
            This avoids the problem that occurs when scanning an assembly through
            refection for IPAFFrameworkServices and loading them all - some of them
            may be just interfaces and bad things happen when we try to instantiate them!!
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerExtended{T}#AddServices(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0}})">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerExtended{T}#CreateService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator{`0})">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerExtended{T}#GetServices``1(System.Boolean)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerExtended{T}#InstantiateLocalService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerExtended{T}#MakeServiceDefaultForInterface``1(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0})">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerInternal{T}#ServiceArrayInternal">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerInternal{T}#AddServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0})">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerInternal{T}#AddServicesInternal(System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0}})">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerInternal{T}#CreateServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator{`0})">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerInternal{T}#GetServicesInternal``1(System.Boolean)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerInternal{T}#InstantiateLocalServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.PlatformAgileFramework#FrameworkServices#IPAFServiceManagerInternal{T}#MakeServiceDefaultForInterfaceInternal``1(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{``0})">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerInternal`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.CreateServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.FrameworkServices.PAFLocalServiceInstantiator{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            This version in Core only builds services with default constructors.
            Common implementation for both interfaces. safe/critical so we can
            load stuff.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.GetAnyService``1(System.Boolean)">
            <summary>
            This is a helper method  It retrieves a specified service by type.
            </summary>
            <param name="exactTypeMatch">
            If set to <see langword="true"/>, derived Types will not be returned.
            </param>
            <returns>
            The found <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.GetAnyServices``1(System.Boolean)">
            <summary>
            This is a helper method. It retrieves a set of services by type, irrespective
            of name.
            </summary>
            <param name="exactTypeMatch">
            If set to <see langword="true"/>, derived Types will not be returned.
            </param>
            <returns>
            The found <typeparamref name="T"/>s, or an empty collection.
            </returns>
            <remarks>
            Services are collected first from the default collection, then from the main
            service dictionary.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.InstantiateLocalServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService},PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            This method only builds services with default constructors.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="serviceDescription">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <param name="typeFilter">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </param>
            <returns>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceManagerExtended`1"/>.
            </returns>
            <remarks>
            Common implementation for both interfaces.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.GetNamedService(System.String,System.Collections.Generic.IEnumerable{PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0}})">
            <summary>
            This method requests a specific service by its name.
            </summary>
            <param name="serviceName">
            Textual name of the service.
            </param>
            <param name="iFServiceDescriptions">
            Set of <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceDescription`1"/>s.
            </param>
            <returns>
            The found <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>.
            </returns>
            <remarks>
            This method is handy when used in conjunction with GetServices to get
            an array of services that inherit from a given Type. After gathering
            an array of services, those services can then be checked by name.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.DefaultTypedLocalServiceInstantiator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates a service from loaded assemblies. This method only builds
            services with default constructors.
            </summary>
            <param name="servicePipelineObject">
            Callees need <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ServiceManager"/>.
            </param>
            <param name="serviceDescription">
            Standard service description.
            </param>
            <param name="typeFilter">
            Optional filter on the type. Default = <see langword="null"/>.
            </param>
            <param name="assemblyList">
            Optional list of assemblies to constrain the search to. Default = <see langword="null"/>
            causes all assemblies in current "AppDomain" to be searched.
            </param>
            <returns>
            A constructed service, never <see langword="null"/>.
            </returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> for <paramref name="servicePipelineObject"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"> for <paramref name="serviceDescription"/>.
            </exception>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.MULTIPLE_IMPLEMENTATIONS_FOUND"/> if the service discovery process
            discovers multiple implementations.
            </exception>
            </exceptions>
            		// TODO - KRM - Need to make all type filters deep-copyable.
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFGeneralServiceManager`1.DefaultTypedServiceCreator(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription{`0},PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates a service from loaded assemblies. This method only builds
            services with default constructors.
            </summary>
            <param name="servicePipelineObject">
            Callees need <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ServiceManager"/>.
            </param>
            <param name="serviceDescription">
            Standard service description.
            </param>
            <param name="typeFilter">
            Optional filter on the type. Default = <see langword="null"/>.
            </param>
            <param name="assemblyList">
            Optional list of assemblies to constrain the search to. Default = <see langword="null"/>
            causes all assemblies in current "AppDomain" to be searched.
            </param>
            <returns>
            A constructed service, never <see langword="null"/>.
            </returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> for <paramref name="servicePipelineObject"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"> for <paramref name="serviceDescription"/>.
            </exception>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="F:PlatformAgileFramework.FrameworkServices.Exceptions.PAFServiceExceptionDataBase.MULTIPLE_IMPLEMENTATIONS_FOUND"/> if the service discovery process
            discovers multiple implementations.
            </exception>
            </exceptions>
            		// TODO - KRM - Need to make all type filters deep-copyable.
        </member>
        <member name="T:PlatformAgileFramework.FrameworkServices.PAFService">
            <summary>
            <para>
            This class is a base implementation of the <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>
            interface for use through inheritance. The class also contains necessary
            methods for startup and shutdown of services by implementing
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </para>
            </summary>
            <history>
            <author> DAP </author>
            <date> 07jan2012 </date>
            <contribution>
            Rewrote the class to provide a base class for supporting all scenarios
             - core/extended and local/remote.
            </contribution>
            </history>
            <threadsafety>
            Safe.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_IPAFNamedAndTypedObject">
            <summary>
            General interface exposed to inheritors. Mainly for proxy
            support.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_IsDefaultObject">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>. This is a shared variable
            and thus must be synchronized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_LifetimeManagedObjectInternal">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>. This is a shared variable
            and thus must be synchronized. It may be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_SecurityObjectInternal">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>. This is a shared variable
            and thus must be synchronized. It may be <see langword="null"/>.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_ServiceIsInitialized">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>. This is a shared variable
            and thus must be synchronized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_ServiceIsLoaded">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>. This is a shared variable
            and thus must be synchronized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_ServiceIsUnloaded">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>. This is a shared variable
            and thus must be synchronized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_ServiceIsUninitialized">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>. This is a shared variable
            and thus must be synchronized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_ServiceManager">
            <summary>
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFService"/>. This is a shared variable
            and thus must be synchronized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.FrameworkServices.PAFService.m_PAFDisposer">
            <summary>
            Holds our surrogate disposer.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.SecretKey">
            <summary>
            Need to hold our secret key because of hierarchical composition.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.#ctor(System.Guid,System.Type,System.String)">
            <summary>
            This constructor loads name and type and an optional disposal guid.
            </summary>
            <param name="guid">
            The key that the class instantiator supplies so that the instantiator
            is the only one that can dispose the instance. The default
            for no argument supplied is "default(Guid)" which is the very
            same as <see cref="F:System.Guid.Empty"/>.
            </param>
            <param name="serviceType">
            A type for the service. Under almost all circumstances, this should be
            an interface type. If the type is the same as another service installed in
            a service manager, the name must be different. If the parameter is
            <see langword="null"/> the type of "this" is used. Default is the type
            of "this". It is best to hide the type of "this" and register the service
            by its interface type.
            </param>
            <param name="serviceName">
            A name for the service that is unique within its <paramref name="serviceType"/>.
            or <see langword="null"/> or blank. <see langword="null"/> or blank indicates the default service
            for the service type. This is entirely adequate for simple scenarios where there
            is only one service of a given type. However, there must be only one default
            service or the service manager will throw an exception. Default = blank, which
            is what is installed in the dictionary. Service managers that allow multiple
            instances of the same service type often employ a factory to auto-generate
            names.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.LifetimeManagedObjectIV">
            <summary>
            Backing for the "LifetimeManagedObject" and "LifetimeManagedObjectInternal"
            property. Synchronized implementation.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.SecurityObjectPIV">
            <summary>
            Backing for the "SecurityObjectInternal"
            property. Synchronized implementation.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ServiceIsInitializedPIV">
            <summary>
            Backing for the "ServiceIsInitialized" property. Synchronized implementation.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ServiceIsLoadedPIV">
            <summary>
            Backing for the "ServiceIsLoaded" property. Synchronized implementation.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ServiceIsUninitializedPIV">
            <summary>
            Backing for the "ServiceIsUninitialized" property. Synchronized implementation.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ServiceIsUnloadedPIV">
            <summary>
            Backing for the "ServiceIsUnloaded" property. Synchronized implementation.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ServiceManagerPIV">
            <summary>
            Backing for the "ServiceManager" property. Synchronized implementation.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ServicesRequiredForInitializationPIV">
            <summary>
            Backing for the "ServicesRequiredForInitialize" property. Base class just
            returns <see langword="null"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ServicesRequiredForLoadPIV">
            <summary>
            Backing for the "ServicesRequiredForLoad" property. Base version
            returns <see langword="null"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.InitializeServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Just fires the <see cref="E:PlatformAgileFramework.FrameworkServices.PAFService.Initialize"/> event.
            </summary>
            <param name="servicePipelineObject">
            The standard pipeline object.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.LoadServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Just fires the <see cref="E:PlatformAgileFramework.FrameworkServices.PAFService.Load"/> event.
            </summary>
            <param name="servicePipelineObject">
            The standard pipeline object.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.UninitializeServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Just fires the <see cref="E:PlatformAgileFramework.FrameworkServices.PAFService.Uninitialize"/> event.
            </summary>
            <param name="servicePipelineObject">
            The standard pipeline object.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.UnloadServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Just fires the <see cref="E:PlatformAgileFramework.FrameworkServices.PAFService.Unload"/> event.
            </summary>
            <param name="servicePipelineObject">
            The standard pipeline object.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.UpdateServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Just fires the <see cref="E:PlatformAgileFramework.FrameworkServices.PAFService.Update"/> event.
            </summary>
            <param name="servicePipelineObject">
            The standard pipeline object.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.Dispose">
            <summary>
            <para>
            This method is not virtual. The developer of any subclass must not be
            allowed to change the logic. This method is marked as
            <see cref="T:System.Security.SecurityCriticalAttribute"/>, so it can only be called in
            elevated-trust environments.
            </para>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PAFFrameworkServiceDispose(System.Boolean,System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>. This is a method that is supplied as a delegate
            to the disposer to call during disposal.
            </summary>
            <param name="disposing">
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>.
            </param>
            <param name="obj">
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>.
            This is not used in this method.
            </param>
            <returns>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>.
            </returns>
            <remarks>
            <para>
            When subclassing this class (or a class like it), this is the method that should
            be overridden. Obviously the designer of the subclass should keep in mind the order
            of resource disposal that should be followed and call the base at the appropriate
            point (usually after the subclass call, but not always).
            </para>
            <para>
            Exceptions are caught and recorded in the registry.
            </para>
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#LifetimeManagedObject">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#ServiceManager">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#ServiceIsInitialized">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#ServiceIsLoaded">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#ServiceIsUninitialized">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#ServiceIsUnloaded">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#ServicesRequiredForInitialization">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#ServicesRequiredForLoad">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#InitializeService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Just fires the <see cref="E:PlatformAgileFramework.FrameworkServices.PAFService.Initialize"/> event. See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#LoadService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#UninitializeService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Just fires the <see cref="E:PlatformAgileFramework.FrameworkServices.PAFService.Uninitialize"/> event. See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#UnloadService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Just fires the <see cref="E:PlatformAgileFramework.FrameworkServices.PAFService.Unload"/> event. See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceExtended#UpdateService(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </summary>
            <param name="servicePipelineObject">
            Just fires the <see cref="E:PlatformAgileFramework.FrameworkServices.PAFService.Update"/> event. See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.OnInitialize(System.EventArgs)">
            <summary>
            Dispatches the Initialize event.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.OnLoad(System.EventArgs)">
            <summary>
            Dispatches the Load event.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.OnUninitialize(System.EventArgs)">
            <summary>
            Dispatches the Uninitialize event.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.OnUnload(System.EventArgs)">
            <summary>
            Dispatches the Unload event.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.OnUpdate(System.EventArgs)">
            <summary>
            Dispatches the Update event.
            </summary>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.PAFService.Initialize">
            <remarks/>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.PAFService.Load">
            <remarks/>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.PAFService.Uninitialize">
            <remarks/>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.PAFService.Unload">
            <remarks/>
        </member>
        <member name="E:PlatformAgileFramework.FrameworkServices.PAFService.Update">
            <remarks/>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#SecurityObjectInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#LifetimeManagedObjectInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#ServicesRequiredForInitializationInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#ServiceManagerInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#ServicesRequiredForLoadInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#SetServiceIsInitialized(System.Boolean)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
            <param name="serviceIsInitialized">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#SetServiceIsLoaded(System.Boolean)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
            <param name="serviceIsLoaded">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#SetServiceIsUninitialized(System.Boolean)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
            <param name="serviceIsUninitialized">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#SetServiceIsUnloaded(System.Boolean)">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
            <param name="serviceIsUnloaded">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#InitializeServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
            <param name="pipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#LoadServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
            <param name="pipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#UninitializeServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
            <param name="pipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#UnloadServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
            <param name="pipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.FrameworkServices.PAFService.PlatformAgileFramework#FrameworkServices#IPAFServiceInternal#UpdateServiceInternal(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </summary>
            <param name="pipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceInternal"/>.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ObjectName">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/>. Returns the name of the service.
            </summary>
            <remarks>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/>. Name can be blank, indicating a default
            service for the given service type.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.AssemblyQualifiedObjectType">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.IsDefaultObject">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ObjectType">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>. This should normally be
            an interface type.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.FrameworkServices.PAFService.ObjectValue">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>. Returns the actual
            service object.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Logging.IPAFLogfileReader">
            <summary>
            A little add-on for debugging the logger instances.
            </summary>
            <threadsafety>
            Implementation-dependent.
            </threadsafety>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 10may2016 </date>
            <description>
            Built to allow better debugging of multiple logger instances.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.Logging.IPAFLogfileReader.ReadInstanceLogFile">
            <summary>
            Our reader that reads the log file.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal">
            <summary>
            Internal Interface for our logging service. This is made internal so as
            to try to indicate that it is not to to be used capriciously and so it's
            exposure is only to trusted assemblies. Extenders can expose this as public,
            we can't.
            </summary>
            <remarks>
            Used to allow access to the set of writers.
            </remarks>
            <threadsafety>
            Implementation-dependent.
            </threadsafety>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 22jan2011 </date>
            <description>
            Added history and better documentation.
            </description>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal.LogWriters">
            <summary>
            Gets the collection of writers.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal.ReadLogFile(System.String)">
            <summary>
            Our reader that reads the log file.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal.SetHeader(System.String)">
            <summary>
            Sets the the header.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal.SetFormattingDelegatee(PlatformAgileFramework.Logging.LogFormatterDelegate)">
            <summary>
            This is the delegate we use if set.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal.SetLogFile(System.String)">
            <summary>
            This is the file to write to.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal.SetLoggingLevel(PlatformAgileFramework.Logging.PAFLoggingLevel)">
            <summary>
            This is the current logging level.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal.SetTimeStampEnabled(System.Boolean)">
            <summary>
            Enables timestamp.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Logging.PAFDebuggingLogger">
            <summary>
            This is a little helper that allows one to set up a custom logging
            operation when one is working on debugging a specific class or a
            specific area of code. It uses the the message object on the log
            call to change the logger behavior.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 16apr2016 </date>
            <description>
            Added instance props, since a non-singleton didn't make any sense
            without them.
            </description>
            </contribution>
            <contribution>
            <author> Brian T. </author>
            <date> 02jun2015 </date>
            <description>
            Copied from Golea.
            </description>
            </contribution>
            </history>
            <remarks>
            KRM 11apr2016 - this is kind of a goofy class. You can use it as a singleton or not.
            I can't figure out if this is a good thing....
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.StaticLogFile">
            <summary>
            This is a log file that will be written to INSTEAD of the default
            log file (if there is one) in the main logger.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.StaticLoggingLevel">
            <summary>
            This is the current logging level. It is static, since it is designed
            to be set only once as this class is designed to be used as a singleton
            for a developer's personal debugging assistance.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.StaticHeader">
            <summary>
            This is a header that is placed above every log output. It goes before the
            timestamp, if there is one. It is static, since it is designed
            to be set only once as this class is designed to be used as a singleton
            for a developer's personal debugging assistance.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.StaticLoggingService">
            <summary>
            Allows a logger to stapled in statically. If not here, we grab the logger
            from the service manager dynamically. It is static, since it is designed
            to be set only once as this class is designed to be used as a singleton
            for a developer's personal debugging assistance.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.StaticEnableTimeStamp">
            <summary>
            Enable date stamp under header if there is one. It is static, since it is designed
            to be set only once as this class is designed to be used as a singleton
            for a developer's personal debugging assistance. It is static, since it is designed
            to be set only once as this class is designed to be used as a singleton
            for a developer's personal debugging assistance.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFDebuggingLogger.m_LogFile">
            <summary>
            backing for the prop.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFDebuggingLogger.m_LoggingLevel">
            <summary>
            backing for the prop.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFDebuggingLogger.m_Header">
            <summary>
            backing for the prop.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFDebuggingLogger.m_EnableTimeStamp">
            <summary>
            backing for the prop.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFDebuggingLogger._logMessage">
            <summary>
            This is what we need to serialize access to.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFDebuggingLogger._messageLock">
            <summary>
            For thread safety, we need to serialize calls into this class.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFDebuggingLogger._logEntryLock">
            <summary>
            For thread safety, we need to serialize calls into this class.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFDebuggingLogger._singleton">
            <summary>
            This a thread-safe wrapper for constructing the singleton.
            </summary>
            <remarks>
            Lazy class is thread-safe by default.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFDebuggingLogger.#cctor">
            <summary>
            This constructor sets up defaults for the debug level as
            <see cref="F:PlatformAgileFramework.Logging.PAFLoggingLevel.Default"/> and enables a time stamp.
            These can be overriden by simply setting the statics on this
            class before accessing <see cref="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.MyLogger"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFDebuggingLogger.ConstructLogger">
            <summary>
            Not quite a constructor - a factory for the lazy construction.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFDebuggingLogger.#ctor">
            <summary>
            Constructor for the singleton.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFDebuggingLogger.#ctor(System.String,System.String,PlatformAgileFramework.Logging.PAFLoggingLevel,System.Nullable{System.Boolean})">
            <summary>
            Constructor with full params allows instances to be produced.
            </summary>
            <param name="header">
            Default = <see langword="null"/> fetches the static header.
            </param>
            <param name="logFile">
            Default = <see langword="null"/> fetches the static logfile.
            </param>
            <param name="loggingLevel">
            Default = <see cref="F:PlatformAgileFramework.Logging.PAFLoggingLevel.Default"/> causes logger to always log.
            </param>
            <param name="enableTimeStamp">
            Default = <see langword="true"/> puts timestamp.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.MyLogger">
            <summary>
            Get the singleton instance of the logger. 
            </summary>
            <returns>The logger.</returns>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFDebuggingLogger.MyLogEntry(System.Object,PlatformAgileFramework.Logging.PAFLoggingLevel,System.Exception)">
            <summary>
            This is our main logging method.
            </summary>
            <param name="message">
            The message, which can be <see langword="null"/>.
            </param>
            <param name="logLevel">
            default is <see	cref ="F:PlatformAgileFramework.Logging.PAFLoggingLevel.Default"/>
            </param>
            <param name="exception"></param>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.LogFile">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLoggerParameters"/>.
            Returns the static (possibly null) if instance not set.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.LoggingLevel">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLoggerParameters"/>.
            Tries for the instance if not default, then the static if not "off",
            then loads default as a last alternative.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.Header">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLoggerParameters"/>.
            Tries for the instance if not null, then the static if not null,
            then loads a blank as a last alternative.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.EnableTimeStamp">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLoggerParameters"/>.
            Tries for the instance if not null, then returns the value of the static.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.LoggerParameters">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLoggerMessage"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFDebuggingLogger.LogMessage">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLoggerMessage"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFDebuggingLogger.ToString">
            <summary>
            Have to override <see cref="M:PlatformAgileFramework.Logging.PAFDebuggingLogger.ToString"/> to produce a message in the default case.
            </summary>
            <returns>Our message or "" if null.</returns>
        </member>
        <member name="T:PlatformAgileFramework.Logging.PAFLoggingService">
            <summary>
            Default implementation of <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal"/>. This
            implementation uses <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)"/> if no writers
            are installed.
            </summary>
            <history>
            <contribution>
            <author> Brian T. </author>
            <date> 03jan2015 </date>
            <description>
            Put the writers into core and made default writer. Fixed things (I hope) so it
            won't break legacy stuff.
            </description>
            </contribution>
            <contribution>
            <author> KRM </author>
            <date> 22jan2011 </date>
            <description>
            Added history and documentation.
            </description>
            </contribution>
            </history>
            <threadsafety>
            The logging interface method is safe, the novel methods on this class are NOT.
            Adding a writer or setting a logfile should be done only before logger is
            released for general consumption. If you need thread-safety on these items,
            derive from the class and synchronize them.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFLoggingService.s_PreloadedWriters">
            <summary>
            For testability.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFLoggingService.FormatterDelegate">
            <summary>
            Allows a custum formatter to be plugged in.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFLoggingService.LoggingLevel">
            <summary>
            This is the current logging level.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFLoggingService.LogFile">
            <summary>
            Optional SINGLE logfile that will be added to the writer collection if
            this string is not vacuous.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFLoggingService.Header">
            <summary>
            This is a header that is placed above every log output. It goes before the
            timestamp, if there is one.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFLoggingService.EnableTimeStamp">
            <summary>
            Enable date stamp under header if there is one.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFLoggingService.s_FileLockObject">
            <summary>
            This needs to be static, since we are contending for one file. The lock should
            really be a system-wide mutex, but the emergency logger is normally only instantiated
            in the Main AppDomain or process, anyway, so we don't worry about it.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.PAFLoggingService.m_Writers">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.AddPreLoadWriter(System.Action{System.String})">
            <summary>
            Adds a writer.
            </summary>
            <param name="writer">Writer to add.</param>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.GetPreLoadWriters">
            <summary>
            Produces the writers for the client to fiddle with.
            </summary>
            <returns>
            Never <see langword = "null"/>.
            </returns>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.RemovePreLoadWriter(System.Action{System.String})">
            <summary>
            Deletes a writer if found.
            </summary>
            <param name="writer">Writer to remove.</param>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.#ctor">
            <summary>
            Has to be here, because activator can't figure out that there is
            a default constructor. ReSharper doesn't get it, either.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.#ctor(PlatformAgileFramework.Logging.PAFLoggingLevel,System.Boolean,System.String,System.String,PlatformAgileFramework.Logging.LogFormatterDelegate)">
            <summary>
            Constructor allows setting of time stamp and header, etc..
            </summary>
            <param name="loggingLevel">
            This is the verbosity level of this log entry. It will  
            </param>
            <param name="enableTimeStamp">
            <see langword="true"/> to enable time stamp. This is the default.
            </param>
            <param name="header">
            Stringful header to be put at top of log entry. <see langword="null"/> for
            no entry. This is the default. 
            </param>
            <param name="logFile">
            Optional argument allows a single log file to be specified and we synchronize
            access to it. Other log files can be specified by creating a set of loggers
            and calling them in turn or by supplying an external logging delegate in the
            logger property below. Please synchronize access to it or we will have no
            sympathy for you when you all in for support. See our example.
            </param>
            <param name="logFormatter">
            Optional argument allows a delegate to be plugged in to do the writing.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.AddWriter(System.Action{System.String})">
            <summary>
            Adds a writer.
            </summary>
            <param name="writer">Writer to add</param>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.GetWriters">
            <summary>
            Produces the writers for the client to fiddle with.
            </summary>
            <returns>
            Never <see langword = "null"/>.
            </returns>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.RemoveWriter(System.Action{System.String})">
            <summary>
            Deletes a writer if found.
            </summary>
            <param name="writer">Writer to remove.</param>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.ReadLogFileUtility(System.String)">
            <summary>
            Mostly for automated testing support. Reads the logfile as specified
            in the <paramref name="logFile"/>.
            </summary>
            <param name="logFile">
            Specify <see cref="F:System.String.Empty"/> to read the log file specified by the
            current <see cref="P:PlatformAgileFramework.Logging.PAFLoggingService.LogFile"/>.
            </param>
            <returns>
            <see langword="null"/> if we got nothin'.
            </returns>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.SetFormattingDelegatee(PlatformAgileFramework.Logging.LogFormatterDelegate)">
            <summary>
            Sets the delegate.
            </summary>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.SetLoggingLevel(PlatformAgileFramework.Logging.PAFLoggingLevel)">
            <summary>
            This is the current logging level for the logger instance.
            </summary>
            <param name="loggingLevel">
            Sets the current <see cref="T:PlatformAgileFramework.Logging.PAFLoggingLevel"/>. All logs
            with a value equal to this or more severe will be logged.
            </param>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.SetLogFile(System.String)">
            <summary>
            This is the file to write to.
            </summary>
            <param name="logFile">
            Sets the filename for the SINGLE base log file that we write
            to. It defaults to <see langword="null"/> so it often needs
            to be set. External writers can do their own thing if they
            are hooked.
            </param>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.SetHeader(System.String)">
            <summary>
            Sets the header.
            </summary>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.SetTimeStampEnabled(System.Boolean)">
            <summary>
            Enables timestamp.
            </summary>
            <remarks>
            For privileged callers.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.Logging.PAFLoggingService.PlatformAgileFramework#Logging#IPAFLoggingServiceInternal#LogWriters">
            <remarks>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.PlatformAgileFramework#Logging#IPAFLoggingServiceInternal#ReadLogFile(System.String)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.ReadLogFile(System.String)">
            <summary>
            Our reader that reads the log file. Mostly for automated testing support.
            </summary>
            <param name="logFile">
            Specify <see cref="F:System.String.Empty"/> to read the log file specified by the
            current <see cref="P:PlatformAgileFramework.Logging.PAFLoggingService.LogFile"/>.
            </param>
            <returns>
            <see langword="null"/> if we got nothin'.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.PlatformAgileFramework#Logging#IPAFLoggingServiceInternal#SetFormattingDelegatee(PlatformAgileFramework.Logging.LogFormatterDelegate)">
            <summary>
            <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.PlatformAgileFramework#Logging#IPAFLoggingServiceInternal#SetLoggingLevel(PlatformAgileFramework.Logging.PAFLoggingLevel)">
            <summary>
            <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.PlatformAgileFramework#Logging#IPAFLoggingServiceInternal#SetLogFile(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.PlatformAgileFramework#Logging#IPAFLoggingServiceInternal#SetHeader(System.String)">
            <summary>
            <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.PlatformAgileFramework#Logging#IPAFLoggingServiceInternal#SetTimeStampEnabled(System.Boolean)">
            <summary>
            <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingServiceInternal"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.LogEntry(System.Object,PlatformAgileFramework.Logging.PAFLoggingLevel,System.Exception)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingService"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.ReadInstanceLogFile">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLogfileReader"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.DebugWriteLine(System.String)">
            <summary>
            Tiny little helper that wraps the conditional debug write
            statememt because it's not there when not running in debug mode.
            </summary>
            <param name="stringOut"></param>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.WriteToLogFile(System.String,System.String)">
            <summary>
            Our writer that writes to a file if one is specified.
            </summary>
            <param name="logEntry">Entry to write.</param>
            <param name="logFile">file to write to.</param>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PAFLoggingService.DefaultFormatterDelegate(System.Object,PlatformAgileFramework.Logging.PAFLoggingLevel,System.Exception,System.String,System.Boolean)">
            <summary>
            Our default formatter that is used if none plugged.
            </summary>
            <param name="message"><see cref="T:PlatformAgileFramework.Logging.LogFormatterDelegate"/>.</param>
            <param name="logLevel"><see cref="T:PlatformAgileFramework.Logging.LogFormatterDelegate"/></param>
            <param name="exception"><see cref="T:PlatformAgileFramework.Logging.LogFormatterDelegate"/></param>
            <param name="header"><see cref="T:PlatformAgileFramework.Logging.LogFormatterDelegate"/></param>
            <param name="enableTimeStamp"><see cref="T:PlatformAgileFramework.Logging.LogFormatterDelegate"/></param>
            <returns></returns>
        </member>
        <member name="T:PlatformAgileFramework.Logging.PlainTextEmergencyLoggingService">
            <summary>
            Test logger version of <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/>.
            </summary>
            <history>
            <author> DAP </author>
            <date> 01jun2012 </date>
            <contribution>
            New.
            </contribution>
            </history>
            <threadsafety>
            See base class.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.Logging.PlainTextEmergencyLoggingService.#ctor(System.Boolean,System.String,System.String)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/>. This is just a
            constructor for this sealed class that sets up props on the base
            to use it as a permanent logger. This logger is normally used for testing.
            </summary>
            <param name="truncateFileOnStart">
            Sets <see cref="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.TruncateFileOnStart"/>.
            </param>
            <param name="emergencyLogFilePath">
            See <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/>.
            </param>
            <param name="headerPrefixText">
            Sets <see cref="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.HeaderPrefixText"/>.
            Default = "Log Entry".
            </param>
            <exception> <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/> is thrown if
             an instance of the emergency logger is already constructed.
             <see>
                 <cref>PAFServiceExceptionData.SERVICE_ALREADY_CREATED</cref>
             </see>
                 .
             </exception>
        </member>
        <member name="T:PlatformAgileFramework.Logging.EmergencyLoggingService">
            <summary>
            Sealed version of <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/> that also
            allows <see cref="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.CanRunWithoutMain"/> to be set.
            </summary>
            <history>
            <author> DAP </author>
            <date> 21jun2011 </date>
            <contribution>
            New.
            </contribution>
            </history>
            <threadsafety>
            See base class.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.Logging.EmergencyLoggingService.#ctor">
            <remarks>
            Parameterless constructor calls base with defaults.
            Security critical, since we don't want underpriveliged callers to construct this.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.EmergencyLoggingService.#ctor(System.Boolean,PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,System.String)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/>. This constructor allows us to use
            the emergency logger forever.
            </summary>
            <param name="canRunWithoutMain">
            Sets <see cref="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.CanRunWithoutMain"/>. Set this to
            <see langword="true"/> to not throw an exception if a "main" logger cannot
            be constructed.
            </param>
            <param name="mainServiceDescription">
            See <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/>.
            </param>
            <param name="emergencyLogFilePath">
            See <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/>.
            </param>
             <exception> <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/> is thrown if
             an instance of the emergency logger is already constructed.
             <see>
                 <cref>PAFServiceExceptionData.SERVICE_ALREADY_CREATED</cref>
             </see>
                 .
             </exception>
            <remarks>
            Security critical, since we don't want underpriveliged callers to construct this.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.EmergencyLoggingService.#ctor(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,System.String)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/>. This is just a
            constructor for the sealed class - internal version.
            </summary>
            <param name="mainServiceDescription">
            See <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/>.
            </param>
            <param name="emergencyLogFilePath">
            See <see cref="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase"/>.
            </param>
             <exception> <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/> is thrown if
             an instance of the emergency logger is already constructed.
             <see>
                 <cref>PAFServiceExceptionData.SERVICE_ALREADY_CREATED</cref>
             </see>
                 .
             </exception>
        </member>
        <member name="T:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase">
            <summary>
            <para>
            This is the emergency logger that writes to a text file.
            It is a temporary logger that can log startup failures before the normal
            logger is fully loaded and log problems after the main logger is unloaded.
            This class is designed to live in the same assembly as any "core" service
            manager or allow access to its internals so the SM or application class
            may fire up a SINGLE copy of it.
            </para>
            <para>
            Implementors can subclass this class to write to console, etc., but
            this provides a base that is synchronized to a single file.
            </para>
            <para>
            This service class also implements
            <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFEmergencyServiceProvider`1"/>,
            so it's possible to switch out the temp emergency logger without
            switching service references within the SM. Otherwise, the service
            update message must be broadcast to advise clients of the change
            and client logic must be supplied, etc..
            </para>
            </summary>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 20may2014 </date>
            <description>
            Added elimination of recursion because someone had done something strange we did
            not anticipate.
            </description>
            </contribution>
            <contribution>
            <author> KRM </author>
            <date> 21sep2013 </date>
            <description>
            Added preload capability for storage service.
            </description>
            </contribution>
            <contribution>
            <author> DAP </author>
            <date> 21jun2011 </date>
            <description>
            Converted from 3.5 and cleaned up. Converted to delayed initialization pattern.
            Moved the initialization into this class so the SM doesn't have to know about
            two loggers.
            </description>
            </contribution>
            </history>
            <remarks>
            Lots of unprotected public stuff here, since this is normally only set up
            by an application's internals.
            </remarks>
            <threadsafety>
            Safe if implementation of main logger is safe.
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.CanRunWithoutMain">
            <summary>
            Tells whether we should throw an exception if main logger cannot be built.
            When loggers are built in an "AppDomain", the creator of
            the "AppDomain" may wish to allow the failure of the main logger.
            Default = <see langword="false"/>.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.DEFAULT_EMERGENCY_FILE">
            <summary>
            Holds the default name. File will be created in the startup CWD. This will be
            the addin root for the addin framework, the isolated storage root
            for SL and the app dir for ECMA/CLR.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.DEFAULT_HEADER_TEXT">
            <summary>
            Holds the default log header text.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.LOAD_MESSAGE">
            <summary>
            This is the message that is put into the file wen the emergency logger
            laods on startup.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.m_EmergencyLogFilePath">
            <summary>
            Holds the emergency file path with terminating name. Can be loaded by the constructor.
            To ensure thread safety, load this before publishing the service.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.s_FileLockObject">
            <summary>
            This needs to be static, since we are contending for one file. The lock should
            really be a system-wide mutex, but the emergency logger is normally only instantiated
            in the Main AppDomain or process, anyway, so we don't worry about it.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.MeAsLogger">
            <summary>
            Handle on myself.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.MainService">
            <summary>
            The main logger is <see langword="null"/> until constructed.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.MainServiceDescription">
            <summary>
            This is an extension point for the logging system. A description of a main logger that
            is installed when the requisite services it needs are available.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.HeaderPrefixText">
            <summary>
            This is the text that is printed above each log message. date/time is printed at the end of this text.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.s_ServiceIsCreated">
            <summary>
            Tells whether service has been created. We are not designed with a singleton
            pattern. Thus just prevents us from being created multiple times
            by somebody on the OUTSIDE - the SM won't do it. PAF supports
            the concept of hierarchical loggers. This is the "root" logger
            and is the only one supplied in Core. There is only one of these
            allowed in any app domain. four-byte data is atomic.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.StorageService">
            <summary>
            Copy of the default storage service. This may be installed internally through
            service lookup, since it is generally assumed that the file service has no dependencies.
            It can also be installed after construction, prior to any pipeline stages.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.TruncateFileOnStart">
            <summary>
            <see langword="true"/> to truncate file when logger is constructed. Set this before
            service is loaded to maintain thread safety.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.#ctor(PlatformAgileFramework.FrameworkServices.IPAFServiceDescription,System.String)">
            <summary>
            Initializes a new instance of us.
             </summary>
            <param name="mainServiceDescription">
            This optional parameter provides a description of the "main" service to be switched to in 
            the service "initialize" stage. Default is to just look for somebody implementing
            <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingService"/> interface inside loaded assemblies, other than us.
            </param>
            <param name="emergencyLogFilePath">
            This optional parameter allows the name of an emergency plain text logging file
            to be specified. Default = <see cref="F:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.DEFAULT_EMERGENCY_FILE"/>.
            </param>
             <exception> <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/> is thrown if
             an instance of the class is already constructed.
             <see>
                 <cref>PAFServiceExceptionData.SERVICE_ALREADY_CREATED</cref>
             </see>
                 .
             </exception>
        </member>
        <member name="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.ServicesRequiredForLoadPIV">
            <summary>
            Override to tell the SM that we need ourselves before we can be loaded.
            The reason is because the manufacturing utils that we use to create loggers
            through loading and reflection need to log their progress.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.LoadServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Override to attach the file service. We attach the service here, since
            we cannot request it from the static service manager until after the
            manager has been completely initialized with BASIC services, including US.
            We fiddle with the log file here, getting it into thew right state and
            finding out if we can open it.
            </summary>
            <param name="serviceObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
            <remarks>
            If <see cref="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.StorageService"/> is already loaded, it is used.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.InitializeServicePIV(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Override to initialize ourselves with the main service.
            </summary>
            <param name="servicePipelineObject">
            See <see cref="T:PlatformAgileFramework.FrameworkServices.IPAFServiceExtended"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.LogEntry(System.Object,PlatformAgileFramework.Logging.PAFLoggingLevel,System.Exception)">
            <summary>
            <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingService"/>.
            </summary>
            <param name="message"><see cref="T:PlatformAgileFramework.Logging.IPAFLoggingService"/>.</param>
            <param name="logLevel">
            <see cref="T:PlatformAgileFramework.Logging.IPAFLoggingService"/>.
            Ignored in the "emergency" implementation - everything logged.
            </param>
            <param name="exception"><see cref="T:PlatformAgileFramework.Logging.IPAFLoggingService"/>.</param>
        </member>
        <member name="M:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.ReadInstanceLogFile">
            <summary>
            See <see cref="T:PlatformAgileFramework.Logging.IPAFLogfileReader"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.PlatformAgileFramework#FrameworkServices#IPAFEmergencyServiceProvider{PlatformAgileFramework#Logging#IPAFLoggingService}#EmergencyService">
            <summary>
            Returns me, since I am an emergency logger. Generally this is the pattern to
            be followed for a staged service, since the SM doesn't have to change interface
            references if we do it this way.
            </summary>
            <remarks>
            Note that this implementation does not allow access to the original text logger
            after the main logger has been built and while it is still in existance.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Logging.EmergencyLoggingServiceBase.CreateMainLogger(PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject{PlatformAgileFramework.FrameworkServices.IPAFService})">
            <summary>
            Initializes the main service and logs a message telling
            that we failed or not.
            </summary>
            <param name="serviceObject">
            Callees need  <see cref="P:PlatformAgileFramework.FrameworkServices.IPAFServicePipelineObject.ServiceManager"/>.
            </param>
            <returns>
            The instantiated main logger.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance">
            <summary>
            Non-static class for inheritance - avoids messy partial classes.
            This part is Silverlight compatible (single AppDomain).
            Calls into static class <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>.
            </summary>
            <history>
            <contribution>
            <author> Brian T. </author>
            <date> 22sep2015 </date>
            <desription>
            New.
            </desription>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.DefaultTypeFilter(System.Type,System.Object)">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.GetAppDomainAssemblies">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>. Base implementation usually returns
            assemblies loaded at construction time only. Inheritors are free to make
            this dynamic, as derived frameworks may include dynamic loading.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.GetTypeAndNamespace(System.String,System.String@,System.String@)">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.LocateReflectionType(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.LocateReflectionTypeInAssembly(System.Reflection.Assembly,System.String,System.String,System.String,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.LocateReflectionTypesInAssembly(System.Reflection.Assembly,System.String,System.String,System.String,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.LocateReflectionInterfacesInAssembly(System.Reflection.Assembly,System.String,System.String,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.LocateReflectionServices(System.String,System.String,System.String,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.LocateReflectionServicesInAssembly(System.Reflection.Assembly,System.String,System.String,System.String,PlatformAgileFramework.TypeHandling.TypeExtensionMethods.Helpers.IPAFTypeFilter)">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.AddAssemblyToAssembliesLoadedInternal(System.Reflection.Assembly)">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>.
            Virtual method for extenders.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.PlatformAgileFramework#Manufacturing#IManufacturingUtilsInternal#AddAssemblyToAssembliesLoadedInternal(System.Reflection.Assembly)">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.IManufacturingUtilsInternal"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.ManufacturingUtilsInstance.AddAssemblyToAssembliesLoaded(System.Reflection.Assembly)">
            <remarks>
            <see cref="T:PlatformAgileFramework.Manufacturing.ManufacturingUtils"/>
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Manufacturing.NameSpaceDefinition">
            <summary>
            <para>
            The namespace contains functionality for the creation/instantiation of objects
            locally or remotely in other "AppDomain"s.
            </para>
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Manufacturing.AssemblyLoaderParams">
            <summary>
            Parameters for <see cref="T:PlatformAgileFramework.Manufacturing.IPAFAssemblyLoader"/> implementations.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Manufacturing.AssemblyLoaderParams.OrderedDirectoryList">
            <summary>
            <see cref="T:PlatformAgileFramework.Manufacturing.IPAFAssemblyLoader"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Manufacturing.AssemblyLoaderParams.IgnoreBadFormat">
            <summary>
            <see cref="T:PlatformAgileFramework.Manufacturing.IPAFAssemblyLoader"/>.
            </summary>
            <remarks>
            Treatment of <see langword="null"/> is implemenation-dependant.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.Manufacturing.AssemblyLoaderParams.ProcessSimpleAssemblyName">
            <summary>
            <see cref="T:PlatformAgileFramework.Manufacturing.IPAFAssemblyLoader"/>.
            </summary>
            <remarks>
            Treatment of <see langword="null"/> is implemenation-dependant.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Manufacturing.AssemblyExtensionMethods">
            <summary>
            Extension methods for the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Manufacturing.AssemblyExtensionMethods.GetAssemblySimpleName(System.Reflection.Assembly)">
            <summary>
            Gets the name of the assembly without any extension, without version or public key
            information. Just the base name of the file or the name of the assembly if a
            generated assembly.
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> to gte the name for.</param>
            <returns>Simple name.</returns>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.AsyncControl.IAsyncControlObject">
            <summary>
            <para>
            This interface provides simple control functionality for multi-threaded operations.
            By implementing this interface, thread data objects are able to signal to a
            controller when they are finished and whether any exceptions have been generated.
            </para>
            <para>
            It is entirely up to the user to create a processing delegate method that periodically
            checks the <see cref="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IAsyncControlObject.ProcessShouldTerminate"/> value and stop processing when it is
            <see langword="true"/>.
            </para>
            </summary>
            <threadsafety>
            Must be thread-safe.
            </threadsafety>
            <history>
            <author> KRM </author>
            <date> 06jun2012 </date>
            <contribution>
            Redid this so all controllers will use a secured disposal procedure.
            Controllers are expected to have an <see cref="T:System.IDisposable"/> implementation
            that has a Dispose method that is <see cref="T:System.Security.SecurityCriticalAttribute"/>,
            but also have a disposal surrogate. Default implementation has been redesigned
            to support this.
            </contribution>
            <author> KRM </author>
            <date> 04apr2012 </date>
            <contribution>
            Refactored this out of "IThreadControlObject" in the monolithic program
            so Core could have a simple thread controller.
            </contribution>
            </history>
            <remarks>
            If an implementation will always have its dispose method called in an
            elevated-trust environment, <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IUnprotectedDisposableProvider"/>
            could be a vacuous implementation. If the implementations are to be used
            in possibly a low-trust environment, the implementation of
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IUnprotectedDisposableProvider"/> should be used with a
            key if we care about who can dispose the instance of an implementation.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IAsyncControlObject.IsAborting">
            <summary>
            This variable is exposed as a signal that an abort process has been started or
            requested. Some implementations can provide a "last ditch" attempt to terminate
            a task gracefully in the abort process and require this flag.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IAsyncControlObject.TaskOrThreadId">
            <summary>
            The ID assigned to agiven task or thread when it is created. In the case of a multi-thread
            process, this is the thread of the process controller.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IAsyncControlObject.ProcessException">
            <summary>
            This property is generally written
            by the spawned process and read by the spawning process. This
            property is used to return any caught exceptions that the
            process does not wish to throw. Generally speaking, methods
            running on threads should not throw exceptions, since these will
            abort the thread's process. Should be synchronized.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IAsyncControlObject.ProcessHasStarted">
            <summary>
            This property is generally written
            by the spawned thread and read by the spawning thread. This
            property is <see langword="true"/> when the process has been successfully
            started. This property should be set to <see langword="false"/> when an
            ACO is created and before it is started. Should be synchronized.
            If an ACO is created with a process already executing, this should
            be set to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IAsyncControlObject.ProcessShouldStart">
            <summary>
            Getter/setter for the field. This property is generally written
            by the spawning thread and read by the spawned process. This is
            set to <see langword="true"/> when the process should start. This property
            should be set to <see langword="false"/> when an ACO is created and before
            it is started. Should be synchronized. If an ACO is created with
            a process already executing, this should be set to <see langword="false"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IAsyncControlObject.ProcessHasTerminated">
            <summary>
            This property is generally written
            by the spawned thread and read by the spawning thread. This
            property is <see langword="true"/> when the thread has been successfully
            terminated. This property should be set to <see langword="false"/> when an
            ACO is created and before it is started. Should be synchronized.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IAsyncControlObject.ProcessShouldTerminate">
            <summary>
            Getter/setter for the field. This property is generally written
            by the spawning thread and read by the spawned thread. This is
            set to <see langword="true"/> when the thread should terminate. This property
            should be set to <see langword="false"/> when an ACO is created and before
            it is started. Should be synchronized.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.AsyncControl.IExpiringManagedThreadAbortObjectInternal">
            <summary>
            Gets the data from the PAFAbort call.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IExpiringManagedThreadAbortObjectInternal.Expiry">
            <summary>
            Contains the expiration time of the thread data.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.AsyncControl.IManagedThreadAbortObject">
            <summary>
            Gets the data from the PAFAbort call.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.IManagedThreadAbortObject.AbortObject">
            <summary>
            Contains the actual data payload.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.AsyncControl.ExpiringManagedThreadAbortObject">
            <summary>
            Holds the data from the PAFAbort call plus an expiration time.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.ExpiringManagedThreadAbortObject.AbortObject">
            <summary>
            Contains the actual data payload.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.AsyncControl.ExpiringManagedThreadAbortObject.ExpiryInternal">
            <summary>
            Expiry. The object can be removed after this time.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.AsyncControl.ExpiringManagedThreadAbortObject.#ctor(System.Object,System.DateTime)">
            <summary>
            Just builds with the props
            </summary>
            <param name="abortObject">See <see cref="P:PlatformAgileFramework.MultiProcessing.AsyncControl.ExpiringManagedThreadAbortObject.AbortObject"/>.</param>
            <param name="expiry">See <see cref="P:PlatformAgileFramework.MultiProcessing.AsyncControl.ExpiringManagedThreadAbortObject.ExpiryInternal"/>.</param>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.AtomicUtils">
            <summary>
            This class implements simple utilities that do atomic CLI operations
            that are useful for synchronized objects.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.AtomicUtils.GetNullableItem``1(``0@)">
            <summary>
            This method is used to make an instantaneous copy of an item that
            may or may not be <see langword="null"/>.
            </summary>
            <typeparam name="T">
            The type of the item, which must be a reference type.
            </typeparam>
            <param name="itemToGet">
            The object, whose reference is to be returned.
            </param>
            <returns>
            The instantaneous snapshot of the reference.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.Delegates.PAFContravariantThreadMethod`1">
            <summary>
            Provides a contravariant delegate for delegating tasks defined by
            a method with a single argument that can be converted to
            <typeparamref name="T"/>.
            </summary>
            <param name="argument">The argument to the method.</param>
            <typeparam name="T">An arbitrary type.</typeparam>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.Delegates.ParameterizedThreadStartMethodDelegator`1">
            <summary>
            <para>
            Class providing a method with the same signature as
            <see cref="!:System.Threading.WaitCallback"/> wrapping a contravariant
            delegate with a single input arg and no output args.
            </para>
            </summary>
            <history>
            <author> BMC </author>
            <date> 22jan2012 </date>
            <contribution>
            Killed all the pseudo-delegate stuff in lieu of simple wrappers like
            these. We only need two of these in core. Pseudo-delegates moved to
            extended.
            </contribution>
            </history>
            <threadsafety>
            Thread-safe only if <see cref="P:PlatformAgileFramework.MultiProcessing.Threading.Delegates.ParameterizedThreadStartMethodDelegator`1.ContravariantThreadMethod"/> is. The method
            exposed by this class is normally called by a single thread.
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.Threading.Delegates.ParameterizedThreadStartMethodDelegator`1.ContravariantThreadMethod">
            <summary>
            Holds the delegate we have been built with.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.Threading.Delegates.ParameterizedThreadStartMethodDelegator`1.ThreadMethodArgument">
            <summary>
            Holds a copy of the argument.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Delegates.ParameterizedThreadStartMethodDelegator`1.#ctor(PlatformAgileFramework.MultiProcessing.Threading.Delegates.PAFContravariantThreadMethod{`0},`0)">
            <summary>
            Builds with a delegate and argument.
            </summary>
            <param name="contravariantThreadMethod">
            The delegate.
            </param>
            <param name="threadMethodArgument">
            The argument. This argument will only be used if the
            <see cref="M:PlatformAgileFramework.MultiProcessing.Threading.Delegates.ParameterizedThreadStartMethodDelegator`1.WaitCallbackMethod(System.Object)"/> is <see langword="null"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Delegates.ParameterizedThreadStartMethodDelegator`1.WaitCallbackMethod(System.Object)">
            <summary>
            Method that is used to call the <see cref="P:PlatformAgileFramework.MultiProcessing.Threading.Delegates.ParameterizedThreadStartMethodDelegator`1.ContravariantThreadMethod"/>.
            </summary>
            <param name="obj">
            Payload which must be a <typeparamref name="T"/> or <see langword="null"/>.
            If <see langword ="null"/>, the <see cref="P:PlatformAgileFramework.MultiProcessing.Threading.Delegates.ParameterizedThreadStartMethodDelegator`1.ContravariantThreadMethod"/>
            is used as the argument.
            </param>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="F:PlatformAgileFramework.TypeHandling.Exceptions.PAFTypeMismatchExceptionMessageTags.FIRST_TYPE_NOT_CASTABLE_TO_SECOND_TYPE"/>.
            The incoming <paramref name="obj"/> must be castable to
            <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.Exceptions.PAFThreadExecutionExceptionData">
            <summary>
            Exceptions that occur during thread execution.
            Sealed version of <see cref="T:PlatformAgileFramework.MultiProcessing.Threading.Exceptions.PAFThreadExecutionExceptionDataBase"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Exceptions.PAFThreadExecutionExceptionData.#ctor(System.Int32,System.String,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Object,System.Nullable{System.Boolean})">
            <summary>
            Public constructor for
            <see cref="T:PlatformAgileFramework.MultiProcessing.Threading.Exceptions.PAFThreadExecutionExceptionDataBase"/>.
            </summary>
            <param name="executingThreadID">
            <see cref="T:PlatformAgileFramework.MultiProcessing.Threading.Exceptions.IPAFThreadExecutionExceptionData"/>.
            </param>
            <param name="executingThreadName">
            <see cref="T:PlatformAgileFramework.MultiProcessing.Threading.Exceptions.IPAFThreadExecutionExceptionData"/>.
            </param>
            <param name="extensionData">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="isFatal">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="pafLoggingLevel">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.IParameterizedThreadStartProvider">
            <summary>
            Interface that simply provides a <see cref="T:System.Action`1"/> method.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.Threading.IParameterizedThreadStartProvider.ThreadExecutionDelegate">
            <summary>
            Any method accepting <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedVisibilityType">
            <summary>
            Specifies what members are synchronized in terms of their visibility.
            </summary>
            <history>
            <author> DAP </author>
            <date> 09sep2011 </date>
            <contribution>
            <para>
            Added history.
            </para>
            <para>
            Took explicit interface visibility stuff out and put into Multiprocessing.
            Alternatively stated, refactored and split up the model with regular
            visibility stuff here. For reflection-based access, private members are
            now always expected to be unsynchronized unless attributed. The model still
            includes internal methods.
            </para>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedVisibilityType.None">
            <summary>
            Indicates that this type is not synchronized overall, but individual
            members may be. Valid when applied to class, struct or interface.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedVisibilityType.Public">
            <summary>
            Indicates that public members are synchronized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedVisibilityType.Protected">
            <summary>
            Indicates that protected members are synchronized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedVisibilityType.Internal">
            <summary>
            Indicates that internal members are synchronized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedVisibilityType.All">
            <summary>
            Indicates all members are synchronized.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.Attributes.IPAFSynchronizedAttribute">
            <summary>
            Interface for accessing PAFAttributes.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.Threading.Attributes.IPAFSynchronizedAttribute.SynchronizedVisibilityType">
            <summary>
            Specifies the members that are synchronized on the type/member.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedAttributeBase">
            <summary>
            Attribute placed on types/members to signal whether they are synchronized.
            See <see cref="T:PlatformAgileFramework.MultiProcessing.Threading.Attributes.IPAFSynchronizedAttribute"/>.
            </summary>
            <threadsafety>
            Thread-safe.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedAttributeBase.m_SynchronizedVisibilityType">
            <summary>
            Backing for prop/method.
            </summary>
            <remarks>
            Private visibility since we don't expect the use of a surrogate.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedAttributeBase.#ctor">
            <summary>
            Default constructor for interitance and framework support.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedAttributeBase.#ctor(PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedVisibilityType)">
            <summary>
            Main constructor for the attribute.
            </summary>
            <param name="synchronizedVisibilityType">
            See <see cref="T:PlatformAgileFramework.Serializing.Attributes.IPAFSerializableAttribute"/>.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedAttributeBase.SynchronizedVisibilityType">
            <summary>
            See <see cref="T:PlatformAgileFramework.MultiProcessing.Threading.Attributes.IPAFSynchronizedAttribute"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedAttribute">
            <summary>
            Attribute placed on types/members to signal the type of serialization in use.
            Note that the type of serialization in use by a class may be overridden on a
            member-by-member basis.
            </summary>
            <remarks>
            Noted that the attribute is not inherited so it must be repeated on any subclasses.
            Multiples are allowed, since partial class parts may have different synchronization.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedAttribute.#ctor(PlatformAgileFramework.MultiProcessing.Threading.Attributes.PAFSynchronizedVisibilityType)">
            <summary>
            See base class.
            </summary>
            <param name="synchronizedVisibilityType">
            See base class.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.Locks.DummyReaderWriterLock">
            <summary>
            This class is a dummy - it doesn't lock anything.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.DummyReaderWriterLock.EnterReadLock">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.DummyReaderWriterLock.ExitReadLock">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.DummyReaderWriterLock.EnterWriteLock">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.DummyReaderWriterLock.ExitWriteLock">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.DummyReaderWriterLock.TryEnterReadLock(System.TimeSpan)">
            <summary>
            Does nothing.
            </summary>
            <param name="timeSpan">Time to wait for the lock to be acquired.</param>
            <returns><see langword="true"/> always.</returns>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.DummyReaderWriterLock.TryEnterWriteLock(System.TimeSpan)">
            <summary>
            Does nothing.
            </summary>
            <param name="timeSpan">Time to wait for the lock to be acquired.</param>
            <returns><see langword="true"/> always.</returns>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.DummyReaderWriterLock.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.MultiProcessing.Threading.Locks.ReaderWriterLockWrapper">
            <summary>
            Wrapper class uses an internal <see cref="T:System.Threading.Monitor"/>.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.MultiProcessing.Threading.Locks.ReaderWriterLockWrapper.m_LockObject">
            <summary>
            The object we take the lock on.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.ReaderWriterLockWrapper.EnterReadLock">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.ReaderWriterLockWrapper.ExitReadLock">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.ReaderWriterLockWrapper.EnterWriteLock">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.ReaderWriterLockWrapper.ExitWriteLock">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.ReaderWriterLockWrapper.TryEnterReadLock(System.TimeSpan)">
            <summary>
            Does nothing.
            </summary>
            <param name="timeSpan">Time to wait for the lock to be acquired.</param>
            <returns><see langword="true"/> always.</returns>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.ReaderWriterLockWrapper.TryEnterWriteLock(System.TimeSpan)">
            <summary>
            Does nothing.
            </summary>
            <param name="timeSpan">Time to wait for the lock to be acquired.</param>
            <returns><see langword="true"/> always.</returns>
        </member>
        <member name="M:PlatformAgileFramework.MultiProcessing.Threading.Locks.ReaderWriterLockWrapper.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Notification.ISubscriptionManager`2">
            <summary>
            An interface representing an intermediary that manages subscriptions.
            </summary>
            <typeparam name="TPublisher">Publisher of notifications.</typeparam>
            <typeparam name="TDelegate">Delegate from subscriber to notifications.</typeparam>
            <contribution>
            <author> BMC </author>
            <date> 20aug2011 </date>
            <description>
            New - Used subscription stuff from Ed Ball.
            </description>
            </contribution>
        </member>
        <member name="M:PlatformAgileFramework.Notification.ISubscriptionManager`2.AddNotificationHandler(`0,`1)">
            <summary>
            Subscribe to the notification.
            </summary>
            <param name="publisher">Publisher of the notification.</param>
            <param name="subscriberDelegate">Delegate on the subscriber to the notification.</param>
        </member>
        <member name="M:PlatformAgileFramework.Notification.ISubscriptionManager`2.RemoveNotificationHandler(`0,`1)">
            <summary>
            Unsubscribe from the notification.
            </summary>
            <param name="publisher">Publisher of the notification.</param>
            <param name="subscriberDelegate">Delegate on the subscriber to the notification.</param>
        </member>
        <member name="M:PlatformAgileFramework.Notification.ISubscriptionManager`2.Subscribe(`0,`1)">
            <summary>
            Establish a disposable subscription to the notification. Useful in using blocks.
            </summary>
            <param name="publisher">Publisher of the notification.</param>
            <param name="subscriberDelegate">Delegate on the subscriber to the notification.</param>
        </member>
        <member name="T:PlatformAgileFramework.Notification.ISubscriptionManager`3">
            <summary>
            An interface representing an intermediary that manages subscriptions.
            </summary>
            <typeparam name="TPublisher">Publisher of notifications.</typeparam>
            <typeparam name="TNotificationSubscriber">Subscriber to notifications.</typeparam>
            <typeparam name="TDelegate">The delegate on the subscriber that is to be called.</typeparam>
            <contribution>
            <author> BMC </author>
            <date> 20aug2011 </date>
            <description>
            New - Used subscription stuff from Ed Ball.
            </description>
            </contribution>
        </member>
        <member name="P:PlatformAgileFramework.Notification.ISubscriptionManager`3.Subscriber">
            <summary>
            Gets/sets the target object for the delegate method. This
            is <see langword="null"/> for static delegates. It is usually held as
            weak reference, depending on the implementation.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Notification.SubscriptionExtensions">
            <summary>
            This class implements some extensions for subscribing to notifications.
            </summary>
            <contribution>
            <author> BMC </author>
            <date> 20aug2011 </date>
            <description>
            Used subscription stuff from Ed Ball to work more easily with lambda's.
            </description>
            </contribution>
        </member>
        <member name="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})">
            <summary>
            Method that allows a subscription to die when the subscriber SHOULD be garbage-collected
            because there are no longer strong references to it.
            </summary>
            <param name="actions">
            A container for the subscribe and unsubscribe delegates that are provided by the subscriber.
            </param>
            <param name="publisher">The publisher.</param>
            <param name="subscriber">
            A reference to the subscriber, which is constrained to be a class, so we
            can establish a weak reference to it.
            </param>
            <param name="notifier">
            This is an action which contains a reference to the subscriber and
            the arguments to the notification handling method. It is NOT called if
            the subscriber has been garbage-collected.
            </param>
            <typeparam name="TPublisher">
            The publisher of the notifications, normally a class.
            </typeparam>
            <typeparam name="TNotificationSubscriber">
            The receiver of notifications, constrained to be a reference type.
            </typeparam>
            <typeparam name="TTransmitArgs">
            Arguments to the handler.
            </typeparam>
            <typeparam name="TReceiveArgs">
            Arguments to the handler.
            </typeparam>
            <returns>
            Disposable subscription (binding) between publisher and receiver.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``3(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.EventHandler{``2}},``0,``1,System.Action{``1,System.Object,``2})">
            <summary>
            Specialized version of the Generic method at top. This method is used with standard
            .Net events.
            </summary>
            <param name="actions">
            A container for the subscribe and unsubscribe delegates that are created by the subscriber
            to subscribe/unsubscribe to/from a .Net Generic event.
            </param>
            <param name="publisher">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </param>
            <param name="subscriber">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </param>
            <param name="notifier">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </param>
            <typeparam name="TPublisher">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </typeparam>
            <typeparam name="TNotificationSubscriber">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </typeparam>
            <typeparam name="TArgs">
            Arguments to the handler, constrained to be <see cref="T:System.EventArgs"/>.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``2(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.EventHandler},``0,``1,System.Action{``1,System.Object,System.EventArgs})">
            <summary>
            Specialized version of the Generic method at top. This method is used with standard
            .Net events.
            </summary>
            <param name="actions">
            A container for the subscribe and unsubscribe delegates that are created by the subscriber
            to subscribe/unsubscribe to/from a .Net Generic event.
            </param>
            <param name="publisher">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </param>
            <param name="subscriber">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </param>
            <param name="notifier">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </param>
            <typeparam name="TPublisher">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </typeparam>
            <typeparam name="TNotificationSubscriber">
            <see cref="M:PlatformAgileFramework.Notification.SubscriptionExtensions.WeakSubscribe``4(PlatformAgileFramework.Notification.ISubscriptionManager{``0,System.Func{``2,``3}},``0,``1,System.Func{``1,``2,``3})"/>
            </typeparam>
            <returns></returns>
        </member>
        <member name="T:PlatformAgileFramework.Notification.WeakSubscriptionManager`3">
            <summary>
            See <see cref="T:PlatformAgileFramework.Notification.ISubscriptionManager`2"/>.
            This class implements the base container for subscribe/unsubscribe methods for both
            .Net-style events and distributed notifications.
            </summary>
            <remarks>
            Thanks to Ed Ball for big pieces of this. Our notification system was always
            in the Cocoa style, so the nomenclature is a bit different than his, however.
            </remarks>
        </member>
        <member name="F:PlatformAgileFramework.Notification.WeakSubscriptionManager`3.m_Subscriber">
            <summary>
            Holds the subscriber, which may be <see langword = "null"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Notification.WeakSubscriptionManager`3.#ctor">
            <summary>
            Default for interitance support.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Notification.WeakSubscriptionManager`3.#ctor(`2,System.Action{`0,`1},System.Action{`0,`1})">
            <summary>
            Installs the subscription and unsubscription delegates and the target.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Notification.WeakSubscriptionManager`3.Subscriber">
            <summary>
            <see cref="T:PlatformAgileFramework.Notification.ISubscriptionManager`3"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Notification.SubscriptionManager`2">
            <summary>
            See <see cref="T:PlatformAgileFramework.Notification.ISubscriptionManager`2"/>.
            This class implements the base container for subscribe/unsubscribe methods for both
            .Net-style events and distributed notifications.
            </summary>
            <remarks>
            Thanks to Ed Ball for big pieces of this. Our notification system was always
            in the Cocoa style, so the nomenclature is a bit different than his, however.
            </remarks>
        </member>
        <member name="F:PlatformAgileFramework.Notification.SubscriptionManager`2.m_Subscribe">
            <summary>
            Holds the subscription delegate, which may be <see langword = "null"/>
            in derived classes.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Notification.SubscriptionManager`2.m_Unsubscribe">
            <summary>
            Holds the unsubscription delegate, which may be <see langword = "null"/>
            in derived classes.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Notification.SubscriptionManager`2.#ctor">
            <summary>
            Default for interitance support.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Notification.SubscriptionManager`2.#ctor(System.Action{`0,`1},System.Action{`0,`1})">
            <summary>
            Installs the subscription and unsubscription delegates.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Notification.SubscriptionManager`2.AddNotificationHandler(`0,`1)">
            <summary>
            Adds a notification handler.
            </summary>
            <param name="publisher">Source of the notification.</param>
            <param name="subscriberDelegate">Subscriber who wants to listen.</param>
        </member>
        <member name="M:PlatformAgileFramework.Notification.SubscriptionManager`2.RemoveNotificationHandler(`0,`1)">
            <summary>
            Removes a notification handler.
            </summary>
            <param name="publisher">Source of the notification.</param>
            <param name="subscriberDelegate">Subscriber who wants to stop listening.</param>
        </member>
        <member name="M:PlatformAgileFramework.Notification.SubscriptionManager`2.Subscribe(`0,`1)">
            <summary>
            Provides the disposable subscription, mostly so we can have a using block.
            </summary>
            <param name="publisher">The source of the notifications.</param>
            <param name="subscriberDelegate">
            The subscriberDelegate, which is disconnected during the <see cref="M:System.IDisposable.Dispose"/>
            </param>
            <returns>disposable subscription.</returns>
            <remarks>
            Thanks to Ed Ball for the pattern.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Notification.DisposableSubscription">
            <summary>
            This class provides a little package to contain the unsubscribe method that is
            useful when tools like Resharper or Gendarme are in use that will flag disposables
            that are NOT disposed. Also to allow subscribers to obtain UPDATES in a
            "using" block.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Notification.DisposableSubscription.m_Unsubscribe">
            <summary>
            Holds a reference to the unsubscribe method.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Notification.DisposableSubscription.#ctor(System.Action)">
            <summary>
            Constructor wraps a method.
            </summary>
            <param name="unsubscribe">
            Any method to be called by <see cref="M:PlatformAgileFramework.Notification.DisposableSubscription.Dispose"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Notification.DisposableSubscription.CancelDispose">
            <summary>
            Cancels the disposal by nulling the internal delegate
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Notification.DisposableSubscription.Dispose">
            <summary>
            This calls the wrapped delegate if it is not <see langword="null"/>
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.DeepCloneEnumerable`1">
            <summary>
            This is an enumerator that makes a copy of an enumerable before enumerating
            over it. It is designed to provide a thread-safe way to enumerate over a
            collection. Noted that the enumerator itself is never thread-safe. Different
            threads must not call the enumerator methods on any instance of this enumerator.
            </summary>
            <typeparam name="T">
            This is the generic type of items on the enumerable. The type is required
            to implement <see cref="T:PlatformAgileFramework.Collections.IPAFGenericDeepCloneable`1"/> in order to make deep copies
            of the types before creating the output enumerable. This insures that indiviaual
            items are thread-safe, in addition to whatever structure the enumerable is
            pulling the data from being thread-safe. Noted that the cloning implementation
            on the items must make a deep copy for this enumerator to accomplish this
            goal. In order to use this enumerator correctly, lock the underlying collection
            before creating and returning this class and unlock it after.
            </typeparam>
            <threadsafety>
            This class is NOT thread-safe - only one thread should be accessing it.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.DeepCloneEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Builds a copy of the incoming enumeration by casting elements to
            <see cref="T:PlatformAgileFramework.Collections.IPAFGenericDeepCloneable`1"/>.
            </summary>
            <param name="enumerable">
            The incoming enumeration. <see langword="null"/> yields an empty enumerator.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.LockedDictionaryExtensions">
            <summary>
            This class contains extension methods for
            <see cref="!:IPAFNullableSynchronizedWrapper&lt;IEnumerable&lt;KeyValuePair&lt;Tkey, TValue&gt;&gt;&gt;"/>.
            </summary>
            <threadsafety>
            Implementations must be thread-safe. Methods contain provisons for safe
            enumerators to be included. Developers must determine the nature of
            these enumerators, if needed. Generally the service manager is the only
            entity that should be making changes to dictionary items and the
            dictionary should never have external access.
            </threadsafety>
            <history>
            <contribution>
            <author> BMC </author>
            <date> 06sep2011 </date>
            <description>
            <para>
            New.
            </para>
            <para>
            Needed a couple of extra methods, mostly for unsynchronized dictionaries,
            since synchronized stuff is mostly in Extended now.
            </para>
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.LockedDictionaryExtensions.GetEnumeratedPairs``2(PlatformAgileFramework.MultiProcessing.Threading.NullableObjects.IPAFNullableSynchronizedWrapper{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}}},PlatformAgileFramework.Collections.Enumerators.IEnumerableFactory{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            This method applies a read lock to a
            <see cref="!:IPAFNullableSynchronizedWrapper&lt;IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;&gt;"/>,
            then takes a snapshot of its contents with a copy operation. If
            <paramref name="enumerableFactory"/> is not <see langword="null"/>, an arbitrary
            copy operation is made. Otherwise an ordinary assignment is made.
            </summary>
            <param name="wrappedPairs">The wrapped, synchronized collection of pairs.</param>
            <param name="enumerableFactory">
            Pluggable thread-safe enumerator factory. <see langword="null"/> results
            in a reference or value copy.
            </param>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <returns>
            Never <see langword="null"/> - sometimes an empty list.
            </returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">"wrappedPairs"</exception>
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.LockedDictionaryExtensions.GetEnumeratedKeys``2(PlatformAgileFramework.MultiProcessing.Threading.NullableObjects.IPAFNullableSynchronizedWrapper{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}}},PlatformAgileFramework.Collections.Enumerators.IEnumerableFactory{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            This method applies a read lock to a
            <see cref="!:IPAFNullableSynchronizedWrapper&lt;IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;&gt;"/>,
            then takes a snapshot of its contents with a copy operation. If
            <paramref name="enumerableFactory"/> is not <see langword="null"/>, an arbitrary
            copy operation is made. Otherwise an ordinary assignment is made.
            </summary>
            <param name="wrappedPairs">The wrapped, synchronized collection of pairs.</param>
            <param name="enumerableFactory">
            Pluggable thread-safe enumerator factory.
            </param>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <returns>
            List of <typeparamref name="TValue"/>s.
            Never <see langword="null"/> - sometimes an empty list.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.LockedDictionaryExtensions.GetEnumeratedValues``2(PlatformAgileFramework.MultiProcessing.Threading.NullableObjects.IPAFNullableSynchronizedWrapper{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}}},PlatformAgileFramework.Collections.Enumerators.IEnumerableFactory{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            This method applies a read lock to a
            <see cref="!:IPAFNullableSynchronizedWrapper&lt;IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;&gt;"/>,
            then takes a snapshot of its contents with a copy operation. If
            <paramref name="enumerableFactory"/> is not <see langword="null"/>, an arbitrary
            copy operation is made. Otherwise an ordinary assignment is made.
            </summary>
            <param name="wrappedPairs">The wrapped, synchronized collection of pairs.</param>
            <param name="enumerableFactory">
            Pluggable thread-safe enumerator factory.
            </param>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <returns>
            List of <typeparamref name="TValue"/>s.
            Never <see langword="null"/> - sometimes an empty list.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.LockedDictionaryExtensions.Pairs``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Just pulls pairs from dictionary, since the enumerable is implemented
            explicitly on the dictionary. Saves just a little typing.
            </summary>
            <typeparam name="TKey">See <see cref="T:System.Collections.Generic.IDictionary`2"/></typeparam>
            <typeparam name="TValue">See <see cref="T:System.Collections.Generic.IDictionary`2"/></typeparam>
            <param name="dictionary">Incoming dictionary.</param>
            <returns>Pairs in the dictionary.</returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1">
            <summary>
            Please see <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/> for the rationale
            of the resettable enumeration interfaces. This interface places the reset
            functionality directly on the <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is convenient
            for new special-purpose enumerators, but <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/>
            allows plain old <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s to be wrapped if existing
            enumerables (like on standard containers) are to be employed.
            </summary>
            <typeparam name="T">Type that is to be enumerated.</typeparam>
            <threadsafety>
            Implementations need not necessarily be thread-safe. The enumerators handed
            out by providers like <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/> are
            normally NOT expected to be thread-safe.
            </threadsafety>
            <history>
            <author> KRM </author>
            <date> 14oct2012 </date>
            <contribution>
            <para>
            Added history and DOCs - people did not understand this interface.
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1.IsEnumerationFinite">
            <summary>
            Tells whether the contained enumerator is finite. Note that even if the
            input enumerable in the <see cref="M:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1.SetData(System.Collections.Generic.IEnumerable{`0})"/> method is finite, the output
            enumeration may be infinite. This would be the case if the returned
            enumerable picked elements out of a finite list at random, forever,
            until the foreach loop exited (and dispose was called). On the
            other hand, if the input enumerator was infinite, the output
            enumerator would not have to be, if only a finite number of values
            were used.
            </summary>
            <remarks>
            The nullable object is needed, since implementations may be loaded
            from unknown sources, which may be indeterminate as to finite-ness.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1.SetData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the data. Provides the capability to reset and refresh the internal data.
            Implementations can use the incoming data or not. It's provided in case the
            implementor wishes to reset the state of the enumerable with external data.
            </summary>
            <param name="dataEnumerable">
            <para>
            The incoming data. Can be <see langword="null"/>. Depending on the implementation, the
            incoming enumerable may not be finite, so it should never be loaded into
            a container of any kind, unless only a finite number of elements are selected.
            Neither should extension methods assuming a finite enumeration be employed.
            </para>
            <para>
            Note this very same parameter is utilized on <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/>.
            An implementation of <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/> can inspect
            its inner enumerable to determine if it is an <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1"/>
            and call our reset method directly.
            </para>
            </param>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumeration`1">
            <summary>
            <para>
            Please see <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/> for the rationale
            of the resettable enumeration interfaces. This interface describes reset
            functionality that is common to both resettanle enumerators and resettable
            enumerables.
            </para>
            <para>
            This interface allows an enumeration to be reset, so it can be handed
            out over and over again after reset, possibly with different data. It is useful
            in cases where enumerations are costly to initially produce. It can be used to
            extend either an <see cref="T:System.Collections.Generic.IEnumerable`1"/> or a <see cref="T:System.Collections.Generic.IEnumerator`1"/>,
            among other things.
            </para>
            </summary>
            <typeparam name="T">Type that is to be enumerated.</typeparam>
            <threadsafety>
            Implementations need not necessarily be thread-safe.
            </threadsafety>
            <history>
            <author> KRM </author>
            <date> 15oct2012 </date>
            <contribution>
            <para>
            Build this so I could refactor "PAFResettableEnumerableBase{T}".
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumeration`1.IsEnumerationFinite">
            <summary>
            Tells whether this enumeration is finite. Note that even if the
            input enumerable in the <see cref="M:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumeration`1.SetData(System.Collections.Generic.IEnumerable{`0})"/> method, the output
            enumeration may be infinite. This would be the case if the enumerator
            picked elements out of a finite list at random, forever,
            until the foreach loop exited (and dispose was called). On the
            other hand, if the input enumerator was infinite, the
            enumerator would not have to be, if only a finite number of values
            were used.
            </summary>
            <remarks>
            The nullable object is needed, since implementations may be loaded
            from unknown sources, which may be indeterminate as to finite-ness.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumeration`1.DisposeEnumeration">
            <summary>
            Resettable enumerator/enumerable's <see cref="M:System.IDisposable.Dispose"/> method
            should not NECESSARILY dispose the resources of the type, since it may simply be reset
            and used again. It's up to the implementation to determine when the type is
            actually destroyed. When it is time, this method should be called.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumeration`1.SetData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the data. Provides the capability to reset and refresh the internal data.
            Implementations can use the incoming data or not. It's provided in case the
            implementor wishes to reset the state of the enumerable with external data.
            </summary>
            <param name="dataEnumerable">
            <para>
            The incoming data. Can be <see langword="null"/>. Depending on the implementation, the
            incoming enumerable may not be finite, so it should never be loaded into
            a container of any kind, unless only a finite number of elements are selected.
            Neither should extension methods assuming a finite enumeration be employed.
            </para>
            <para>
            Note this very same parameter is utilized on <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/>
            and <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1"/>.
            An implementation of <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/> can inspect
            its inner enumerable to determine if it is an <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerator`1"/>
            and call our reset method directly.
            </para>
            </param>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerator`1">
            <summary>
            <para>
            Please see <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/> for the rationale
            of the resettable enumeration interfaces. This interface places the reset
            functionality directly on the <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </para>
            <para>
            This interface allows an enumerator to be directly reset, so it can be handed
            out over and over again after reset, possibly with different data. It is useful
            in cases where enumerators are costly to produce. This is different than the
            <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1"/>, which essentially resets an
            enumerator factory to produce enumerators which hand out different values,
            perhaps only from time-to-time.
            </para>
            </summary>
            <typeparam name="T">Type that is to be enumerated.</typeparam>
            <threadsafety>
            Implementations need not necessarily be thread-safe.
            </threadsafety>
            <history>
            <author> KRM </author>
            <date> 14oct2012 </date>
            <contribution>
            <para>
            Added history and DOCs - people did not understand this interface.
            </para>
            </contribution>
            </history>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.EnumerableUtils">
            <summary>
            Utils for helping with enumerables.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.EnumerableUtils.CheckEnumerationIsFinite``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Little helper that checks whether an incoming enumeration is
            definately finite. Checks to see if <see cref="T:System.Collections.Generic.ICollection`1"/>,
            or if a <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1"/> with finite length.
            </summary>
            <param name="enumerable">
            Incoming enumerable to check.
            </param>
            <returns>
            Results of the analysis. Returns <see langword="true"/> if argument is
            <see langword="null"/>.
            </returns>
            <remarks>
            This method is important when we want to copy an enumeration
            into an array.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.EnumerableUtils.FilterEnumerable``1(System.Collections.IEnumerable)">
            <summary>
            Method picks out <typeparamref name="U"/>'s from the incoming
            set.
            </summary>
            <typeparam name="U">
            Type we are looking for.
            </typeparam>
            <param name="enumerable">
            Incoming set. <see langword="null"/> returns an empty set.
            </param>
            <returns>
            Never <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.EnumerableUtils.ReloadFiniteEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            <para>
            Reloads or creates a collection in a FINITE enumerable container. This
            method is needed to ensure that an enumerable is loaded with a finite
            collection of items. Some resettable enumerators are finite by nature
            (if they must be sorted, for example) and they must be reloaded with
            a finite set of elements. The purpose of this method is to ensure
            that finite resettable enumerators are reset with finite data.
            It does this by examining the incoming enumeration and determining
            if it is either an <see cref="T:System.Collections.Generic.ICollection`1"/> or an
            <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1"/> with finite content.
            If the input is not finite, an exception is thrown.
            </para>
            </summary>
            <typeparam name="T">
            Type we are dealing with.
            </typeparam>
            <param name="incomingEnumerable">
            Incoming enumerable. <see langword="null"/> returns <see langword="null"/> with no action. if this is
            not either collection or a finite resettable an exception is thrown.
            </param>
            <param name="targetEnumerable">
            Enumerable to be reset. If it is a <see cref="T:System.Collections.Generic.ICollection`1"/> it is
            emptied and reloaded. If it is a <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1"/>
            the <paramref name="incomingEnumerable"/> is simply passed to it. If this
            parameter is <see langword="null"/>, a new collection is instantiated and filled
            with the incoming <paramref name="incomingEnumerable"/>.
            </param>
            <returns>
            Never <see langword="null"/>.
            </returns>
            <threadsafety>
            This method is not synchronized. It assumes that neither
            <paramref name="incomingEnumerable"/> and <paramref name="targetEnumerable"/>
            are not accessed during the operation of this helper method. This
            method is often used for locked update of a Type's internal
            data during a reset operation, in which circumstance, the class
            internals are locked.
            </threadsafety>
            <exceptions>
            <exception>
            <see cref="T:System.ArgumentException"/> is thrown if the incoming
            <paramref name="incomingEnumerable"/> is not finite.
            "incomingEnumerable must be finite".
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerableProvider`1">
            <summary>
            <para>
            This interface and its implementations are designed to solve
            problems with Microsoft's design of Iterators and the ambiguity of
            useage of enumerators. In our world, the enumerator cannot hold on
            to the last item in the iteration after the foreach loop has exited
            as do enumerators generated with the yield statement. Attempt to
            access the "Current" value after the enumerator has been disposed
            cannot be allowed, since we can't hold on to those items in our
            world. In the language specification, the behavior of "Current"
            after the enumerator has been disposed is undefined. Microsoft
            yield constructs will return the last value in the iteration. Our
            implementation throws an exception.
            </para>
            <para>
            Microsoft's implementation of the yield construct also causes the
            "Reset" method to throw an exception. Resetting an enumerable is
            important in our concurrency work. So, in order to resolve the
            ambiguity in the way hand-written versus yield-implemented enumerables
            work, we've defined this interface to provide a clear definition of
            what the concept of resetting means and to disallow the holding of
            the final value.
            </para>
            <para>
            The design puts the reset capability on this interface rather than
            the <see cref="T:PlatformAgileFramework.Collections.Enumerators.IPAFResettableEnumerable`1"/> interface. This allows for various
            strategies for factory-style patterns to regenerate fresh provided
            enumerables.
            </para>
            </summary>
            <typeparam name="T">Type that is to be enumerated.</typeparam>
            <threadsafety>
            Implementations should be thread-safe. The enumerators that is handed out
            by implementations are normally NOT expected to be thread-safe.
            </threadsafety>
            <history>
            <author> KRM </author>
            <date> 14oct2012 </date>
            <contribution>
            <para>
            Added history and DOCs - people did not understand this interface.
            </para>
            </contribution>
            </history>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.IPAFEnumerableProvider`1">
            <summary>
            Interface for a type to act as a provider of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            for a collection of items. The enumeration is arbitrary and can be infinite.
            </summary>
            <typeparam name="T">Type that is to be enumerated.</typeparam>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.IPAFEnumerableProvider`1.GetEnumerable">
            <summary>
            This method outputs the enumerable. This enumerable may
            produce an enumerator that runs forever. This is entirely
            implementation-dependant.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that will perform the enumeration.
            Noted that this method returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and not an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.SafeEnumerableFactory`1">
            <summary>
            Implementation of <see cref="T:PlatformAgileFramework.Collections.Enumerators.IEnumerableFactory`1"/> that generates deep copy
            enumerators. Standard problem in developing thread-safe collections is that the
            enumerator is still exposed. This enumerator factory is designed to give access
            to three different copy enumerators so collections can be iterated over with a
            foreach statement while the collection is being modified by other threads. The
            enumerators called internally may be employed in a collection if the client
            wishes a specific scheme to be forced, instead of selected automatically.
            </summary>
            <typeparam name="T">Generic type in the collection.</typeparam>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.SafeEnumerableFactory`1.BuildEnumerable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This constructor builds a thread-safe enumerator based on the characteristics
            of <typeparamref name="T"/>. These characteristics are checked in the order
            listed here.
            <list type="number">
            <item>
            <term><see cref="T:PlatformAgileFramework.Collections.IPAFGenericDeepCloneable`1"/></term>
            <description>
            Builds a cloning enumerator based on "deep" cloning.
            </description>
            </item>
            <item>
            <term>Has a copy constructor</term>
            <description>
            Builds a copy enumerator that copies elements into a separate array.
            This enumerator does not give access to the original copies, so it
            is useful only for readonly access to a snapshot of the collection.
            </description>
            </item>
            <item>
            <term> Is "ICloneable"</term>
            <description>
            Builds a cloning enumerator based on "ICloneable".
            Not available in the Silverlight model.
            </description>
            </item>
            <item>
            <term>Neither</term>
            <description>
            Builds a copy enumerator that copies element references into a separate
            array. This does not make elements themselves safe, but ensures that
            the collection structure is safe.
            </description>
            </item>
            </list>
            </summary>
            <param name="enumerable">
            Incoming enumeration to build from. <see langword="null"/> gets <see langword="null"/>.
            </param>
            <returns>
            A thread-safe enumerator. The enumerator will be thread-safe in accordance with
            the type of clone the enumerator makes. If it is a truly deep clone, the type
            hierarchy will be completely replicated, with a completely new hierachy
            of references. Other clone methodologies may just make a reference copy,
            etc.. The client must understand the type of copying that will be done,
            based on the characteristics of the type, <typeparamref name="T"/>.
            </returns>
            <remarks>
            In a Silverlight environment, the interface "ICloneable" is not defined
            publicly and thus objects may not be cloned by this interface. The ECMA/CLR
            augmentation of this class does provide the ability to produce
            enumerable factories that will utilize "ICloneable".
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.SafeEnumerableFactory`1.BuildEnumerable(System.Collections.IEnumerable)">
            <summary>
            This method just culls all the non - <typeparamref name="T"/>
            items from the input and builds with the other method.
            </summary>
            <param name="enumerable">
            Non - Generic enumerable.
            </param>
            <returns>
            Generic enumerator.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Enumerators.IEnumerableFactory`1">
            <summary>
            Interface allows collections to have access to "plugable" enumerator
            generators that they can load. Implementing classes typically have
            two constructors accepting appropriate arguments.
            </summary>
            <typeparam name="T">Generic type in the collection.</typeparam>
            <remarks>
            One reason for this factory is that we don't trust anybody's
            yield implementation for thread-safety, let alone the consistency
            issue across platforms.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.IEnumerableFactory`1.BuildEnumerable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Builds a Generic enumerable from a Generic enumerable.
            </summary>
            <param name="enumerable">The incoming enumerable.</param>
            <returns>The manufactured enumerable.</returns>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Enumerators.IEnumerableFactory`1.BuildEnumerable(System.Collections.IEnumerable)">
            <summary>
            Builds a Generic enumerable from an enumerable.
            </summary>
            <param name="enumerable">The incoming enumerable.</param>
            <returns>The manufactured enumerable.</returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Exceptions.IPAFBadCollectionEntryExceptionData">
            <summary>
            Exceptions that occur when an attempt is made to add a bad entry to a
            collection or it is determined that a collection has an inappropriate entry.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.Exceptions.IPAFBadCollectionEntryExceptionData.BadCollectionEntry">
            <summary>
            The problematic entry that is somehow incompatible with the
            collection.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Exceptions.IPAFIncompatibleCollectionEntryExceptionData">
            <summary>
            Exceptions that occur when an attempt is made to add a duplcate entry
            to a sorted collection or something similar.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.Exceptions.IPAFIncompatibleCollectionEntryExceptionData.IncompatibleCollectionEntry">
            <summary>
            The problematic entry that is somehow incompatible with the
            <see cref="P:PlatformAgileFramework.Collections.Exceptions.IPAFBadCollectionEntryExceptionData.BadCollectionEntry"/>.
            In cases where it applies, this is an item that is already in the collection
            and might be a duplicate of an item that is attempting to be added,
            for example.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionDataBase">
            <summary>
            Exceptions that occur when an item is somehow incompatible with
            a collection.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionDataBase.BAD_COLLECTION_ENTRY">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionDataBase.m_BadCollectionEntry">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionDataBase.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionDataBase.#ctor(System.Object,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor builds with the standard arguments plus the
            <see cref="P:PlatformAgileFramework.Collections.Exceptions.IPAFBadCollectionEntryExceptionData.BadCollectionEntry"/>.
            </summary>
            <param name="badCollectionEntry">
            See <see cref="T:PlatformAgileFramework.Collections.Exceptions.IPAFBadCollectionEntryExceptionData"/>.
            </param>
            <param name="extensionData">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="pafLoggingLevel">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
            <param name="isFatal">
            <see cref="T:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData"/>.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionDataBase.BadCollectionEntry">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.Exceptions.IPAFBadCollectionEntryExceptionData"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionData">
            <summary>
            Sealed version of <see cref="T:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionDataBase"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionData.#ctor(System.Object,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <remarks>
            <see cref="T:PlatformAgileFramework.Collections.Exceptions.PAFBadCollectionEntryExceptionDataBase"/>
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Exceptions.PAFIncompatibleCollectionEntryExceptionData">
            <summary>
            Sealed version of <see cref="T:PlatformAgileFramework.Collections.Exceptions.PAFIncompatibleCollectionEntryExceptionDataBase"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Exceptions.PAFIncompatibleCollectionEntryExceptionData.#ctor(System.Object,System.Object,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <remarks>
            See base.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Exceptions.PAFIncompatibleCollectionEntryExceptionDataBase">
            <summary>
            <see cref="T:PlatformAgileFramework.Collections.Exceptions.IPAFIncompatibleCollectionEntryExceptionData"/>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Collections.Exceptions.PAFIncompatibleCollectionEntryExceptionDataBase.DUPLICATE_COLLECTION_ENTRY">
            <summary>
            Error message. For cases where an entry attempting to be added is a duplicate
            of another already in a collection. This is usually some sort of sorted collection.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Collections.Exceptions.PAFIncompatibleCollectionEntryExceptionDataBase.m_IncomatibleCollectionEntry">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Exceptions.PAFIncompatibleCollectionEntryExceptionDataBase.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Exceptions.PAFIncompatibleCollectionEntryExceptionDataBase.#ctor(System.Object,System.Object,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <remarks>
            Constructor builds with the standard arguments plus the
            <see cref="P:PlatformAgileFramework.Collections.Exceptions.IPAFBadCollectionEntryExceptionData.BadCollectionEntry"/>
            and <see cref="P:PlatformAgileFramework.Collections.Exceptions.IPAFIncompatibleCollectionEntryExceptionData.IncompatibleCollectionEntry"/>.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.Collections.Exceptions.PAFIncompatibleCollectionEntryExceptionDataBase.IncompatibleCollectionEntry">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.Exceptions.IPAFIncompatibleCollectionEntryExceptionData"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.ExtensionMethods.ListExtensions">
            <summary>
            This class contain some extension methods for the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 10jul2015 </date>
            <description>
            New.
            Had to be built because of some missing constructors for the collection classes
            in PCL libs for Windows Store apps.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ExtensionMethods.ListExtensions.AddItemInOrder``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            This method allows an element to be added to a <see cref="T:System.Collections.Generic.IList`1"/> with
            a certain ordering imposed. If an item with the same compared value is attempted
            to be added, <see langword="false"/> is returned.
            </summary>
            <typeparam name="T">The type of items in the incoming list.</typeparam>
            <param name="list">
            The list to be added to (this). The list must already be in sorted order.
            </param>
            <param name="itemToAdd"> The new item to be added. This argument may be
            <see langword="null"/>, depending on the comparer.
            </param>
            <param name="comparer">
            Comparer that is used to determine the ordering of the list.
            </param>
            <returns>
            <see langword="true"/> if the addition to the list was successful.
            </returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">"list"</exception>
            </exceptions>
            <threadsafety>
            Not thread-safe if multiple access is allowed on <paramref name="list"/> by
            caller.
            </threadsafety>
            <remarks>
            This method was necessary due to a problem with PCLs that don't let us
            construct collections with comparators.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Collections.ExtensionMethods.DictionaryExtensions">
            <summary>
            This class contain some extension methods for the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ExtensionMethods.DictionaryExtensions.AddUniqueAsThoughCollection``1(System.Collections.Generic.IDictionary{``0,``0},``0)">
            <summary>
            This method allows dictionary items to be added to an existing dictionary
            only if they are not present. Key is same as value.
            </summary>
            <typeparam name="TKey">The type of item to be added.
            </typeparam>
            <param name="dict">
            The dictionary to be added to (this).
            May be <see langword="null"/> - just returns.
            </param>
            <param name="newEntry">The new entry to be added. This argument may be
            already in the dictionary, in which case <see langword="false"/> is returned.
            </param>
            <threadsafety>
            Unsafe. Lock the dictionary if thread safety is needed.
            </threadsafety>
            <returns>
            <see langword="true"/>if entry was added.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ExtensionMethods.DictionaryExtensions.AddUniqueValueEntries``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            This method allows dictionary items to be added to an existing dictionary
            only if their value is also unique. This allows a dictionary to be used as
            a sort of associative array with unique mapping.
            </summary>
            <typeparam name="TKey">The type of items in the incoming enumeration.</typeparam>
            <typeparam name="UValue">The type of the items in this collection.</typeparam>
            <param name="dict">
            The dictionary to be added to (this).
            May be <see langword="null"/> - just returns.
            </param>
            <param name="newEntries">The new entries to be added. This argument may be
            <see langword="null"/>, in which case nothing is added and no exception is thrown.
            </param>
            <threadsafety>
            Unsafe. Lock the dictionary if thread safety is needed.
            </threadsafety>
            <exceptions>
            <exception cref="T:System.ArgumentException">
            "Duplicate value" if any of the values in the incoming enumeration are
            duplicates of what is already in the dictionary or of themselves.
            </exception>
            Exceptions are thrown by the dictionary if an attempt is made to install
            entries with duplicate keys.
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ExtensionMethods.DictionaryExtensions.BuildDictionaryIfKeysUnique``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            This method returns a dictionary if the incoming key/value collection have
            unique keys.
            </summary>
            <typeparam name="TKey">The type of keys in the incoming enumeration.</typeparam>
            <typeparam name="UValue">The type of the value in the incoming enumeration.</typeparam>
            <param name="pairs">
            Incoming collection. (this).
            May be <see langword="null"/> - just returns empty dictionary.
            </param>
            <returns>
            <see langword="null"/> for non-unique keys.
            </returns>
            <threadsafety>
            Safe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ExtensionMethods.DictionaryExtensions.GetTypeOrNull``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            This method returns a <see langword="null"/> if a reference type
            is not found.
            </summary>
            <typeparam name="TKey">
            The type of keys in the incoming dictionary.
            </typeparam>
            <typeparam name="UValue">
            The type of the value in the dictionary, which must be a reference type.
            </typeparam>
            <param name="dict">
            The incoming dictionary (this).
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            <see langword="null"/> if not found.
            </returns>
            <threadsafety>
            Safe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ExtensionMethods.DictionaryExtensions.AddOrSet``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            Adds (if not present) or sets (if present) a dictionary item.
            </summary>
            <typeparam name="TKey">Type of Key</typeparam>
            <typeparam name="TValue">Type of Value</typeparam>
            <param name="self">One of us.</param>
            <param name="key">Key</param>
            <param name="val">Value</param>
        </member>
        <member name="T:PlatformAgileFramework.Collections.IDisposableList`1">
            <summary>
            Simple interface just extends <see cref="T:System.Collections.Generic.IList`1"/> with <see cref="T:System.IDisposable"/>.
            </summary>
            <typeparam name="T">Generic type contained in the list.</typeparam>
        </member>
        <member name="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal`1">
            <summary>
            An internal interface for the Generic.
            </summary>
            <remarks>
            New simple version.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal`1.SetItemValue(`0)">
            <summary>
            Gets the item itself.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.ISynchronizedCollection`1">
            <summary>
            Interface adds a few methods so operations can be done atomically and with
            custom setup. Built primarily to sidestep problems/deficiencies with
            Microsoft thread-safe collections. This interface also adds a "side door" which
            will lock the collection and allow it's manipulation as a list when needed.
            </summary>
            <typeparam name="T">Generic type contained in the collection.</typeparam>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 22jan2012 </date>
            <description>
            New.
            </description>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.Collections.ISynchronizedCollection`1.EqualityComparer">
            <summary>
            This property allows setting of a custom comparer so the collection can
            find its contained types and identify dupes.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.ISynchronizedCollection`1.EnumeratorFactory">
            <summary>
            This property allows setting of a custom enumerator factory so the collection can
            provide custom enumerators.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.ISynchronizedCollection`1.TypeCloner">
            <summary>
            This property allows setting of a custom cloner (deep or shallow) so the collection can
            provide custom cloning operations.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ISynchronizedCollection`1.AddNoDupes(`0)">
            <summary>
            Adds an item atomically if it is not already in the collection.
            </summary>
            <param name="item">The item to attempt to add.</param>
            <returns>
            <c>true</c> if the object was not already in the collection.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ISynchronizedCollection`1.RemoveIfPresent(`0)">
            <summary>
            Removes an item atomically if it is in the collection.
            </summary>
            <param name="item">The item to attempt to remove.</param>
            <returns>
            <c>true</c> if the object was in the collection.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ISynchronizedCollection`1.GetListAccessor">
            <summary>
            This method returns a synchronized wrapper that allows the internal list to
            be locked as though a <see cref="T:System.Threading.Monitor"/> had been used to
            place an exclusive lock on the the list. This lock is held until the client
            calls <see cref="M:System.IDisposable.Dispose"/> on the accessor after finishing with
            it. This design allows the <see cref="T:PlatformAgileFramework.Collections.ISynchronizedCollection`1"/> to
            be used as a normal list as well as having fast access properties associated
            with a read/write lock. An internal write lock is taken on the internal list
            and is released when Dispose() is called on the accessor. Put the accessor in
            a "using" clause for ease of use and to help ensure that the purpose is understood.
            </summary>
            <returns>
            An accessor for the internal list which can be used as an ordinary
            <see cref="T:System.Collections.Generic.IList`1"/>, but must be disposed after use.
            </returns>
            <remarks>
            <para>
            If <see cref="M:System.IDisposable.Dispose"/> is not called on the accessor after use,
            a deadlock will occur.
            </para>
            <para>
            Obviously, this accessor should be used as infrequently as possible, since
            a write lock is taken during its use. Use the atomic methods exposed by
            <see cref="T:PlatformAgileFramework.Collections.ISynchronizedCollection`1"/> when possible when
            manipulating the collection.
            </para>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ISynchronizedCollection`1.ResetCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This method allows the list to be cleared and reloaded in one atomic operation.
            </summary>
            <param name="enumerable">The data to reload the list with.</param>
        </member>
        <member name="T:PlatformAgileFramework.Collections.PAFNamedAndTypedObject`1">
            <summary>
            A class for objects identified by Type and/or name. Generic version that is
            basically just a type-safe wrapper.
            </summary>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 22jan2012 </date>
            <description>
            New.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedAndTypedObject`1.#ctor(System.Type,System.String,`0,System.Boolean)">
            <summary>
            Just builds with the props.
            </summary>
            <param name="objectType">
            Type of the object - <see langword="null"/> causes type to be
            inferred from the object, if there is one. Else this becomes
            just a wrapper for an <see cref="T:System.Object"/>.
            </param>
            <param name="objectName">
            Name. <see langword="null"/> gets blank.
            </param>
            <param name="item">
            The generic item. <see langword="null"/> is OK.
            </param>
            <param name="isDefaultObject">
            </param>
            <exceptions>
            Base class throws exceptions for type mismatch.
            See <see cref="M:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.#ctor(System.Type,System.String,System.Object,System.Boolean)"/>
            </exceptions>
        </member>
        <member name="P:PlatformAgileFramework.Collections.PAFNamedAndTypedObject`1.ItemValue">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject`1"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Dictionaries.IPAFNamedAndTypedObjectDictionary`1">
            <summary>
            This interface provides storage for objects that are keyed by name and type.
            Usually there are many objects of the same type with different names,
            but this dictionary can used for general purposes, depending on the
            comparer that is installed. This dictionary is convenient when the object
            itself implements <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> directly or
            aggregates a token that provides it.
            </summary>
            <threadsafety>
            Implementations need not be thread-safe.
            </threadsafety>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Dictionaries.PAFNamedAndTypedObjectDictionary`1">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.Dictionaries.IPAFNamedAndTypedObjectDictionary`1"/>
            </summary>
            <threadsafety>
            This class subclasses an ordinary dictionary and is thus not thread-safe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Dictionaries.PAFNamedAndTypedObjectDictionary`1.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{PlatformAgileFramework.Collections.IPAFNamedAndTypedObject})">
            <summary>
            This constructor builds the dictionary with a case-insensitive name
            comparison.
            </summary>
            <param name="ignoreCase">
            This parameter tells whether or not to ignore case in name comparisons.
            Default is <see langword="false"/>. This parameter is only used when the default
            comparer is used (<paramref name="comparer"/> is <see langword="null"/>).
            </param>
            <param name="comparer">
            This parameter allows a <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            to be installed. Default is to use <see cref="M:PlatformAgileFramework.Collections.Comparers.PAFNameAndTypeComparer.#ctor(System.Boolean)"/>,
            where the argument is loaded from <paramref name="ignoreCase"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Dictionaries.PAFNATODictionaryExtensionMethods">
            <summary>
            Extends NATO dictionaries with a few helpers.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Dictionaries.PAFNATODictionaryExtensionMethods.GetTypedObject``1(PlatformAgileFramework.Collections.Dictionaries.IPAFNamedAndTypedObjectDictionary{``0},System.Type,System.Boolean)">
            <summary>
            Gathers all entries of a particular type <paramref name="objectType"/>.
            </summary>
            <typeparam name="T">
            The type of the object contained in the dictionary.
            </typeparam>
            <param name="thisDictionary"> "this" </param>
            <param name="objectType">
            The type of object to look for.
            </param>
            <param name="exactTypeMatch">
            Tells whether a subtype is allowed(<see langword="false"/>).
            </param>
            <returns>
            An enumeration of objects of the required type or <see langword="null"/>.
            These <typeparamref name="T"/>'s can safely be cast to the
            desired type.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Dictionaries.PAFNATODictionaryExtensionMethods.GetTypedObjects``1(PlatformAgileFramework.Collections.Dictionaries.IPAFNamedAndTypedObjectDictionary{``0},System.Type,System.Boolean)">
            <summary>
            Gathers all entries of a particular type <paramref name="objectType"/>.
            </summary>
            <typeparam name="T">
            The type of the object contained in the dictionary.
            </typeparam>
            <param name="thisDictionary"> "this" </param>
            <param name="objectType">
            The type of object to look for.
            </param>
            <param name="exactTypeMatch">
            Tells whether a subtype is allowed(<see langword="false"/>).
            </param>
            <returns>
            An enumeration of objects of the required type or <see langword="null"/>.
            These <typeparamref name="T"/>'s can safely be cast to the
            desired type.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.IPAFNamedObjectInternal">
            <summary>
            An interface for objects identified by name. Internal version.
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/>.
            </summary>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 22jan2012 </date>
            <description>
            Built because somebody said they needed it.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.Collections.IPAFNamedObjectInternal.SetIsDefault(System.Boolean)">
            <summary>
            Sets the default flag after the type is constructed.
            </summary>
            <param name="isDefaultObject">
            The setting to be applied to the flag.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.IPAFNamedObjectInternal.SetObjectName(System.String)">
            <summary>
            Sets the name of the object.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.IPAFNamedObjectInternal.SetObjectValue(System.Object)">
            <summary>
            Sets the value of the object.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.KeyedCollections.PAFEnumKeyedObjectComparer">
            <summary>
            This class implements a comparison of <see cref="T:PlatformAgileFramework.Collections.KeyedCollections.IPAFEnumKeyedObject"/>s.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Collections.KeyedCollections.PAFEnumKeyedObjectComparer.m_EnumType">
            <summary>
            The type of the <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.KeyedCollections.PAFEnumKeyedObjectComparer.IgnoreCase">
            <summary>
            Determines whether a case-insensitive comparision is made on
            the Enum string if string indexing is used.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Collections.KeyedCollections.PAFEnumKeyedObjectComparer.m_ValueMode">
            <summary>
            Determines whether an enum's integer value is used for
            the indexing. If <see langword="false"/>, string indexing is used.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.KeyedCollections.PAFEnumKeyedObjectComparer.#ctor(System.Type)">
            <summary>
            Default constructor builds with string comparison enabled
            with case-insensitive comparison.
            </summary>
            <param name="enumType">
            The type of the Enum.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.KeyedCollections.PAFEnumKeyedObjectComparer.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Constructor allows indexing mode and case-sensitivity to be set.
            </summary>
            <param name="enumType">
            The type of the Enum.
            </param>
            <param name="valueMode">
            <see langword="true"/> if the Enum's integer value is to be used for indexing.
            </param>
            <param name="ignoreCase">
            <see langword="true"/> for case-insensitive comparison.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.Collections.KeyedCollections.PAFEnumKeyedObjectComparer.ValueMode">
            <summary>
            Determines whether an enum's integer value is used for
            the indexing. If <see langword="false"/>, string indexing is used.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.KeyedCollections.PAFEnumKeyedObjectComparer.EnumType">
            <summary>
            The type of the <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.KeyedCollections.PAFEnumKeyedObjectComparer.DefaultMainCompare(PlatformAgileFramework.Collections.KeyedCollections.IPAFEnumKeyedObject,PlatformAgileFramework.Collections.KeyedCollections.IPAFEnumKeyedObject)">
            <summary>
            Compares the <see cref="T:System.Enum"/>'s integer values or their string
            values, depending on the setting.
            </summary>
            <param name="firstKey">
            The first <see cref="T:PlatformAgileFramework.Collections.KeyedCollections.IPAFEnumKeyedObject"/> to compare.
            </param>
            <param name="secondKey">
            The other <see cref="T:PlatformAgileFramework.Collections.KeyedCollections.IPAFEnumKeyedObject"/> to compare.
            </param>
            <returns>
            See <see cref="T:System.Collections.Generic.IComparer`1"/>
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.KeyedCollections.IPAFKeyedCollection`2">
            <summary>
            Subinterface of the <see cref="T:System.Collections.Generic.ICollection`1"/> interface that uses
            keyed objects. This particular collection requires elements that have
            exposed comparers on them.
            </summary>
            <typeparam name="T">
            Generic type held in the collection.
            </typeparam>
            <typeparam name="U">
            Generic type of the key that items in the collection must have.
            </typeparam>
            <remarks>
            Noted that this interface does not constrain elements to
            implement an equality comparision. This usually means
            the collection must have an equality comparision function
            attached to it.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.KeyedCollections.IPAFKeyedCollection`2.TryGetKeyedItem(`1,`0@)">
            <summary>
            Attempts to locate and return a named item. TryGet style needed for
            value types.
            </summary>
            <param name="key">Key of the item.</param>
            <param name="item">The item.</param>
            <returns>Whether the item was successfully located.</returns>
        </member>
        <member name="P:PlatformAgileFramework.Collections.KeyedCollections.IPAFKeyedCollection`2.KeyEqualityComparer">
            <summary>
            Optional equality comparer used if elements do not have
            equality comparer attached.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.KeyedCollections.IPAFNameKeyedObject">
            <summary>
            An interface for objects identified by name.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.KeyedCollections.PAFNTKeyedObjectComparer`1">
            <summary>
            This class implements a comparision of <see cref="T:PlatformAgileFramework.Collections.KeyedCollections.IPAFNameAndTypeKeyedObject"/>s.
            It pulls the key <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> off <typeparamref name="T"/> and compares
            the keys.
            </summary>
            <typeparam name="T">
            Any reference type implementing <see cref="T:PlatformAgileFramework.Collections.KeyedCollections.IPAFNameAndTypeKeyedObject"/>.
            </typeparam>
        </member>
        <member name="P:PlatformAgileFramework.Collections.KeyedCollections.PAFNTKeyedObjectComparer`1.NAndTComparer">
            <summary>
            Gives access to our wrapped comparer.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.KeyedCollections.PAFNTKeyedObjectComparer`1.#ctor">
            <summary>
            Default constructor just creates our wrapped copy of <see cref="T:PlatformAgileFramework.Collections.Comparers.PAFNameAndTypeComparer"/>.
            Sets for case-insensitive comparison.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.KeyedCollections.PAFNTKeyedObjectComparer`1.#ctor(System.Boolean)">
            <summary>
            Constructor allows case-insensitive comparison to be set.
            </summary>
            <param name="ignoreCase">
            <see langword="true"/> for case-insensitive comparison.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.KeyedCollections.PAFNTKeyedObjectComparer`1.DefaultMainCompare(`0,`0)">
            <summary>
            Compares the two items according to their <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> key.
            Internally uses <see cref="T:PlatformAgileFramework.Collections.Comparers.PAFNameAndTypeComparer"/>.
            </summary>
            <param name="firstItem">
            The first <typeparamref name="T"/> to compare.
            </param>
            <param name="secondItem">
            The second <typeparamref name="T"/> to compare.
            </param>
            <returns>
            See <see cref="T:System.Collections.Generic.IComparer`1"/>
            </returns>
            <exceptions>
            <exception> <see cref="T:System.ArgumentNullException"/> is thrown if
            either parameter is <see langword="null"/>.
            </exception>
            <exception> <see cref="T:System.ArgumentException"/> is thrown if
            key of either parameter is <see langword="null"/>.
            </exception>
            </exceptions>
            <remarks>
            <see cref="P:PlatformAgileFramework.Collections.IPAFNamedObject.ObjectName"/> of either key
            can be <see langword="null"/>. <see langword="null"/> is ordered before non-<see langword="null"/>.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Collections.KeyedCollections.IPAFKeyedObject`1">
            <summary>
            An interface for objects identified by Generic key.
            </summary>
            <typeparam name="T">The type of the key.</typeparam>
        </member>
        <member name="M:PlatformAgileFramework.Collections.KeyedCollections.IPAFKeyedObject`1.GetItemKey">
            <summary>
            This method returns a key of the item.
            </summary>
            <returns>
            Generic key.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.KeyedCollections.IPAFNameAndTypeKeyedObject">
            <summary>
            An interface for objects identified by name and type.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Comparers.PAFNameAndTypeComparer">
            <summary>
            This class implements a comparison of <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>s.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.Comparers.PAFNameAndTypeComparer.IgnoreCase">
            <summary>
            Determines whether a case-insensitive comparision is made on
            the name.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Comparers.PAFNameAndTypeComparer.#ctor">
            <summary>
            Default constructor builds with case-insensitive comparison.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Comparers.PAFNameAndTypeComparer.#ctor(System.Boolean)">
            <summary>
            Constructor allows case-sensitive comparison to be set.
            </summary>
            <param name="ignoreCase">
            <see langword="true"/> for case-insensitive comparison.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Comparers.PAFNameAndTypeComparer.DefaultMainCompare(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject,PlatformAgileFramework.Collections.IPAFNamedAndTypedObject)">
            <summary>
            First compares the <see cref="P:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject.ObjectType"/>
            <see cref="P:System.Type.FullName"/> then, if those are the same, compares the
            <see cref="P:PlatformAgileFramework.Collections.IPAFNamedObject.ObjectName"/>
            </summary>
            <param name="firstKey">
            The first <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> to compare.
            </param>
            <param name="secondKey">
            The other <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> to compare.
            </param>
            <returns>
            See <see cref="T:System.Collections.Generic.IComparer`1"/>
            </returns>
            <exceptions>
            <exception> <see cref="T:System.ArgumentException"/> is thrown if
            <see cref="P:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject.ObjectType"/> of either parameter
            is <see langword="null"/>.
            </exception>
            </exceptions>
            <remarks>
            <para>
            <see cref="P:PlatformAgileFramework.Collections.IPAFNamedObject.ObjectName"/> of either argument
            can be <see langword="null"/>. <see langword="null"/> is ordered before non-<see langword="null"/>.
            </para>
            <para>
            Noted that a comparison is being made of KEYS. An object can
            implement <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/> directly, or
            it can have the key as a property, in which case this comparer
            should be wrapped in another that extracts the key and sends it
            to us.
            </para>
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Collections.Comparers.PAFNameComparer">
            <summary>
            This class implements a comparison of <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/>s.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.Comparers.PAFNameComparer.IgnoreCase">
            <summary>
            Determines whether a case-insensitive comparision is made on
            the name.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Comparers.PAFNameComparer.#ctor">
            <summary>
            Default constructor builds with case-insensitive comparison.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Comparers.PAFNameComparer.#ctor(System.Boolean)">
            <summary>
            Constructor allows case-sensitive comparison to be set.
            </summary>
            <param name="ignoreCase">
            <see langword="true"/> for case-insensitive comparison.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.Comparers.PAFNameComparer.DefaultMainCompare(PlatformAgileFramework.Collections.IPAFNamedObject,PlatformAgileFramework.Collections.IPAFNamedObject)">
             <summary>
            Compares the <see cref="P:PlatformAgileFramework.Collections.IPAFNamedObject.ObjectName"/>
             </summary>
             <param name="firstKey">
             The first <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/> to compare.
             </param>
             <param name="secondKey">
             The other <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/> to compare.
             </param>
             <returns>
             See <see cref="T:System.Collections.Generic.IComparer`1"/>
             </returns>
             <remarks>
             <para>
             <see cref="P:PlatformAgileFramework.Collections.IPAFNamedObject.ObjectName"/> of either argument
             can be <see langword="null"/>. <see langword="null"/> is ordered before non-<see langword="null"/>.
             </para>
             <para>
             Noted that a comparision is being made of KEYS. An object can
             implement <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/> directly, or
             it can have the key as a property, in which case this comparer
             should be wrapped in another that extracts the key and sends it
             to us.
             </para>
             </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Collections.IPAFDeepCloneableInternal`1">
            <summary>
            Interface does deep cloning. This interface extends the <see cref="T:PlatformAgileFramework.Collections.IPAFGenericDeepCloneable`1"/>
            interface by adding a method whose purpose is to clone all non-public fields of the object
            that are not normally exposed to the client.
            </summary>
            <remarks>
            The reason for the split interface is that clients often don't need
            the entire internal infrastructure of a type in order to examine its
            public characteristics. It matters when this internal infrastructure
            is large or complex.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.IPAFDeepCloneableInternal`1.DeepCloneAll">
            <summary>
            Makes a deep clone of a type, including public and non-public fields.
            </summary>
            <returns>
            An independent copy of a type.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.IPAFDisposableList`1">
            <summary>
            Simple interface just extends <see cref="T:System.Collections.Generic.IList`1"/> with <see cref="T:System.IDisposable"/>.
            </summary>
            <typeparam name="T">Generic type contained in the list.</typeparam>
            <remarks>
            This interface is used in the implementation of synchronized collections.
            It's normally used to lock a collection for safe single-thread manipulation.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal">
            <summary>
            An interface for objects identified by Type and/or name. This interface is
            internal, since we normally would like to have immutable implementations
            of the public interface. There are cases requiring modification of the
            members after construction, however.
            </summary>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 02jan2012 </date>
            <description>
            New.
            </description>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal.SetObjectType(System.Type)">
            <summary>
            Sets the type after the implementation is constructed.
            </summary>
            <param name="objectType">
            The type to be set.
            </param>
            <remarks>
            Obsolete - see <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal.SetAssemblyQualifiedObjectTypeName(System.String)">
            <summary>
            Sets the type name after the implementation is constructed.
            </summary>
            <param name="assemblyQualifiedObjectTypeName">
            The type name to be set.
            </param>
            <exceptions>
            <exception cref="T:System.InvalidOperationException">
            "Type is already resolved" if <see cref="P:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject.ObjectType"/>
            is not <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.Collections.PAFNamedObject">
            <summary>
            An immutable class for objects identified by Type and/or name.
            </summary>
            <history>
            <contribution>
            <author> DAV </author>
            <date> 22jun2012 </date>
            <description>
            Built for 4.0 security. This is a new type that was factored for
            flexibility in use.
            </description>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.Collections.PAFNamedObject.m_IsDefaultObject">
            <summary>
            Backing.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Collections.PAFNamedObject.m_ObjectName">
            <summary>
            Backing.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Collections.PAFNamedObject.m_ObjectValue">
            <summary>
            Backing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedObject.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Just builds with the props.
            </summary>
            <param name="objectName">Name. <see langword="null"/> gets blank.</param>
            <param name="obj">
            The object. <see langword="null"/> is OK.
            </param>
            <param name="isDefaultObject">
            Sets <see cref="P:PlatformAgileFramework.Collections.PAFNamedObject.IsDefaultObject"/>.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.Collections.PAFNamedObject.ObjectName">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.PAFNamedObject.IsDefaultObject">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.PAFNamedObject.ObjectValue">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObject"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedObject.PlatformAgileFramework#Collections#IPAFNamedObjectInternal#SetIsDefault(System.Boolean)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObjectInternal"/>
            </summary>
            <param name="isDefaultObject">
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObjectInternal"/>
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedObject.PlatformAgileFramework#Collections#IPAFNamedObjectInternal#SetObjectName(System.String)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObjectInternal"/>
            </summary>
            <param name="objectName">
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObjectInternal"/>
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedObject.PlatformAgileFramework#Collections#IPAFNamedObjectInternal#SetObjectValue(System.Object)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObjectInternal"/>
            </summary>
            <param name="objectValue">
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedObjectInternal"/>
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedObject.GetObjects(System.Collections.Generic.IEnumerable{PlatformAgileFramework.Collections.IPAFNamedObject})">
            <summary>
            Separates objects out of a collection.
            </summary>
            <param name="natos">Incoming named objects.</param>
            <returns>object enumeration or <see langword="null"/>.</returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.PAFNamedAndTypedObject">
            <summary>
            A class for objects identified by Type and/or name.
            </summary>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 22jan2012 </date>
            <description>
            New. Refactored from the old class to derive from <see cref="T:PlatformAgileFramework.Collections.PAFNamedObject"/>.
            Took out constructors for late type resolution and moved them to extended.
            </description>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.m_AssemblyQualifiedObjectTypeName">
            <summary>
            Backing.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.m_ObjectType">
            <summary>
            Backing.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.#ctor(System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            Just builds with the props.
            </summary>
            <param name="objectType">
            Sets <see cref="P:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.ObjectType"/>.
            </param>
            <param name="objectName">
            See base class.
            </param>
            <param name="obj">
            See base class.
            </param>
            <param name="isDefaultObject">
            See base class.
            </param>
            <exceptions>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"> with
            <see cref="!:PAFTypeMismatchExceptionDataBase.FIRST_TYPE_NOT_CASTABLE_TO_SECOND_TYPE"/>
            message if <paramref name="obj"/> is loaded and it does not inherit from
            <paramref name="objectType"/>.
            </exception>
            </exceptions>
        </member>
        <member name="P:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.AssemblyQualifiedObjectType">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.ObjectType">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObject"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.PlatformAgileFramework#Collections#IPAFNamedAndTypedObjectInternal#SetAssemblyQualifiedObjectTypeName(System.String)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal"/>
            </summary>
            <param name="assemblyQualifiedObjectTypeName">
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal"/>
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.PlatformAgileFramework#Collections#IPAFNamedAndTypedObjectInternal#SetObjectType(System.Type)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal"/>
            </summary>
            <param name="objectType">
            See <see cref="T:PlatformAgileFramework.Collections.IPAFNamedAndTypedObjectInternal"/>
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Collections.PAFNamedAndTypedObject.GetTypes(System.Collections.Generic.IEnumerable{PlatformAgileFramework.Collections.IPAFNamedAndTypedObject})">
            <summary>
            Separates types out of a collection.
            </summary>
            <param name="natos">Incoming named and typed objects.</param>
            <returns>type enumeration.</returns>
        </member>
        <member name="T:PlatformAgileFramework.Collections.ArrayExtensions">
            <summary>
            This class contain some extension methods for the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Collections.ArrayExtensions.PAFReverseArray``1(``0[])">
            <summary>
            This method allows an array of <typeparamref name="T"/> to be reversed.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="array">The array to be reversed. <see langword="null"/> gets <see langword="null"/> out. </param>
            <returns>
            An array with elements in reverse order.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.Events.EventArgExtensions">
            <summary>
            This class implements some simple extensions for <see cref="T:System.EventArgs"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Events.EventArgExtensions.RaiseEvent``1(``0,System.EventHandler@,System.Object)">
            <summary>
            This method provides a thread-safe way to raise an event. The problem
            it avoids is the <see langword="null"/>ing of the handler before the delegate list
            can be accessed in a multi-threaded environment.
            </summary>
            <param name="e">Regular argument to event handlers.</param>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">Ordinary argument to event handler</param>
        </member>
        <member name="M:PlatformAgileFramework.Events.EventArgExtensions.RaiseEvent``1(``0,System.EventHandler{``0}@,System.Object)">
            <summary>
            This method provides a thread-safe way to raise an event. The problem
            it avoids is the <see langword="null"/>ing of the handler before the delegate list
            can be accessed in a multi-threaded environment.
            </summary>
            <typeparam name="T">Must be an <see cref="T:System.EventArgs"/>.</typeparam>
            <param name="e">Regular argument to event handlers.</param>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">Ordinary argument to event handler</param>
        </member>
        <member name="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExeParameterizedPipelineInitialize`1">
            <summary>
            This interface aggregates two others to provide a pipeline plus parameters.
            </summary>
            <typeparam name="T">The actual application parameters.</typeparam>
            <history>
            <author> BMC </author>
            <date> 25aug2011 </date>
            <contribution>
            New.
            </contribution>
            </history>
        </member>
        <member name="T:PlatformAgileFramework.Execution.Pipeline.PAFBaseExePipelineInitialize`1">
            <summary>
            Default implementation of the interface. Often used as a nested class.
            </summary>
            <remarks>
            See the interface.
            </remarks>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 21aug2015 </date>
            <description>
            Took out synchronization - this is to be used in applications where the generic
            is either immutable or synchronized.
            </description>
            </contribution>
            <contribution>
            <author> BMC </author>
            <date> 21aug2011 </date>
            <description>
            Built for nested class support.
            </description>
            </contribution>
            </history>
            <threadsafety>
            This implementation is not thread-safe. Normally only one threrad will be
            accessing this class.
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.Execution.Pipeline.PAFBaseExePipelineInitialize`1.m_PipelineParams">
            <summary>
            The payload.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFBaseExePipelineInitialize`1.#ctor(PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams{`0})">
            <summary>
            Constructor builds with props.
            </summary>
            <param name="pipelineParams">Parameter-providing interface.</param>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFBaseExePipelineInitialize`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor builds with raw props. Builds an internal <see cref="T:PlatformAgileFramework.Execution.Pipeline.PAFPipelineParams`1"/>.
            </summary>
            <param name="pipelineParam">Generic pipeline param.</param>
            <param name="shouldInitializeAfterConstruction">
            See <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1"/>.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.PAFBaseExePipelineInitialize`1.IsExePipelineInitialized">
            <summary>
            <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.PAFBaseExePipelineInitialize`1.PipelineParams">
            <summary>
            <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFBaseExePipelineInitialize`1.InitializeExePipeline(PlatformAgileFramework.TypeHandling.IPAFProviderPattern{PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams{`0}})">
            <remarks>
            <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.PAFBaseExePipelineInitialize`1.ProvidedItem">
            <remarks>
            See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFProviderPattern`1"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFBaseExePipelineInitialize`1.TryGetProvidedItem(PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams{`0}@)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFProviderPattern`1"/>. In this class, item
            is a reference type, so we always return <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipeline`1">
            <summary>
            This interface prescribes methods which PAF application classes must implement to
            participate in the "execution pipeline". The naming convention used
            here anticipates the extension of the interface to include specific additional
            stages in the pipeline.
            </summary>
            <typeparam name="T">The actual application parameters.</typeparam>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipeline`1.IsExePipelineUninitialized">
            <summary>
            Provides an indication of whether the type has already been uninitialized.
            This will be <see langword="true"/> only after the <see cref="M:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipeline`1.UninitializeExePipeline"/>
            method has been called. If this property is <see langword="true"/> it generally means
            that the PAF component can no longer be accessed.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipeline`1.HasPipelinedObjectRun">
            <summary>
            Provides an indication of whether the type has run at least once.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipeline`1.IsPipelinedObjectRunning">
            <summary>
            Provides an indication of whether the type is currently executing.
            For scenarios where multiple threads are accessing the pipelined object.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipeline`1.RunPipelinedObject(System.Object)">
            <summary>
            Runs (executes) the object.
            </summary>
            <param name="obj">
            Optional data.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipeline`1.UninitializeExePipeline">
            <summary>
            Provides an Uninitialization function where things can be shut down.
            This can often be used to call a dispose method, but can be different if
            needed. One scenario is when the type is expensive to create and it's
            desired to undo it's parameterization, then redo it's parameterization
            and run it again.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1">
            <summary>
            This interface allows access to parameters that are used in certain
            PAF application class constructors and factories and at other stages in the
            pipeline. The key parameter in this basic interface is the
            <see cref="P:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1.ShouldInitializeAfterConstruction"/> property. This is
            used by factories or by the class itself to signal that the type has
            been fully parameterized after the type has been constructed and
            the <see cref="M:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1.InitializeExePipeline(PlatformAgileFramework.TypeHandling.IPAFProviderPattern{PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams{`0}})"/>.
            </summary>
            <typeparam name="T">The actual application parameters.</typeparam>
            <threadsafety>
            The construction parameters are not normally touched by multiple threads.
            Thread safety needn't be guaranteed.
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1.ShouldInitializeAfterConstruction">
            <summary>
            This property tells if the class should be initialized after it is
            constructed. This propery is used mostly by factories.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1.ApplicationParameters">
            <summary>
            Retrieves the applications specific parameters.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1.ReparameterizedCopy(`0)">
            <summary>
            Builds a copy with new params.
            </summary>
            <param name="newParams">New app parameters.</param>
            <returns>Interface to a new object.</returns>
        </member>
        <member name="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1">
            <summary>
            <para>
            This interface prescribes methods which PAF application classes must implement to
            participate in the first stage of the "execution pipeline". The naming convention used
            here anticipates the extension of the interface to include specific additional
            stages in the pipeline. The "pipeline" provides a set of standard properties and
            methods that help application developers avoid doing a lot of work in constructors.
            The basic usage pattern is to construct an object, then set its properties, then call
            <see cref="M:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1.InitializeExePipeline(PlatformAgileFramework.TypeHandling.IPAFProviderPattern{PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams{`0}})"/>. This provides considerably more flexibility
            in parameterizing types at specific times in specific ways.
            </para>
            </summary>
            <typeparam name="T">The actual application parameters.</typeparam>
            <history>
            <author> BMC </author>
            <date> 09aug2011 </date>
            <contribution>
            <para>
            Added history.
            </para>
            <para>
            Broke this out of the full pipeline for use in core. Was needed in the peice of
            serialization we broke out for core.
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1.IsExePipelineInitialized">
            <summary>
            Provides an indication of whether the type has already been initialized.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1.PipelineParams">
            <summary>
            Storage for params passed in by pipeline constructor.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1.InitializeExePipeline(PlatformAgileFramework.TypeHandling.IPAFProviderPattern{PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams{`0}})">
            <summary>
            Provides an initialization function where services are loaded and
            other things can be done to prepare the class for use. The initialize
            method can be expected to throw a variety of exceptions when mandatory
            properties are not set for typical implementations.
            </summary>
            <param name="provider">
            Allows a provider to be specified at the initialization stage.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.Execution.Pipeline.PAFExecutionPipelineExtensionMethods">
            <summary>
            This class provides utility functions for types participating in the
            PAF "execution pipeline".
            </summary>
            <history>
            <author> BMC </author>
            <date> 09aug2011 </date>
            <contribution>
            <para>
            Added history.
            </para>
            <para>
            Broke this out of the full pipeline for use in core. Was needed in the peice of
            serialization we broke out for core.
            </para>
            <para>
            Completely redesigned for SL, since we no longer have access to stack info.
            </para>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFExecutionPipelineExtensionMethods.ThrowExceptionOnInitialized``1(PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize{``0},System.String)">
            <summary>
            Provides exception service for <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>'s
            whose properties are attempted to be set after initialization. Throws an
            <see cref="T:System.InvalidOperationException"/> if the <paramref name="pipelinedObject"/>
            has already been initialized. This method is generally called if properties
            are set after initialization, but it's possible that some methods might need
            to be called only before initialization.
            </summary>
            <param name="pipelinedObject">
            The instance of the Type implementing <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>.
             </param>
            <param name="methodOrPropertyName">
            The name of the property or method that is being called after initialization.
            Can be <see langword="null"/>, but more helpful if not.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFExecutionPipelineExtensionMethods.ThrowExceptionOnUninitialized``1(PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize{``0},System.String)">
            <summary>
            Provides exception service for <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>'s
            whose methods are attempted to be called before initialization. Throws an
            <see cref="T:System.InvalidOperationException"/> if the <paramref name="pipelinedObject"/>
            has not been initialized. This method is generally called if methods
            are called before initialization, but it's possible that some properties
            might need to be set only after initialization.
            </summary>
            <param name="pipelinedObject">
            The instance of the Type implementing <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>.
             </param>
            <param name="methodOrPropertyName">
            The name of the property or method that is being called before initialization.
            Can be <see langword="null"/>, but more helpful if not.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFExecutionPipelineExtensionMethods.ThrowExceptionOnPropertyNotSet``1(PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize{``0},System.String)">
            <summary>
            Provides exception service for <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>'s
            whose mandatory properties have not been set or have been set to invalid
            values.
            </summary>
            <param name="pipelinedObject">
            The instance of the Type implementing <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>.
             </param>
            <param name="propertyName">
            The name of the property that has not been set correctly.
            Can be <see langword="null"/>, but more helpful if not.
            </param>
            <remarks>
            Unconditionally throws an exception.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFExecutionPipelineExtensionMethods.CreatePipelineObject``3(``1)">
            <summary>
            Factory to create objects that wear <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>.
            This factory employs reflection to instantiate and optionally initialize types
            that wear the interface and have a public constructor with the single argument
            <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1"/>.
            </summary>
            <typeparam name="T">
            The class wearing <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>.
            </typeparam>
            <typeparam name="U">
            The class wearing <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1"/>.
            </typeparam>
            <typeparam name="V">
            Specific application parameters.
            </typeparam>
            <param name="iPAFPipelineParams">
            The pipeline's <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1"/>.
            </param>
            <returns>A new instance of <typeparamref name="T"/>.</returns>
            <remarks>
            <para>
            In accordance with the pipeline protocol, the <see cref="M:PlatformAgileFramework.Execution.Pipeline.IPAFBaseExePipelineInitialize`1.InitializeExePipeline(PlatformAgileFramework.TypeHandling.IPAFProviderPattern{PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams{`0}})"/>
            method is called after construction if the <paramref name="iPAFPipelineParams"/>
            is non-<see langword="null"/> and has the <see cref="P:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1.ShouldInitializeAfterConstruction"/>
            property set.
            </para>
            <para>
            This method can construct reference types only.
            </para>
            </remarks>
            <exceptions>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the type does not have the required constructor.
            "Can't find IPAFPipeline constructor for Type: TYPE".
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the type was not constructed.
            "Can't construct Type: TYPE".
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if an exception occurred in the initialization phase.
            "Pipeline initialization failed for Type: TYPE"
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.Execution.Pipeline.PAFPipelineParams`1">
            <summary>
            Default implementation of <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1"/>.
            </summary>
            <remarks>
            See the interface.
            </remarks>
            <history>
            <author> KRM </author>
            <date> 12sep2014 </date>
            <contribution>
            Added history and changed class to be immutable to close a potettial security hole.
            </contribution>
            </history>
            <threadsafety>
            This implementation is not thread-safe. Normally only one thread will be
            accessing this class.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFPipelineParams`1.#ctor">
            <summary>
            Default for inheritors.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFPipelineParams`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor builds with params.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.PAFPipelineParams`1.ShouldInitializeAfterConstruction">
            <summary>
            See <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.PAFPipelineParams`1.ApplicationParameters">
            <summary>
            See <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFPipelineParams`1.ReparameterizedCopy(`0)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.Execution.Pipeline.PAFPipelineParams`1.ProvidedItem">
            <summary>
            See <c>IPAFProviderPattern{IPAFPipelineParams{T}}</c>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Execution.Pipeline.PAFPipelineParams`1.TryGetProvidedItem(PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams{`0}@)">
            <summary>
            See <c>IPAFProviderPattern{IPAFPipelineParams{T}}</c>
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Execution.ExecutionUtils">
            <summary>
            Utilities helping to identify the execution environment.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.Execution.ExecutionUtils.s_IsElevatedTrust">
            <summary>
            Indicates trust mode.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Execution.ExecutionUtils.IsElevatedTrust">
            <summary>
            Determines whether we are in low-trust (e.g. Silverlight) or
            elevated trust (e.g. trusted ECMA assembly).
            </summary>
            <returns>
            <see langword="true"/> for elevated trust.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Execution.ExecutionUtils.SetElevatedTrust(System.Boolean)">
            <summary>
            Allows setting of trust level.
            </summary>
            <param name="isElevatedTrust">
            Sets trust level.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObjectInternal">
            <summary>
            This interface is an internal extension of <see cref="T:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject"/>
            allowing extensibility for framework builders.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObjectInternal.AcquireReferenceInternal(PlatformAgileFramework.Remoting.IPAFLeaseSponsor)">
            <summary>
            Internal version of <see cref="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.AcquireReference(PlatformAgileFramework.Remoting.IPAFLeaseSponsor)"/>
            that does not require elevated trust.
            </summary>
            <param name="sponsor">
            See <see cref="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.AcquireReference(PlatformAgileFramework.Remoting.IPAFLeaseSponsor)"/>.
            </param>
            <returns>
            See <see cref="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.AcquireReference(PlatformAgileFramework.Remoting.IPAFLeaseSponsor)"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObjectInternal.RegisterLeaseSponsorInternal(PlatformAgileFramework.Remoting.IPAFLeaseSponsor)">
            <summary>
            Registers a sponsor in the sponsor registry. Note that this does not
            establish a reference to the object. This must be done through
            <see cref="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.AcquireReference(PlatformAgileFramework.Remoting.IPAFLeaseSponsor)"/>, etc.
            </summary>
            <param name="sponsor">
            See <see cref="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.RegisterLeaseSponsor(PlatformAgileFramework.Remoting.IPAFLeaseSponsor)"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObjectInternal.SetDefaultSponsorCallExtensionTime(System.TimeSpan)">
            <summary>
            Internal version of <see cref="P:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.DefaultSponsorCallExtensionTime"/>
            that does not require elevated trust.
            </summary>
            <param name ="defaultSponsorCallExtensionTime">
            See <see cref="P:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.DefaultSponsorCallExtensionTime"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObjectInternal.SetRemainingLeaseTime(System.TimeSpan)">
            <summary>
            Internal version of <see cref="P:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.RemainingLeaseTime"/>
            that does not require elevated trust.
            </summary>
            <param name ="remainingLeaseTime">
            The remaining lease time. This can increase or decrease the remaining time.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObjectInternal.SetRenewOnCallTime(System.TimeSpan)">
            <summary>
            Internal version of <see cref="P:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.RenewOnCallTime"/>
            that does not require elevated trust.
            </summary>
            <param name ="renewOnCallTime">
            See <see cref="P:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.RenewOnCallTime"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObjectInternal.SetSponsorShipTimeout(System.TimeSpan)">
            <summary>
            Internal version of <see cref="P:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.SponsorshipTimeout"/>
            that does not require elevated trust.
            </summary>
            <param name ="sponsorshipTimeout">
            See <see cref="P:PlatformAgileFramework.Remoting.IPAFLifetimeManagedObject.SponsorshipTimeout"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.Serializing.ECMAReplacements.IPAFSerializationEntry">
            <summary>
            An interface for types replacing the classical
            "System.Runtime.Serialization.SerializationEntry".
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Serializing.Interfaces.IPAFSerializationSurrogateKey">
            <summary>
            Interface allows a surrogate to be indexed by type, name and context state.
            Implementations are normally surrogates and they wear the key directly
            to make resorting of elements in collections a bit easier.
            </summary>
            <threadsafety>
            The implementations of this interface are not anticipated to be thread-safe.
            Normally, only one worker thread is accessing the implementing class during
            the serialization or deserialization process.
            </threadsafety>
        </member>
        <member name="T:PlatformAgileFramework.Serializing.HelperCollections.PAFSerializationSurrogateDictionary">
            <summary>
            This class provides storage for serialization surrogates. It is designed to
            be accessed by a single thread and is generally held and used inside the
            framework. It holds <see cref="T:PlatformAgileFramework.Serializing.Interfaces.IPAFSerializationSurrogateKey"/>'s and
            is keyed by the name and type.
            </summary>
            <threadsafety>
            This class subclasses an ordinary dictionary and is thus not thread-safe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.Serializing.HelperCollections.PAFSerializationSurrogateDictionary.#ctor">
            <summary>
            This constructor builds the dictionary with a case-insensitive name
            comparison.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Serializing.HelperCollections.IObjectKeyedSerializableObjectStore">
            <summary>
            This interface is a closure of the generic interface specialized
            to a <see cref="T:System.Object"/> key and a general <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.StringParsing.PAFCharacterEncodingType">
            <summary>
            This class describes what type of character encoding we want. This
            part supports only UNICODE.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.StringParsing.PAFCharacterEncodingType.UNICODE">
            <summary>
            Standard two-byte UNICODE as implemented in Silverlight.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.StringParsing.PAFCharacterEncodingType.#ctor(System.String,System.Int32)">
            <remarks>
            See base.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.StringParsing.PAFCharacterEncodingType.#ctor(System.String,System.Int32,System.Boolean)">
            <remarks>
            See base.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.StringParsing.MatchPartition">
            <summary>
            This class provides a description of the internal details of a match
            partition found by the parser service.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.StringParsing.MatchPartition.m_MDList">
            <summary>
            Holds the matches.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.StringParsing.MatchPartition.#ctor">
            <summary>
            Constructor just initializes the list.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.StringParsing.MatchPartition.NumContainedMatches">
            <summary>
            This property returns the number of matches in the list.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.StringParsing.MatchPartition.PartitionMatchBracket">
            <summary>
            This property returns a <see cref="T:PlatformAgileFramework.StringParsing.MatchDescriptor"/> that describes
            the "boundary" of the matches contained within the partition. The
            <c>NumMatches</c> is loaded with the number of matches found and contained
            in the partition. The <c>OffsetOfMatchStart</c> is loaded with the
            <c>OffsetOfMatchStart</c> of the first match. The <c>OffsetOfMatchEnd</c>
            is loaded with the <c>OffsetOfMatchEnd</c> of the last match. These are
            both -1 if <c>NumMatches</c> is 0.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.StringParsing.MatchPartition.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:PlatformAgileFramework.StringParsing.MatchDescriptor"/> at the index.
            </summary>
            <param name="matchIndex">
            The 0-based index of a match to extract.
            </param>
            <returns>
            The <see paramref="matchIndex"/>'th <see cref="T:PlatformAgileFramework.StringParsing.MatchDescriptor"/> found
            in the search.
            </returns>
            <exception>
            Throws a standard exception from the internal list indexer if
            matchIndex is out of bounds.
            </exception>
        </member>
        <member name="M:PlatformAgileFramework.StringParsing.MatchPartition.ClearMatches">
            <summary>
            Clears the partition, resulting in <c>NumContainedMatches</c> = 0;
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.StringParsing.MatchPartition.AddMatch(PlatformAgileFramework.StringParsing.MatchDescriptor)">
            <summary>
            Adds a match to the internal collection at the end.
            </summary>
            <param name="matchDescriptor">
            A <see cref="T:PlatformAgileFramework.StringParsing.MatchDescriptor"/> to be appended.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.AssemblyExtensionMethods.AssemblyExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Reflection.Assembly"/> type.TypeHandling. This is the
            Core version. The other part of the partial class is the ECMA/CLR version. This
            part works for both.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.AssemblyExtensionMethods.AssemblyExtensions.GatherAttributedTypes(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>
            Examines an assembly to determine if there are any types inside
            with or without a certain stringful attribute.
            </summary>
            <param name="assembly">
            Assembly to check. <see langword="null"/> gets <see langword="null"/>.
            </param>
            <param name="attributeName">
            Stringful name of the attribute. <see langword="null"/> gets <see langword="null"/>
            </param>
            <param name="wantAttributePresent">
            <see langword="true"/> if we want the attribute to be present, <see langword="false"/> if not.
            </param>
            <returns>
            The set of types with the attribute present or not present. <see langword="null"/>
            if the assembly has no types. This method always returns resolved types
            (<see cref="P:PlatformAgileFramework.TypeHandling.PAFTypeHolderBase.TypeType"/> != <see langword="null"/>).
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.ConstructorCopyer`1">
            <summary>
            Class that wraps a constructor info and optional FIXED parameters
            for use as a copyer.
            </summary>
            <typeparam name="T">
            Type of the object to wrap.
            </typeparam>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.ConstructorCopyer`1.m_Parameters">
            <summary>
            Construction params.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.ConstructorCopyer`1.m_ConstructorInfo">
            <summary>
            Info.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.ConstructorCopyer`1.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Allows a constructor along with additional FIXED parameters to be specified.
            The class always takes the object of type <typeparamref name="T"/> in its
            copy method, but will also utilize the additional parameters, if specified.
            </summary>
            <param name="constructorInfo">
            Constructor which must take a number of parameters equal to the number of
            incoming parameters plus one.
            </param>
            <param name="parameters">
            Constructor parameters which are input to the constructor after the
            first parameter, which is the object of type <typeparamref name="T"/>.
            Can be <see langword="null"/>, in which case a single argument copy constructor
            is expected.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.ConstructorCopyer`1.ConstructedCopy(`0)">
            <summary>
            Provides a copy through a copy constructor.
            </summary>
            <returns>
            A copy of <typeparamref name="T"/> or "default(T)" if the input
            is "default(T)".
            </returns>
            <exceptions>
            <see cref="T:System.NotSupportedException"/> if <typeparamref name="T"/> does not
            have a copy constructor.
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateVv">
            <summary>
            Standard delegate.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateOv">
            <summary>
            Standard delegate.
            </summary>
            <param name="o">
            An arbitrary object to be passed to the method.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateOo">
            <summary>
            Standard delegate.
            </summary>
            <param name="o">
            An arbitrary object to be passed to the method.
            </param>
            <returns>An arbitrary object returned from the method.</returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateOOo">
            <summary>
            Standard delegate.
            </summary>
            <param name="o">
            An arbitrary object to be passed to the method.
            </param>
            <param name="o2">
            An arbitrary object to be passed to the method.
            </param>
            <returns>An arbitrary object.</returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateTv`1">
            <summary>
            Standard delegate.
            </summary>
            <typeparam name="T">The Generic Type the method handles.</typeparam>
            <param name="t">
            An object of type <typeparamref name="T"/> to be passed to the method.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateOt`1">
            <summary>
            Standard delegate.
            </summary>
            <typeparam name="T">The Generic Type the method returns.</typeparam>
            <param name="o">
            An arbitrary object to be passed to the method.
            </param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateTo`1">
            <summary>
            Standard delegate.
            </summary>
            <typeparam name="T">The Generic Type the method handles.</typeparam>
            <param name="t">
            An object of type <typeparamref name="T"/> to be passed to the method.
            </param>
            <returns>An arbitrary object.</returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateTUv`2">
            <summary>
            Standard delegate.
            </summary>
            <typeparam name="T">The Generic Type the method handles.</typeparam>
            <typeparam name="U">The Generic Type the method handles.</typeparam>
            <param name="t">
            An object of type <typeparamref name="T"/> to be passed to the method.
            </param>
            <param name="u">
            An object of type <typeparamref name="U"/> to be passed to the method.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateUt`2">
            <summary>
            Standard delegate.
            </summary>
            <typeparam name="T">The Generic Type the method returns.</typeparam>
            <typeparam name="U">The Generic Type the method handles.</typeparam>
            <param name="u">
            An object of type <typeparamref name="U"/> to be passed to the method.
            </param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.ActionMethodDelegateOUt`2">
            <summary>
            Standard delegate.
            </summary>
            <typeparam name="T">The Generic Type the method returns.</typeparam>
            <typeparam name="U">The Generic Type the method handles.</typeparam>
            <param name="o">
            An arbitrary object to be passed to the method.
            </param>
            <param name="u">
            An object of type <typeparamref name="U"/> to be passed to the method.
            </param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.WeakEventSource`1">
            <summary>
            Replaces a multicast delegate as an event's backing store. Duplicate behavior, except it is thread safe and holds weak references.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegateExtensions">
            <summary>
            Helpers for pseudodelegates.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegateExtensions.GetIfAlive``1(PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate{``0})">
            <summary>
            Generates a delegate from method info if the method is static
            or the target is still alive.
            </summary>
            <returns><see langword="null"/> if we can still be called.</returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1">
            <summary>
            A <see cref="T:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1"/> contains some of the same information that
            a <see cref="T:System.Delegate"/> contains, but no invocation list or invoking
            capabilities. Weak references to the target are maintained.
            </summary>
            <contribution>
            <author> BMC </author>
            <date> 25aug2013 </date>
            <description>
            Created weak pseudodelegates.
            </description>
            </contribution>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.m_DelegateMethodInfo">
            <summary>
            Backing for <see cref="P:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.DelegateMethod"/> property.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.m_WeakDelegateTarget">
            <summary>
            Backing for <see cref="P:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.Target"/> property.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.m_IsStatic">
            <summary>
            Backing for <see cref="P:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.IsStatic"/> property.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.#cctor">
            <summary>
            Unfortunately, the CLR does not even yet allow Generics
            to be constrained to be delegates, so we have to do the
            check at load time.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.#ctor(`0)">
            <summary>
            Constructor just builds a <see cref="T:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate"/> from a
            <see cref="T:System.Delegate"/>.
            </summary>
            <param name="del">The delegate to pull the method off.</param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">"del"</exception>
            </exceptions>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.DelegateMethod">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> from the original <see cref="!:Delegate.GetMethodInfo()"/> property.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.IsStatic">
            <summary>
            Indicates whether the delegate is static and does not contain a target.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.Target">
            <summary>
            The target, which may be <see langword="null"/>. Note
            that this variable must be copied to a strong reference
            before being accessed. Use <see cref="P:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.IsStatic"/> to determine
            if the delegate is static and will always return <see langword="null"/>
            here.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.Equals(System.Object)">
            <summary>Overridden for our customs equals.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.GetHashCode">
            <summary>Mixes in both method and target, if present. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate`1.Equals(PlatformAgileFramework.TypeHandling.Delegates.WeakPseudoDelegate{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type. Checks
            a bunch of stuff to see if everything is equal.
            </summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate">
            <summary>
            A <see cref="T:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate"/> contains some of the same information that
            a <see cref="T:System.Delegate"/> contains, but no invocation list or invoking
            capabilities. Strong or weak references to the target may be maintained.
            </summary>
            <contribution>
            <author> BMC </author>
            <date> 25aug2013 </date>
            <description>
            Combined weak and normal pseudodelegates into one class.
            </description>
            </contribution>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.m_DelegateMethodInfo">
            <summary>
            Backing for <see cref="P:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.DelegateMethod"/> property.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.m_DelegateTarget">
            <summary>
            Backing for <see cref="P:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.DelegateTarget"/> property.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.m_WeakDelegateTarget">
            <summary>
            Backing for <see cref="P:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.DelegateTarget"/> property when a weak
            reference is needed.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.m_IsWeakTarget">
            <summary>
            Is our target held by a weak reference?
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.#ctor">
            <summary>
            For the cloner and inheritance support.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Constructor just builds a <see cref="T:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate"/> from a
            <see cref="T:System.Delegate"/>.
            </summary>
            <param name="del">The delegate to pull the method off.</param>
            <param name="isWeakTarget">
            <see langword="true"/> to only hold a weak reference to the target object,
            if this is an instance method.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.#ctor(System.Delegate,System.Object,System.Boolean)">
            <summary>
            Constructor builds a <see cref="T:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate"/> from a
            <see cref="T:System.Delegate"/> and a new target.
            </summary>
            <param name="del">The delegate to pull the method off.</param>
            <param name="target">Optional new target for the method. If the method
            is a static method, this is ignored. If it is <c>null</c> the target
            is not changed.
            </param>
            <param name="isWeakTarget">
            <see langword="true"/> to only hold a weak reference to the target object,
            if this is an instance method.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.#ctor(PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate,System.Object)">
            <summary>
            Constructor builds a <see cref="T:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate"/> from a
            <see cref="T:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate"/> and a new target.
            </summary>
            <param name="pseudoDelegate">The pseudodelegate to pull the method off.</param>
            <param name="delegateTarget">
            Optional new target for the method. If the method
            is a static method, this is ignored. If it is <c>null</c> the target
            is not changed.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.DelegateMethod" -->
        <member name="P:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.DelegateTarget">
            <summary>
            The target that the <see cref="T:System.Reflection.MethodInfo"/> will be invoked on if it is
            an instance method. Set this to <see langword="null"/> to disconnect the weak or strong
            reference from the target.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Delegates.PseudoDelegate.SetDelegateTarget(System.Object)">
            <summary>
            Sets either the weak or strong reference, based on the weak reference flag.
            </summary>
            <param name="delegateTarget">
            The target to set.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFSecureDisposableDisposalClientProvider">
            <summary>
            Model for a secured mechanism for providing a disposal client. This
            is the public part.
            </summary>
            <history>
            <author> KRM </author>
            <date> 04mar2012 </date>
            <contribution>
            Built so Clients can be easily provided WITH a secure key.
            </contribution>
            </history>
            <threadsafety>
            Should be thread-safe if developers do not attempt reset of content
            during application operation.
            </threadsafety>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFFinalizerExceptionData">
            <summary>
            This exception is thrown when a finalizer is called and it should not be.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.IPAFFinalizerExceptionData.FinalizationType">
            <summary>
            Representation of the type the finalizer was called on.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionDataMessageTags">
            <summary>
            Set of tags with an enumerator for exception messages. These are the dictionary keys
            for extended.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionDataMessageTags.FINALIZER_WAS_CALLED">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionDataMessageTags.#cctor">
            <summary>
            Just puts the tags in a list to hand out.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1">
            <summary>
            Default implementation of the interfaces. Note that this class is anticipated
            to be used as a non-public member variable on a type that wishes to employ it's
            functionality.
            </summary>
            <history>
            <author> KRM </author>
            <date> 04mar2012 </date>
            <contribution>
            Built so Clients can be easily provided WITH a secure key.
            </contribution>
            </history>
            <threadsafety>
            Thread-safe if developers do not attempt reset of content
            during application operation.
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.SecretKeyProvider">
            <summary>
            Holds our key.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.DisposableDisposalClientProvider">
            <summary>
            Holds our client.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.#ctor(System.IDisposable,`0)">
            <summary>
            Just installs our client.
            </summary>
            <param name="disposalClient">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposableDisposalClientProvider"/>.
            </param>
            <param name="secretKey">
            Can be "default(T)". This is considered no key at all.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.DisposableDisposalClient">
            <summary>
            Implementation of <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposableDisposalClientProvider"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.DisposalClient">
            <summary>
            Implementation of <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposalClientProvider"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.GetSecretKey">
            <summary>
            Implementation of <see cref="T:PlatformAgileFramework.Security.IPAFSecretKeyProviderInternal`1"/>. This is the
            virtual method that should be overridden to change behavior.
            </summary>
            <returns>
            The secret key.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.DeepClone">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFDeepCloneable"/>
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFDeepCloneable"/>
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.KeyMatches(System.Object)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKey"/>
            </summary>
            <param name="secretKeyThatNeedsToMatch">
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKey"/>
            </param>
            <returns>
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKey"/>
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.GetKeyProviderFromClientProvider(PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposalClientProvider)">
            <summary>
            Gets a secret key provider from an object implementing
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposalClientProvider"/>.
            </summary>
            <param name="clientProvider">
            Can be <see langword="null"/>. In this case, a default key is installed
            in the provider that is returned. This is equivalent to no
            key at all.
            </param>
            <returns>
            A separate, independent copy of <see cref="T:PlatformAgileFramework.Security.IPAFSecretKey"/>
            if the key is <see cref="T:PlatformAgileFramework.Collections.IPAFDeepCloneable"/> or is a value type
            that is copyable.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposableDisposalClientProvider`1.PlatformAgileFramework#Security#IPAFSecretKeyProviderInternal{T}#GetSecretKeyInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKeyProviderInternal`1"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKeyProviderInternal`1"/>.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFSecureDisposalClientProvider">
            <summary>
            Interface supporting the PAF dispose pattern. Useful for
            class composition. Just aggregates two other interfaces.
            </summary>
            <history>
            <author> KRM </author>
            <date> 07mar2012 </date>
            <contribution>
            Built for the <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.DisposalRegistry"/>.
            </contribution>
            </history>
            <threadsafety>
            Not needed in implementations - only a get from a class that is normally immutable.
            </threadsafety>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1">
            <summary>
            Default implementation of the interfaces.
            </summary>
            <history>
            <author> KRM </author>
            <date> 04mar2012 </date>
            <contribution>
            Built so Clients can be easily provided WITH a secure key.
            </contribution>
            </history>
            <threadsafety>
            Thread-safe if developers do not attempt reset of content
            during application operation.
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1.SecretKeyProvider">
            <summary>
            Holds our key.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1.DisposalClientProvider">
            <summary>
            Holds our client.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1.#ctor(System.Object,`0)">
            <summary>
            Just installs our client.
            </summary>
            <param name="disposalClient">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposalClientProvider"/>.
            </param>
            <param name="secretKey">
            Can be "default(T)". This is considered no key at all.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1.DisposalClient">
            <summary>
            Implementation of <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposalClientProvider"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1.GetSecretKey">
            <summary>
            Implementation of <see cref="T:PlatformAgileFramework.Security.IPAFSecretKeyProviderInternal`1"/>. This is the
            virtual method that should be overridden to change behavior.
            </summary>
            <returns>
            The secret key.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1.DeepClone">
            <summary>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFDeepCloneable"/>
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.Collections.IPAFDeepCloneable"/>
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1.KeyMatches(System.Object)">
            <summary>
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKey"/>
            </summary>
            <param name="secretKeyThatNeedsToMatch">
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKey"/>
            </param>
            <returns>
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKey"/>
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1.GetKeyProviderFromClientProvider(PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposalClientProvider)">
            <summary>
            Gets a secret key provider from an object implementing
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposalClientProvider"/>.
            </summary>
            <param name="clientProvider">
            Can be <see langword="null"/>. In this case, a default key is installed
            in the provider that is returned. This is equivalent to no
            key at all.
            </param>
            <returns>
            A separate, independent copy of <see cref="T:PlatformAgileFramework.Security.IPAFSecretKey"/>
            if the key is <see cref="T:PlatformAgileFramework.Collections.IPAFDeepCloneable"/> or is a value type
            that is copyable.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFSecureDisposalClientProvider`1.PlatformAgileFramework#Security#IPAFSecretKeyProviderInternal{T}#GetSecretKeyInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKeyProviderInternal`1"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.Security.IPAFSecretKeyProviderInternal`1"/>.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionData">
            <summary>
            This exception is thrown when a finalizer is called and it should not be.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionData.FINALIZER_WAS_CALLED">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionData.m_FinalizationType">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionData.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionData.#ctor(PlatformAgileFramework.TypeHandling.PAFTypeHolder,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor builds with the standard arguments plus the <see cref="T:PlatformAgileFramework.TypeHandling.PAFTypeHolder"/>.
            </summary>
            <param name="finalizationType">
            Loads <see cref="P:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionData.FinalizationType"/>. May be <see langword="null"/>.
            </param>
            <param name="extensionData">
            Sets <see cref="P:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData.ExtensionData"/>.
            </param>
            <param name="pafLoggingLevel">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="isFatal">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.PAFFinalizerExceptionData.FinalizationType">
            <summary>
            Representation of the type the finalizer was called on.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass">
            <summary>
            <para>
            This is a class demonstrating the PAF finalizer pattern. Existing Microsoft
            "best practice" guidance promotes the use of a standard finalizer/dispose pattern.
            References abound. This guidance, while perhaps well-intended, results in dangerous
            and buggy code. In the majority of cases, a finalizer is called only when a programmer
            neglects to call <see cref="M:System.IDisposable.Dispose"/> when an object is no longer needed.
            The problem is that finalization is indeterminate. If there are, if fact, resources
            that need to be disposed (either managed or unmanaged) and they are not disposed,
            resource starvation can occur. To make matters worse, since the finalization times
            are indeterminate, this results in bugs that are exteremly difficult to track down.
            The use of "SafeHandle"'s does not address this problem, it only kicks a very rusty,
            very ugly can down the road.
            </para>
            <para>
            Under the PAF philosophy, the execution of a finalizer, in the manner in which
            Microsoft spins the tale, is indicative of a serious program error. It means that
            the proper logic has not been created to call <see cref="M:System.IDisposable.Dispose"/> on
            the object under all conditions. Finalizers are not totally, useless, however,
            since they provide an excellent instrumentation mechanism for testing. Under the
            PAF philosophy this is one of the few legitimate uses of finalizers. While an
            application is undergoing testing, the logic of the program (or class/whatever)
            should be evaluated to ensure that finalizers are NEVER called. To ensure this,
            a programmer must check to see that type members that are <see cref="T:System.IDisposable"/>
            are themselves disposed and otherwise see to it that all type instances that
            implement a finalizer are disposed when the type is no longer needed. Under test
            conditions, finalizers may be programmed to log the fact that they are called
            or throw an exception or provide some other indication in the test that the
            object has not been properly disposed in a deterministic fashion.
            </para>
            <para>
            This class demonstrates the direct use of the PAF Finalizer pattern. In practice,
            the use of a disposal surrogate such as <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.PAFDisposerBase`1"/> is
            preferred, since it moves all of the disposal logic into the surrogate. Very
            little code is required in the client class to implement disposal through a
            surrogate. TODO - develop a simple example for this, perhaps from AsyncControlObject.
            </para>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.m_1ForDisposed">
            <summary>
            This field is not part of the dispose/finalization pattern necessarily.
            It is often used to indicate that dispose has already been called on this
            object. Good programming practice dictates that <see cref="M:System.IDisposable.Dispose"/>
            be callable multiple times and this is a practical way to implement the logic.
            Use of this variable can allow triggering of exceptions if clients attempt
            to use this object after it has been disposed.
            </summary>
            <threadsafety>
            <para>
            This is 4-byte field. Under NUMA rules, this field is read/written atomically.
            Noted that this CANNOT be made an auto-property, since the compiler will generate
            set/set methods for it, which are NOT atomic. The "volatile" keyword won't allow
            it anyway.
            </para>
            <para>
            Noted that placing a lock on the instance or using an atomic variable as is done
            here does NOT in any way solve all the disposal issues associated with a CLR type.
            The only thing it does is prevent two callers from trying to simultaneously dispose
            the instance. If other objects have references to this object or any of it's
            members, they must be either shut down or advised of the disposal of this object.
            Gates that throw exceptions are useful for identifying use of disposed objects
            during testing.
            </para>
            </threadsafety>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.MeAsMyInternals">
            <summary>
            Reference to myself.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.#ctor">
            <summary>
            Sets internal references and hooks the trivial caller method.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.Dispose">
            <summary>
            Never make this method virtual. The developer of any subclass must not be
            allowed to change the logic.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.UnprotectedDispose">
            <summary>
            This is the dispose method that is callable by untrusted clients. It
            is normally secured by a "secret key". This class does not demonstrate
            the use of a secret key.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.PAFDispose(System.Boolean,System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>. This is a virtual "backing" class for
            the explicit implementation.
            </summary>
            <param name="disposing">
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>.
            </param>
            <param name="obj">
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>.
            This is not used in this demonstration class.
            </param>
            <remarks>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>.
            When subclassing this class (or a class like it), this is the method that should
            be overridden. Obviously the designer of the subclass should keep in mind the order
            of resource disposal that should be followed and call the base at the appropriate
            point (usually after the subclass call, but not always). The call to the base
            implementation should be wrapped in a try/catch block.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.GetDisposeMethod(System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>
            </summary>
            <remarks>
            In most implementations, the <paramref name="obj"/> contains a "secret key"
            that is checked against the secret key that this class is built with.
            We keep this class simple to demonstrate just the implementation of the
            PAF dispose pattern.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.IsPAFObjectDisposed">
            <summary>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.SetPAFObjectDisposed(System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>
            </summary>
            <returns>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>
            </returns>
            <remarks>
            We only go one way on this variable, so no need for retry loops or any other
            complex synchronization. An exchange works fine here.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Disposal.FinalizerDemonstrationClass.PlatformAgileFramework#TypeHandling#Disposal#IPAFDisposableInternal#PAFDisposeCallerInternal">
            <summary>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal">
            <summary>
            <para>
            Internal setters for setting stuff post-construction and for serializers.
            </para>
            </summary>
            <remarks>
            </remarks>
            <history>
            <contribution>
            <author> DAP </author>
            <date> 21nov2011 </date>
            <description>
            Made this interface for serialization.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Not safe. This is only for privileged callers.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal.SetAssembly(System.Reflection.Assembly)">
            <summary>
            Setter for the prop. See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolder"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal.SetAssemblyChecker(PlatformAgileFramework.TypeHandling.CheckCandidateAssembly)">
            <summary>
            Setter for the prop. See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolder"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal.SetAssemblyCulture(System.String)">
            <summary>
            Setter for the prop. See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolder"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal.SetAssemblyLoader(PlatformAgileFramework.Manufacturing.IPAFAssemblyLoader)">
            <summary>
            Setter for the prop. See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolder"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal.SetAssemblyNameString(System.String)">
            <summary>
            Setter for the prop. See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolder"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal.SetAssemblyPublicKeyToken(System.String)">
            <summary>
            Setter for the prop. See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolder"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal.SetAssemblySimpleName(System.String)">
            <summary>
            Setter for the prop. See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolder"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal.SetAssemblyStrongName(System.String)">
            <summary>
            Setter for the prop. See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolder"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolderInternal.SetAssemblyVersion(System.String)">
            <summary>
            Setter for the prop. See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFAssemblyHolder"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PAFProviderPattern`1">
            <remarks>
            See <see cref="T:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFProviderPattern`1.#ctor">
            <remarks>
            See <see cref="T:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFProviderPattern`1.#ctor(`0)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1"/>.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1">
            <summary>
            Class that holds an item of a certain type.
            </summary>
            <typeparam name="T">
            The type of the item provided.
            </typeparam>
            <threadsafety>
            Not thread-safe.
            </threadsafety>
            <contribution>
            <author> KRM </author>
            <date> 21aug2015 </date>
            <description>
            Took out setting and synchronization - this should be implemented in specific applications
            where the provider needs to be reset - don't know why it was in here since we didn't
            use it in PAF and can't find where any legacy code used it.
            </description>
            </contribution>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1.m_ItemWrapper">
            <summary>
            Payload of the provider. It may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1.#ctor">
            <summary>
            Default constructor doesn't set the item.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1.#ctor(`0)">
            <summary>
            Main constructor just sets the item.
            </summary>
            <param name="item">This item will be placed inside the object.</param>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1.ItemPIV">
            <summary>
            Backing for the "Item" property.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1.ProvidedItem">
            <remarks>
            See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFProviderPattern`1"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFProviderPatternBase`1.TryGetProvidedItem(`0@)">
            <remarks>
            See <see cref="T:PlatformAgileFramework.TypeHandling.IPAFProviderPattern`1"/>.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.IPAFProviderPattern`1">
            <summary>
            Class that holds an item of a certain type.
            </summary>
            <typeparam name="T">
            The type of the item provided.
            </typeparam>
            <contribution>
            <author> KRM </author>
            <date> 21aug2015 </date>
            <description>
            Took out setting and synchronization - this should be implemented in specific applications
            where the provider needs to be reset - don't know why it was in here since we didn't
            use it in PAF and can't find where any legacy code used it.
            </description>
            </contribution>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.IPAFProviderPattern`1.ProvidedItem">
            <summary>
            The item.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.IPAFProviderPattern`1.TryGetProvidedItem(`0@)">
            <summary>
            Gets the item - needed for value types. On occasion the item is never set.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.IPAFTypedObject">
            <summary>
            Class that holds an object, which may be <c>null</c> and its
            Type.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.IPAFTypedObject.Object">
            <summary>
            The object, which may be <c>null</c>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.EnumeratedSingleton`1">
            <summary>
            Class that wraps a single instance of a type into an <see cref="T:System.Collections.IEnumerable"/>
            so it can be displayed in GUI lists, etc.
            </summary>
            <typeparam name="T">
            Type of the object to wrap.
            </typeparam>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.EnumeratedSingleton`1.#ctor(`0)">
            <summary>
            Just puts the typed object into a list.
            </summary>
            <param name="singleton">
            The type that we want to wrap.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.EnumeratedSingleton`1.GetEnumerator">
            <summary>
            See <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </summary>
            <returns>
            See <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.EnumeratedSingleton`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="T:System.Collections.IEnumerator"/>.
            </summary>
            <returns>
            See <see cref="T:System.Collections.IEnumerator"/>.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1">
            <summary>
            This class provides a type-safe aggregator for
            <see cref="T:PlatformAgileFramework.TypeHandling.TypeHandlingUtils.GenericTypeFilter`1"/>'s. This class supports
            hierarchical composition of filters into a logic tree. Simplest form is an
            and/or tree, which is what we support in Core OOB. Inheritors have fun!!
            </summary>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 31jul2012 </date>
            <description>
            New.
            Needed to build an aggregator so we could build and store often-used
            filter combinations.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Safe if the individual filters are safe.
            </threadsafety>
            <remarks>
            Note that the filters are contravariant on their item type, so an aggregator
            closed with a derived type can aggregate filters with the same type or
            a base type. 
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1.CombinationMode">
            <summary>
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.IPAFItemFilterAggregator`1"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1.Filters">
            <summary>
            Contains a list of filter containers that are called in the
            same sequence they are installed. We expose only an add method, since
            someone is sure to fiddle with the collection while it is being read
            and ask why they have concurrency errors.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1.#ctor(System.String,System.Collections.Generic.IEnumerable{PlatformAgileFramework.TypeHandling.Filters.IPAFItemFilter{`0}},PlatformAgileFramework.TypeHandling.Filters.ItemFilterCombinationMode,System.Object,System.Boolean)">
            <summary>
            Constructor builds list and sets props.
            </summary>
            <param name="filterName">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter`1"/>. An aggregator is just another container.
            </param>
            <param name="filterContainers">
            Optional set of filters that can be added at construction time.
            Default = <see langword="null"/>
            </param>
            <param name="combinationMode">
            Sets <see cref="P:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1.CombinationMode"/>.
            Default = <see cref="F:PlatformAgileFramework.TypeHandling.Filters.ItemFilterCombinationMode.AND_FALSE"/>.
            </param>
            <param name="filterAuxiliaryData">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter`1"/>. An aggregator is just another container.
            </param>
            <param name="useCommonData">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter`1"/>. An aggregator is just another container.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1.AddFilter(PlatformAgileFramework.TypeHandling.Filters.IPAFItemFilter{`0})">
            <summary>
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.IPAFItemFilterAggregator`1"/>.
            </summary>
            <param name="filter">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.IPAFItemFilterAggregator`1"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1.AndItemFilterFalseResults(`0,System.Object)">
            <summary>
            This method will return <see langword="false"/> if any aggregated filters return
            <see langword="false"/>.
            </summary>
            <param name="item">
            See <typeparamref name="T"/>
            </param>
            <param name="auxData">
            An object carrying auxiliary information.
            </param>
            <returns>
            <see langword="true"/> only if no filters return <see langword="false"/>.
            </returns>
            <remarks>
            This method is exposed as public so it can be called, independent of
            the construction parameter
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1.OrItemFilterTrueResults(`0,System.Object)">
            <summary>
            This method will return <see langword="false"/> if all aggregated filters return
            <see langword="false"/>.
            </summary>
            <param name="item">
            See <typeparamref name="T"/>
            </param>
            <param name="auxData">
            An object carrying auxiliary information.
            </param>
            <returns>
            <see langword="true"/> if any filters return <see langword="true"/>.
            </returns>
            <remarks>
            This method is exposed as public so it can be called, independent of
            the construction parameter
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.MemberExtensionMethods.Helpers.IPAFMemberFilterAggregator`1">
            <summary>
            This interface is a specialization of <see cref="T:PlatformAgileFramework.TypeHandling.Filters.IPAFItemFilterAggregator`1"/>.
            </summary>
            <typeparam name="T">
            This is the type that the filters are designed to operate on. In this derived
            interface, it is constrained to be a <see cref="T:System.Reflection.MemberInfo"/>.
            </typeparam>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 31jul2012 </date>
            <description>
            New.
            </description>
            </contribution>
            </history>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PAFMethodHolder">
            <summary>
            Sealed version of <see cref="T:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase"/>.
            </summary>
            <remarks>
            </remarks>
            <history>
            <author> DAP </author>
            <date> 10nov2011 </date>
            <contribution>
            <para>
            New. Made to able to carry <see cref="T:System.Reflection.MethodInfo"/> in its base class.
            </para>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMethodHolder.#ctor(System.Reflection.MethodInfo,System.String,PlatformAgileFramework.TypeHandling.PAFTypeHolderBase)">
            <summary>
            Constructor sets props.
            </summary>
            <param name="methodInfo">
            The actual method info, if known.
            </param>
            <param name="methodName">
            String name of the method - we don't support overloads in this
            simple model.
            </param>
            <param name="hostType">
            Declaring type.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if 
            <paramref name="methodInfo"/> is <see langword="null"/> and either the
            <paramref name="hostType"/> is <see langword="null"/> or the
            <paramref name="methodName"/> is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMethodHolder.#ctor(PlatformAgileFramework.TypeHandling.PAFMethodHolder)">
            <summary>
            Copy constructor. Makes deep copy.
            </summary>
            <param name="methodHolder">
            See base.
            </param>
            <exceptions>
            See base.
            </exceptions>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.PAFMethodHolder.mthdInfo">
            <summary>
            Just converts to a <see cref="T:System.Reflection.MethodInfo"/> - the only thing we
            can hold.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMethodHolder.op_Implicit(System.Reflection.MethodInfo)~PlatformAgileFramework.TypeHandling.PAFMethodHolder">
            <summary>
            Calls <c>PAFMethodHolder(info)</c>.
            </summary>
            <param name="info">
            The info to be wrapped. Not <see langword="null"/>.
            </param>
            <returns>
            One of us.
            </returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="info"/>
            is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PAFMemberHolder">
            <summary>
            Sealed version of <see cref="T:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase"/>.
            </summary>
            <remarks>
            </remarks>
            <history>
            <author> DAP </author>
            <date> 07nov2011 </date>
            <contribution>
            <para>
            New sealed version.
            </para>
            </contribution>
            </history>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMemberHolder.#ctor(System.Reflection.MemberInfo,System.String,PlatformAgileFramework.TypeHandling.PAFTypeHolderBase)">
            <summary>
            Constructor sets props -just calls base.
            </summary>
            <param name="memberInfo">
            See base.
            </param>
            <param name="memberName">
            See base.
            </param>
            <param name="hostType">
            See base.
            </param>
            <exceptions>
            See base.
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMemberHolder.#ctor(PlatformAgileFramework.TypeHandling.PAFMemberHolderBase)">
            <summary>
            Copy constructor. Makes deep copy.
            </summary>
            <param name="memberHolder">
            See base.
            </param>
            <exceptions>
            See base.
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMemberHolder.op_Implicit(System.Reflection.MemberInfo)~PlatformAgileFramework.TypeHandling.PAFMemberHolder">
            <summary>
            Calls <c>PAFMemberHolder(null, null, info)</c>.
            </summary>
            <param name="info">
            The info to be wrapped. Not <see langword="null"/>.
            </param>
            <returns>
            One of us.
            </returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="info"/>
            is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase">
            <summary>
            <para>
            Contains the name of a member and possibly the actual <see cref="T:System.Reflection.MemberInfo"/>.
            This class is designed to carry member information locally or across
            "AppDomain" boundaries or whenever a serializable representation
            of the member is needed.
            </para>
            </summary>
            <remarks>
            </remarks>
            <history>
            <author> DAP </author>
            <date> 06nov2011 </date>
            <contribution>
            <para>
            Added history, changed name space, added more DOCs.
            </para>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.m_HostType">
            <summary>
            The host type, which is serialized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.m_MmbrInfo">
            <summary>
            Member info. Never serialized.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.m_MemberName">
            <summary>
            Stringful representation of the method, which is serialized.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.#ctor(System.Reflection.MemberInfo,System.String,PlatformAgileFramework.TypeHandling.PAFTypeHolderBase)">
            <summary>
            Constructor sets props.
            </summary>
            <param name="memberInfo">
            The actual <see cref="T:System.Reflection.MemberInfo"/>, if available.
            </param>
            <param name="memberName">
            Not blank or <see langword="null"/>, for late binding. If
            <paramref name="memberInfo"/> is non-null, it will be loaded
            from that with the <see cref="P:System.Reflection.MemberInfo.Name"/>.
            </param>
            <param name="hostType">
            Not blank or <see langword="null"/>, for late binding. If
            <paramref name="memberInfo"/> is non-null, it will be loaded
            from that with the <see cref="P:System.Reflection.MemberInfo.DeclaringType"/>.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if 
            <paramref name="memberName"/> is <see langword="null"/> and the
            <paramref name="memberInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"> is thrown if 
            <paramref name="hostType"/> is <see langword="null"/> and the
            <paramref name="memberInfo"/> is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.#ctor(PlatformAgileFramework.TypeHandling.PAFMemberHolderBase)">
            <summary>
            Copy constructor. Makes deep copy.
            </summary>
            <param name="memberHolder">
            One of us.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if 
            <paramref name="memberHolder"/> is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.HostType">
            <summary>
            The host type. Can be late-bound. Never <see langword="null"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.MmbrInfo">
            <summary>
            The actual <see cref="T:System.Reflection.MemberInfo"/>. This may be <see langword="null"/> in late-bound
            scenarios.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.MemberName">
            <summary>
            Stringful representation of the member - never <see langword="null"/> or
            blank.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.op_Implicit(System.Reflection.MemberInfo)~PlatformAgileFramework.TypeHandling.PAFMemberHolderBase">
            <summary>
            Calls <c>PAFMemberHolderBase(info)</c>.
            </summary>
            <param name="info">
            The info to be wrapped. Not <see langword="null"/>.
            </param>
            <returns>
            One of us.
            </returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="info"/>.
            is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
            </param>
            <remarks>
            Patch for Microsoft's mistake.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFMemberHolderBase.GetHashCode">
            <summary>
            We are a reference type so just call base to shut up the compiler/tools.
            </summary>
            <returns>
            The original hash code.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PAFTypedObject">
            <summary>
            Class that holds an object, which may be <c>null</c> and its
            Type.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.PAFTypedObject.Object">
            <summary>
            The object, which may be <c>null</c>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFTypedObject.#ctor(System.Object,System.Type)">
            <summary>
            Constructor just set the fields.
            </summary>
            <param name="obj">
            The contained object. May be <c>null</c>.
            </param>
            <param name="objectType">
            The type of the object (not <c>null</c>).
            </param>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFTypedObject.FromNTO(PlatformAgileFramework.Collections.IPAFNamedAndTypedObject)">
            <summary>
            Calls <c>PAFTypedObject(IPAFNamedAndTypedObject.Object, IPAFNamedAndTypedObject.ObjectType)</c>.
            </summary>
            <param name="nto">
            The named and typed object. Can not be <see langword="null"/>.
            </param>
            <returns>
            One of us.
            </returns>
            <exceptions>
            <exception cref="T:System.ArgumentNullException"> is thrown if <paramref name="nto"/>
            is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PAFTypeHolderExtensions">
            <summary>
            Extension methods make it easier to work with <see cref="T:PlatformAgileFramework.TypeHandling.IPAFTypeHolder"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFTypeHolderExtensions.IsTypeLoadable(PlatformAgileFramework.TypeHandling.IPAFTypeHolder)">
            <summary>
            Determines whether a <see cref="T:PlatformAgileFramework.TypeHandling.IPAFTypeHolder"/> has a namespace,
            unqualified name and an assembly name.
            </summary>
            <param name="holder">
            Incoming type holder. <see langword="null"/> gets <see langword="false"/>.
            </param>
            <returns>
            <see langword ="true"/> if conditions are satisfied.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFTypeHolderExtensions.TypesToTypeHolders(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Converts a list of types to typeholders.
            </summary>
            <param name="types">
            Incoming types. <see langword="null"/> gets <see langword="null"/>.
            </param>
            <returns>Outgoing types.</returns>
            <remarks>
            This one is actually an enumerable extension. We don't want to pollute the
            enumerable extension class with bizarre types like a <see cref="T:PlatformAgileFramework.TypeHandling.PAFTypeHolder"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFTypeHolderExtensions.TypesNamesToTypeHolders(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a list of type names to typeholders.
            </summary>
            <param name="typeNames">
            Incoming names. <see langword="null"/> gets <see langword="null"/>.
            </param>
            <returns>Outgoing holders.</returns>
            <remarks>
            This one is actually an enumerable extension. We don't want to pollute the
            enumerable extension class with bizarre types like a <see cref="T:PlatformAgileFramework.TypeHandling.PAFTypeHolder"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PAFTypeHolderExtensions.ValidateGenericAssignableFromType``1(PlatformAgileFramework.TypeHandling.IPAFTypeHolder)">
            <summary>
            Method will determine whether an interface type is consistent with the Generic
            closure of this class. In core, it only checks a type's <see cref="T:System.Type"/> if
            it is not <see langword="null"/>. It wraps a partial method intended to be used
            in any extension of the framework that can do code generation for something
            like a proxy.
            </summary>
            <remarks>
            The exception that is thrown by this method can be expected to wrap other
            exceptions generated from the partial class, if it is active.
            </remarks>
            <exceptions>
            <exception cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1">
            <see cref="!:PAFTypeMismatchExceptionDataBase.FIRST_TYPE_NOT_CASTABLE_TO_SECOND_TYPE"/>
            is thrown if the Generic constraint is not satisfied. This exception may actually wrap
            other exceptions that are encountered during lazy loading of a type by its stringful
            description in framework extensions. 
            </exception>
            </exceptions>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.Helpers.PAFPropertyFilter`1">
            <summary>
            This class provides a container for a <see cref="T:PlatformAgileFramework.TypeHandling.TypeHandlingUtils.GenericTypeFilter`1"/>
            and its auxiliary data. It is mostly a helper class for the member extensions. It is a
            specialization of <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter`1"/>.
            </summary>
            <typeparam name="T">
            This is the type that the filters are designed to operate on. In this derived
            class, it is constrained to be a <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter`1"/>.
            </typeparam>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 31jul2012 </date>
            <description>
            New.
            Support class for the aggregator.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Immutable type - safe if auxiliary data is not modified.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.Helpers.PAFPropertyFilter`1.#ctor(PlatformAgileFramework.TypeHandling.TypeHandlingUtils.GenericTypeFilter{System.Reflection.PropertyInfo},System.String,System.Object,System.Boolean)">
            <summary>
            Immutable constructor.
            </summary>
            <param name="filteringDelegate">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter`1"/>.
            </param>
            <param name="filterName">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter`1"/>.
            </param>
            <param name="filterAuxiliaryData">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter`1"/>.
            </param>
            <param name="useCommonData">
            See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter`1"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.Helpers.PAFPropertyFilterAggregator`1">
            <summary>
            This class provides a type-safe aggregator for
            <see cref="T:PlatformAgileFramework.TypeHandling.MemberExtensionMethods.MemberExtensions.FilterMember"/>'s. It is mostly a helper class for
            the member extensions. It is a specialization of <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1"/>.
            </summary>
            <typeparam name="T">
            This is the type that the filters are designed to operate on. In this derived
            class, it is constrained to be a <see cref="T:System.Reflection.MemberInfo"/>.
            </typeparam>
            <history>
            <contribution>
            <author> KRM </author>
            <date> 31jul2012 </date>
            <description>
            New.
            </description>
            </contribution>
            </history>
            <threadsafety>
            Safe if the individual filters are safe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.Helpers.PAFPropertyFilterAggregator`1.#ctor(System.String,System.Collections.Generic.IEnumerable{PlatformAgileFramework.TypeHandling.Filters.PAFItemFilter{`0}},PlatformAgileFramework.TypeHandling.Filters.ItemFilterCombinationMode,System.Object,System.Boolean)">
            <remarks>
            Constructor is a direct pass-through to base. See <see cref="T:PlatformAgileFramework.TypeHandling.Filters.PAFItemFilterAggregator`1"/>
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.PropertyExtensions">
            <summary>
            This class implements extensions for <see cref="T:System.Reflection.PropertyInfo"/>s.
            </summary>
            <history>
            <contribution>
            <author> JWM(S) </author>
            <date> 03jul2015 </date>
            <desription>
            Changed strategy after consulting with KRM to return empty collections, not
            <see langword="null"/>'s.
            </desription>
            </contribution>
            <contribution>
            <author> KRM </author>
            <date> 07aug2012 </date>
            <description>
            New.
            Reflection on props
            </description>
            </contribution>
            </history>
            <threadsafety>
            Safe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.PropertyExtensions.FilterSetMethodsOnPI(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Filters public/private instance/static props. "this" is an enumeration of <see cref="T:System.Reflection.PropertyInfo"/>'s
            that we wish to filter. We look for props with constraints on "setters".
            </summary>
            <param name="incomingPropsToFilter">One of us.</param>
            <param name="publicMethods">
            <see langword="true"/> to return props with public getters. <see langword="null"/>
            to return both ublic and non-public.
            </param>
            <param name="instanceMethods">
            <see langword="true"/> to return instance props. <see langword="null"/>
            to return both instance and static.
            </param>
            <returns>
            <see langword="null"/> if no get methods of proper characteristics on the props.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.PropertyExtensions.FilterGetMethodsOnPI(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Filters public/private instance/static props. "this" is an enumeration of <see cref="T:System.Reflection.PropertyInfo"/>'s
            that we wish to filter.We look for props with constraints on "getters".
            </summary>
            <param name="incomingPropsToFilter">One of us.</param>
            <param name="publicMethods">
            <see langword="true"/> to return props with public getters. <see langword="null"/>
            to return both public and non-public.
            </param>
            <param name="instanceMethods">
            <see langword="true"/> to return instance props. <see langword="null"/>
            to return both instance and static.
            </param>
            <returns>
            <see langword="null"/> if no get methods of proper characteristics on the props.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.PropertyExtensions.FilterPropertyByGetterPresence(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            This is a method for filtering <see cref="T:System.Reflection.PropertyInfo"/> objects according to
            the presence or non presence of a getter method.
            </summary>
            <param name="pInfo">
            This is a <see cref="T:System.Reflection.PropertyInfo"/> that may have a getter method
            attached to it. It may be <see langword="null"/>, in which case the method
             returns <see langword="true"/>.
            </param>
            <param name="obj">
            Unused.
            </param>
            <returns>
            <see langword="true"/> if the type passes the criteria.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.PropertyExtensions.FilterPropertyBySetterAndGetterPresence(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            This is a method for filtering <see cref="T:System.Reflection.PropertyInfo"/> objects according to
            the presence or non presence of a getter and setter method.
            </summary>
            <param name="pInfo">
            This is a <see cref="T:System.Reflection.PropertyInfo"/> that may have a getter and setter method
            attached to it. It may be <see langword="null"/>, in which case the method
            returns <see langword="true"/>.
            </param>
            <param name="obj">
            Unused.
            </param>
            <returns>
            <see langword="true"/> if the type passes the criteria.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.PropertyExtensionMethods.PropertyExtensions.FilterPropertyBySetterPresence(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            This is a method for filtering <see cref="T:System.Reflection.PropertyInfo"/> objects according to
            the presence or non presence of a setter method.
            </summary>
            <param name="pInfo">
            This is a <see cref="T:System.Reflection.PropertyInfo"/> that may have a setter method
            attached to it. It may be <see langword="null"/>, in which case the method
             returns <see langword="true"/>.
            </param>
            <param name="obj">
            Unused.
            </param>
            <returns>
            <see langword="true"/> if the type passes the criteria.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.TypeConversion.Converters.IPAFTypeConverter">
            <summary>
            Interface that replaces basic "TypeConverter" functionality in core.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.TypeConversion.Converters.IPAFTypeConverter.FormatProvider">
            <summary>
            Access to the format provider for string conversions.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.TypeConversion.Converters.IPAFTypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Determines if the value can be converted from another type.
            </summary>
            <param name="sourceType">Type of the source object.</param>
            <returns>
            Returns <see langword = "false"/> if the source is not convertable to the
            type desired.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.TypeConversion.Converters.IPAFTypeConverter.CanConvertTo(System.Type)">
            <summary>
            Determines if the type can be converted to a specified type.
            </summary>
            <param name="destinationType">The type to convert to.</param>
            <returns>
            Returns <see langword = "false"/> if we can't convert to the destination type.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.TypeConversion.Converters.IPAFTypeConverter.ConvertFrom(System.Object)">
            <summary>
            This method converts from an incoming type to our type.
            </summary>
            <param name="value">Value to be converted.</param>
            <returns>
            The <see cref="T:System.Object"/> if conversion is successful, <c>null</c>
            otherwise. No exceptions are generated.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.TypeConversion.Converters.IPAFTypeConverter.ConvertFromString(System.String)">
            <summary>
            This method converts from an incoming string to our type.
            </summary>
            <param name="stringValue">String value to be converted.</param>
            <returns>
            The <see cref="T:System.Object"/> if conversion is successful, <see langword="null"/>
            otherwise. No exceptions are generated.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.TypeConversion.Converters.IPAFTypeConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            This version attempts to convert the <see cref="!:value"/> to a value of our type.
            </summary>
            <param name="value"> Value to be converted.
            </param>
            <param name="destinationType">
            Type to convert to.
            </param>
            <returns>
            <see langword="null"/> for creation failure. No exceptions are thrown.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.TypeExtensionMethods.GuidExtensions">
            <summary>
            This class implements extensions for Guids.
            </summary>
            <history>
            <author> DAP </author>
            <date> 02jul2011 </date>
            <contribution>
            Wanted to make sure WHOEVER's implementation we were using, we
            didn't get empty Guids.
            </contribution>
            </history>
            <threadsafety>
            Safe.
            </threadsafety>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.TypeExtensionMethods.GuidExtensions.RandomNonEmptyGuid">
            <summary>
            This method generates a non-empty Guid. Not really an extension
            method, but this is a good place for it.
            </summary>
            <returns>
            A non - empty Guid.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.WeakBindings.WeakReferenceExtensions">
            <summary>
            Methods to deal with the fact that weak references are reference types by nature
            and don't benefit from "TryGet()" methods
            </summary>
            <contribution>
            <author> Brian T. </author>
            <date> 22sep2014 </date>
            <description>
            New. Built this so we could use the type safe version of weak reference
            more easily.
            </description>
            </contribution>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.WeakBindings.WeakReferenceExtensions.GetTarget``1(System.WeakReference{``0})">
            <summary>
            Fixes Microsoft's goofy implementation.
            </summary>
            <typeparam name="T">
            The type of the item referenced
            </typeparam>
            <param name="weakReference"></param>
            <returns></returns>
        </member>
        <member name="T:PlatformAgileFramework.TypeHandling.WeakBindings.PAFWeakReference`1">
            <summary>
            See <see cref="T:PlatformAgileFramework.TypeHandling.WeakBindings.IPAFWeakReference`1"/>.
            </summary>
            <typeparam name="T">
            The type of the item referenced.
            </typeparam>
            <contribution>
            <author> Brian T. </author>
            <date> 02sep2014 </date>
            <description>
            I changed the implementation to just wrap <see cref="T:System.WeakReference`1"/>. I moved
            this into the platform-independent library, since we can now use it on phones.
            </description>
            </contribution>
            <contribution>
            <author> BMC </author>
            <date> 21aug2013 </date>
            <description>
            New.
            </description>
            </contribution>
        </member>
        <member name="F:PlatformAgileFramework.TypeHandling.WeakBindings.PAFWeakReference`1.m_WeakReference">
            <summary>
            Our wrapped weak reference.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.TypeHandling.WeakBindings.PAFWeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:PlatformAgileFramework.TypeHandling.WeakBindings.PAFWeakReference`1" /> class, referencing the
            specified item.
            </summary>
            <param name="target">The item to track. </param>
        </member>
        <member name="P:PlatformAgileFramework.TypeHandling.WeakBindings.PAFWeakReference`1.Target">
            <summary>
            <see cref="T:PlatformAgileFramework.TypeHandling.WeakBindings.IPAFWeakReference`1"/>.
            </summary>
            <returns>
            <see cref="T:PlatformAgileFramework.TypeHandling.WeakBindings.IPAFWeakReference`1"/>.
            </returns>
            <remarks>
            <see cref="T:PlatformAgileFramework.TypeHandling.WeakBindings.IPAFWeakReference`1"/>.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods">
            <summary>
            Extends exceptions in a way that allows us to examine the details of an exception
            and it's inner exception(s).
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Contains(System.Exception,System.Type)">
            <summary>
            This is a little helper method that determines whether a given exception type is contained
            within the internal "inner exception" chain. The reason for this construct is to allow
            "standard" exceptions (e.g. <see cref="T:System.IO.IOException"/> to be filtered even though
            such an exception is not in the inheritance chain.
            </summary>
            <param name="thisException"> "this" </param>
            <param name="exceptionType">The <see cref="T:System.Exception"/>) that is to be checked.</param>
            <returns>
            <see langword="true"/> if the specific Sub-Type of the <see cref="T:System.Exception"/> is a base Type of
            any exception anywhere in the containment chain of "inner exception"s.
            </returns>
            <remarks>
            Example:<br/>
            If a <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractExceptionBase"/> contains an inner exception
            <see cref="T:System.IO.FileNotFoundException"/>
            and the client passes in an <see cref="T:System.IO.IOException"/>
            (the base type of <see cref="T:System.IO.FileNotFoundException"/>) the method would
            return <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.ExceptNullObject(System.Object,System.String)">
            <summary>
            Just helps flag bad arg. Throws an exception if arg is <see langword="null"/>. Useful
            in constructors.
            </summary>
            <param name="argName">
            Name that is to be displayed in the <see cref="T:System.ArgumentNullException"/>.
            </param>
            <param name="obj">
            Incoming <see cref="T:System.Object"/>.
            </param>
            <returns>
            The <paramref name="obj"/>, if not <see langword="null"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Is(System.Exception,System.Type)">
            <summary>
            This method is the same as <c>Contains</c>, but also returns <see langword="true"/> if the
            <paramref name="exceptionType"/> matches the Type of the <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractExceptionBase"/> it
            is called on.
            </summary>
            <param name="thisException"> "this" </param>
            <param name="exceptionType">See <see cref="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Contains(System.Exception,System.Type)"/>.</param>
            <returns>See <see cref="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Contains(System.Exception,System.Type)"/></returns>
        </member>
        <member name="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Wraps(System.Exception,System.Type)">
            <summary>
            This method is the same as <see cref="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Contains(System.Exception,System.Type)"/>, except checks only the immediate "inner exception" and does not
            walk the chain.
            </summary>
            <param name="thisException"> "this" </param>
            <param name="exceptionType">See <see cref="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Contains(System.Exception,System.Type)"/>.</param>
            <returns>See <see cref="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Contains(System.Exception,System.Type)"/>.</returns>
        </member>
        <member name="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Aggregates(PlatformAgileFramework.ErrorAndException.PAFStandardException{PlatformAgileFramework.ErrorAndException.IPAFAggregateExceptionData},System.Type)">
            <summary>
            This method determines if an exception aggregates a certain exception. This is
            generally useful only for <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/>.
            This method looks sideways, not down in the exception hierarchy.
            </summary>
            <param name="thisException">
             "this" - can only be a <see cref="T:PlatformAgileFramework.ErrorAndException.PAFStandardException`1"/>.
             </param>
            <param name="exceptionType">See <see cref="M:PlatformAgileFramework.ErrorAndException.ExceptionExtensionMethods.Contains(System.Exception,System.Type)"/>.</param>
            <returns>
            <see langword="true"/> if the exception type or any subclass in contained in the
            aggregation..
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.ErrorAndException.IExceptionReceiverProvider">
            <summary>
            Provides for a type to act as a receiver of exceptions. The use of exceptions
            are many, and are not limited to fault information. Even in the simple use of
            the <see cref="T:System.Exception"/> type for communicating fault information, it's
            sometimes useful to collect them for analysis. Thus, it's useful to have
            a receiver of some sort sometimes.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.ErrorAndException.IExceptionReceiverProvider.ExceptionReceiver">
            <summary>
            This is the standard <see cref="P:PlatformAgileFramework.ErrorAndException.IExceptionReceiverProvider.ExceptionReceiver"/> delegate;
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.ErrorAndException.Delegates.NameSpaceDefinition">
            <summary>
            <para>
            The namespace contains delegates used within the error and exception
            machinery with PAF and in other applications involving handling
            exceptions or errors. 
            </para>
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.ErrorAndException.Delegates.ExceptionReceiver">
            <summary>
            This delegate is used to pass an exception back from executing code. It is
            often used within test frameworks to provide a pluggable method to receive
            exceptions generated within SUT's. However, it is completely general.
            </summary>
            <param name="exception">
            The exception that was caught or generated.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.ErrorAndException.MarkerException">
            <summary>
            <para>
            Just a standard PAF exception that signals a "special" circumstance. It
            is used to exit try blocks that may contain complicated logic inside to get
            down to a catch block so the catch block can filter the exception and
            identify it as a certain exception.
            </para>
            <para>
            This exception should not be serialized, should never go anywhere, should
            never be wrapped in another, but is just used as a "signalling" exception
            to navigate around try/catch blocks. It's probably not a "best practice", but
            it has been necessary in some cases where it's not possible to determine
            what exceptions third-party methods will throw.
            </para>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.ErrorAndException.MarkerException.m_exceptionGUID">
            <summary>
            GUID identifying the exception.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.ErrorAndException.MarkerException.ExceptionGUID">
            <summary>
            This defines the read-only GUID given to the exception at construction
            time.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.ErrorAndException.MarkerException.#ctor">
            <summary>
            Default constructor that randomly generates the internal GUID.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.ErrorAndException.MarkerException.#ctor(System.Guid)">
            <summary>
            Constructor that sets the internal GUID.
            </summary>
            <param name="exceptionGUID">
            The GUID that wiil be returned by the <see cref="P:PlatformAgileFramework.ErrorAndException.MarkerException.ExceptionGUID"/> property.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.ErrorAndException.NameSpaceDefinition">
            <summary>
            <para>
            The namespace contains those elements related to handing errors and exceptions
            within PAF.
            </para>
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Security.SecurityUtils">
            <summary>
            A utility class for file, network and general security.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Security.SecurityUtilsInternal">
            <summary>
            A utility class for file, network and general security.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.Security.SecurityUtilsInternal.FileSecurityProbeStatus">
            <summary>
            This is an internal enum that is used to communicate information about
            the status of attempted file operations or proposed file operations
            that can involve security issues. We want to hide the nature of the
            information from unpriviledged clients.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.UserInterface.IPAFUIServiceInternal">
            <summary>
            <para>
            This interface exposes a method to set the internal string provider
            for testing using mock UI interaction, among other things.
            </para>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.IPAFUIServiceInternal.GetStringIOProviderInternal">
            <summary>
            This method gets the internal <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/> provider.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.IPAFUIServiceInternal.SetStringIOProviderInternal(PlatformAgileFramework.UserInterface.Interfaces.IStringIO)">
            <summary>
            This method sets the internal <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/> provider.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService">
            <summary>
            This class is a basic implementation of the <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>
            interface for use through inheritance. This implementation acts as an aggregator
            for the multiple interfaces that must be returned by <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.m_IMessageAndDispatch">
            <remarks/>
        </member>
        <member name="F:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.m_IMessageAndStringResponse">
            <remarks/>
        </member>
        <member name="F:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.m_IMessageWithNoResponse">
            <remarks/>
        </member>
        <member name="F:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.m_IMessageOkQuit">
            <remarks/>
        </member>
        <member name="F:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.m_IYesNoQuery">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.#ctor(System.Guid,System.Type,System.String)">
            <summary>
            Constructor accepts Guid, the name and type. Direct pass-through to base.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.GetMessageAndDispatch">
            <summary>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.GetMessageAndStringResponse">
            <summary>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.GetMessageWithNoResponse">
            <summary>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.GetMessageOkQuit">
            <summary>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.GetYesNoQuery">
            <summary>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.GetStringIOProvider">
            <summary>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.SetStringIOProvider(PlatformAgileFramework.UserInterface.Interfaces.IStringIO)">
            <summary>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIService"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.PlatformAgileFramework#UserInterface#IPAFUIServiceInternal#GetStringIOProviderInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIServiceInternal"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIServiceInternal"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.GetStringIOProviderPIV">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.PlatformAgileFramework#UserInterface#IPAFUIServiceInternal#SetStringIOProviderInternal(PlatformAgileFramework.UserInterface.Interfaces.IStringIO)">
            <summary>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIServiceInternal"/>.
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.UserInterface.IPAFUIServiceInternal"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.SetStringIOProviderPIV(PlatformAgileFramework.UserInterface.Interfaces.IStringIO)">
            <remarks/>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.AbstractUserInteractionService.PAFFrameworkServiceDispose(System.Boolean,System.Object)">
            <summary>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>. This override disposes our contained
            services, then calls base.
            </summary>
            <param name="disposing">
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>.
            </param>
            <param name="obj">
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>.
            This is not used in this method.
            </param>
            <returns>
            <see cref="T:PlatformAgileFramework.TypeHandling.Disposal.IPAFDisposable"/>.
            </returns>
            <remarks>
            <para>
            Exceptions are caught and recorded in the registry.
            </para>
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.UserInterface.UserInteractionService.IStringUserQuery">
            <summary>
            This interface describes the protocol for obtaining a yes/no query/answer
            from the user. It is a helper interface designed to allow construction of
            a yes/no query/response. The interface provides an abstraction layer to
            a "console", whatever that may be.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.IStringUserQuery.AskQuestion(System.String)">
            <summary>
            This method asks a question at the console and returns the positive
            or negative response as the <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.UserInteractionStatus"/>. The
            user must respond with a text string. The string is compared with the
            positive and negative response strings after converting to lower case.
            if the user's response is a substring of the positive response string,
            a positive response is returned. If both response strings are blank,
            a positive response is returned. Otherwise, a negative response is
            returned.
            </summary>
            <param name="messageString">
            This is a message that is to be presented to the user before the user
            is prompted for a response. The prompt is appended to the message.
            Example: <c>"Can't find file"</c>. May be <see langword="null"/>, in which case
            no message is prepended to the prompt.
            </param>
            <returns>
            A <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.UserInteractionStatus"/> enum representing the status of the
            user interaction. In this case, the <c>"UserInteractionStatus.PositiveResult"</c>
            flag (bit 1) corresponds to a positive result <c>(1)</c> or a negetive
            result <c>(0)</c>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.IStringUserQuery.PrintMessage(System.String)">
            <summary>
            This method prints a string at the console and always returns the positive
            response as the <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.UserInteractionStatus"/>.
            </summary>
            <param name="messageString">
            This is a message that is to be presented to the user.
            </param>
            <returns>
            A <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.UserInteractionStatus"/> enum representing the status of the
            user interaction. In this case, the <c>"UserInteractionStatus.PositiveResult"</c>
            flag (bit 1) corresponds to a positive result and is what is always returned.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils">
            <summary>
            This interface does basic read/write and other things. These methods
            are designed to read/write abstractly from/to a "console", whatever that
            may be. It might be a window in a windows-oriented implementation.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils.GetStringIOProvider">
            <summary>
            This method gets the internal <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/> provider.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils.ReadFromConsole">
            <summary>
            This method simply reads a string from the console after the
            user terminates it by hitting the <c>"Enter"</c> key.
            </summary>
            <returns>
            A <see cref="T:System.String"/> read from the console.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils.SetStringIOProvider(PlatformAgileFramework.UserInterface.Interfaces.IStringIO)">
            <summary>
            This method is designed to replace the internal <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/>
            interface provider with another. It is designed to be used for substituting
            a mock object for a real console IO provider for the purpose of testing.
            </summary>
            <param name="provider">
            A <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/> provider - usually reads/writes from a buffer
            of strings.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils.WriteReadConsole(System.String)">
            <summary>
            This method writes a string to the console and reads a user's response.
            </summary>
            <param name="consoleOutputString">
            A <see cref="T:System.String"/> to write to the console. No line
            termination characters are added.
            </param>
            <returns>
            A <see cref="T:System.String"/> read from the console.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils.WriteToConsole(System.String)">
            <summary>
            This method simply writes a string to the console.
            </summary>
            <param name="consoleOutputString">
            A <see cref="T:System.String"/> to write to the console. No line
            termination characters are added.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery">
            <summary>
            This class implements a yes/no query/answer from the user. It is a helper
            class designed to allow construction of a yes/no query/response. Its single
            method takes a message to be displayed to the user and appends a prompt
            string to the end to instruct the user how to respond. The main thing this
            class does is construct the prompt string based on the construction arguments.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.m_Utils">
            <summary>
            Construct a version of utils for the console. This must be loaded by
            inheritors or through public constructor.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.s_defaultPositiveResponseString">
            <summary>
            This is the default response string that is expected to be entered from
            the user if none is specified in the method calls.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.s_defaultNegativeResponseString">
            <summary>
            This is the default response string that is expected to be entered from
            the user if none is specified in the method calls.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor">
            <summary>
            Default constructor. Stuffs in default response strings <c>"yes"</c> and
            <c>"no"</c> for the queries.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor(System.String,System.String,System.String,System.Boolean,PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils)">
            <summary>
            Constructor which accepts a <see cref="T:PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils"/> interface to build a complete
            class. Delegates to <see cref="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor(System.String,System.String,System.String,System.Boolean)"/>.
            </summary>
            <param name="positiveResponseString">
            See <see cref="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor(System.String,System.String,System.String,System.Boolean)"/>.
            </param>
            <param name="negativeResponseString">
            See <see cref="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor(System.String,System.String,System.String,System.Boolean)"/>.
            </param>
            <param name="userPromptString">
            See <see cref="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor(System.String,System.String,System.String,System.Boolean)"/>.
            </param>
            <param name="acceptCRForPositive">
            See <see cref="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor(System.String,System.String,System.String,System.Boolean)"/>.
            </param>
            <param name="uIUtils">
            UI utilities reference.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor(PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils)">
            <summary>
            Constructor which accepts a <see cref="T:PlatformAgileFramework.UserInterface.UserInteractionService.IUIUtils"/> interface to build a complete
            class. Delegates to <see cref="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.#ctor(System.String,System.String,System.String,System.Boolean)" -->
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.AskQuestion(System.String)">
            <summary>
            This method asks a question at the console and returns the positive
            or negative response as the <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.UserInteractionStatus"/>. The
            user must respond with a text string. The string is compared with the
            positive and negative response strings after converting to lower case.
            if the user's response is a substring of the positive response string,
            a positive response is returned. If both response strings are blank,
            a positive response is returned. Otherwise, a negative response is
            returned.
            </summary>
            <param name="messageString">
            This is a message that is to be presented to the user before the user
            is prompted for a response. The prompt is appended to the message.
            Example: <c>"Can't find file"</c>. May be <see langword="null"/>, in which case
            no message is prepended to the prompt.
            </param>
            <returns>
            A <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.UserInteractionStatus"/> enum representing the status of the
            user interaction. In this case, the <c>"UserInteractionStatus.PositiveResult"</c>
            flag (bit 1) corresponds to a positive result <c>(1)</c> or a negetive
            result <c>(0)</c>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.StringUserQuery.PrintMessage(System.String)">
            <summary>
            This method prints a string at the console and always returns the positive
            response as the <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.UserInteractionStatus"/>.
            </summary>
            <param name="messageString">
            This is a message that is to be presented to the user.
            </param>
            <returns>
            A <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.UserInteractionStatus"/> enum representing the status of the
            user interaction. In this case, the <c>"UserInteractionStatus.PositiveResult"</c>
            flag (bit 1) corresponds to a positive result and is what is always returned.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils">
            <summary>
            This class does basic read/write and other things. Pattern is a class exposing
            virtual methods delegating to a contained object.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils.m_iStringIOProvider">
            <summary>
            Our protected string I/O provider. This is the contained provider.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils.#ctor">
            <summary>
            Default constructor normally builds with a specific <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils.#ctor(PlatformAgileFramework.UserInterface.Interfaces.IStringIO)">
            <summary>
            Builds with our I/O provider and results in a usable object.
            </summary>
            <param name="stringIO">
            Type implementing <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils.ReadFromConsole">
            <summary>
            This method simply reads a string from the console after the
            user terminates it by hitting the <c>"Enter"</c> key.
            </summary>
            <returns>
            A <see cref="T:System.String"/> read from the console.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils.GetStringIOProvider">
            <summary>
            This method gets the internal <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/> provider.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils.SetStringIOProvider(PlatformAgileFramework.UserInterface.Interfaces.IStringIO)">
            <summary>
            This method is designed to replace the internal <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/>
            interface provider with another. It is designed to be used for substituting
            a mock object for a real console IO provider for the purpose of testing.
            </summary>
            <param name="provider">
            A <see cref="T:PlatformAgileFramework.UserInterface.Interfaces.IStringIO"/> provider - usually reads/writes from a buffer
            of strings.
            </param>
            <remarks>
            The setting of the string provider is done here at the level of the
            overall console I/O system, since it is designed only for testing and the
            assumption is that we won't be doing anything else.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils.WriteReadConsole(System.String)">
            <summary>
            This method writes a string to the console and reads a user's response.
            </summary>
            <param name="consoleOutputString">
            A <see cref="T:System.String"/> to write to the console. No line
            termination characters are added.
            </param>
            <returns>
            A <see cref="T:System.String"/> read from the console.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils.WriteToConsole(System.String)">
            <summary>
            This method simply writes a string to the console.
            </summary>
            <param name="consoleOutputString">
            A <see cref="T:System.String"/> to write to the console. No line
            termination characters are added.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.UserInterface.UserInteractionService.UIUtils.Dispose">
            <summary>
            Base method does nothing.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.XMLUtils">
            <summary>
            <para>
            Helper methods and other items for processing XML.
            </para>
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Converted PAF legacy CLR stuff to run in core. Took CLR-only stuff out.
            </para>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.XML.XMLUtils.XML_PREFIX_NAMESPACE">
            <summary>
            String containing "http://www.w3.org/XML/1998/namespace".
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.XMLUtils.XMLNS_PREFIX_NAMESPACE">
            <summary>
            String containing "http://www.w3.org/2000/xmlns/".
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.XMLUtils.SSS">
            <summary>
            This a standard separator string for separating components of a string key.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.XMLUtils.SSSArray">
            <summary>
            Little helper for method calls.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLUtils.ConcatenateStrings(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates strings with our special separator,
            <see cref="F:PlatformAgileFramework.XML.XMLUtils.SSS"/>.
            </summary>
            <param name="strings">
            Enumeration of incoming strings.
            </param>
            <param name="separatorString">
            String separating the concatenated strings. <c>null</c> causes
            <see cref="F:PlatformAgileFramework.XML.XMLUtils.SSS"/> to be used.
            </param>
            <returns>
            Concatenated output or <c>""</c> for <c>null</c> input.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLUtils.GetFirstConcatenedString(System.String,System.String)">
            <summary>
            Get first string from concatenated strings with our special separator,
            <see cref="F:PlatformAgileFramework.XML.XMLUtils.SSS"/>.
            </summary>
            <param name="concatenatedStrings">
            String formed from <see cref="M:PlatformAgileFramework.XML.XMLUtils.ConcatenateStrings(System.Collections.Generic.IEnumerable{System.String},System.String)"/>. It may contain
            several concatenated strings, just one string or be <c>null</c>.
            </param>
            <param name="separatorString">
            String separating the concatenated strings. <c>null</c> causes
            <see cref="F:PlatformAgileFramework.XML.XMLUtils.SSS"/> to be used.
            </param>
            <returns>
            Output string or <c>null</c> for <c>null</c> input.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLUtils.FormXMLAttributeString(System.String,System.String)">
            <summary>
            Just forms an XML attribute.
            </summary>
            <param name="attributeName">
            Name of the attribute. <c>null</c> or blank gets <c>null</c> output.
            </param>
            <param name="attributeValue">
            Value of the attribute. <c>null</c> gets <c>null</c> output.
            </param>
            <returns>
            Concatenated output of the form:
            <paramref name="attributeName"/>="<paramref name="attributeValue"/>".
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLUtils.IsTypeXMLSimple(System.Type)">
            <summary>
            Determines whether a type is one of our Types that we construct directly
            from a string representation.
            </summary>
            <param name="type">Type to check.</param>
            <returns><c>true</c> if the constituent is convertable.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLUtils.SeparateStrings(System.String,System.String)">
            <summary>
            Separates strings that have been concatenated with our special
            separator, <see cref="F:PlatformAgileFramework.XML.XMLUtils.SSS"/>.
            </summary>
            <param name="stringToSeparate">
            Concatenated string.
            </param>
            <param name="separatorString">
            String separating the concatenated strings. <c>null</c> causes
            <see cref="F:PlatformAgileFramework.XML.XMLUtils.SSS"/> to be used.
            </param>
            <returns>
            List of strings or <c>null</c> for <c>null</c> input.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.XML.Exceptions.IPAFXMLExceptionData">
            <summary>
            Exceptions that occur during XML processing.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.Exceptions.IPAFXMLExceptionData.BadXMLFilePath">
            <summary>
            The problematic XML file if the problem is file-related. <see langword="null"/>
            if not file-related.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionData">
            <summary>
            Exceptions that occur during file operations.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionData.#ctor(System.String,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor builds with the standard arguments plus the <paramref name="badXMLFilePath"/>.
            </summary>
            <param name="badXMLFilePath">
            Loads <see cref="P:PlatformAgileFramework.XML.Exceptions.IPAFXMLExceptionData.BadXMLFilePath"/>.
            </param>
            <param name="extensionData">
            Sets <see cref="P:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData.ExtensionData"/>.
            </param>
            <param name="isFatal">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="pafLoggingLevel">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
        </member>
        <member name="T:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionDataBase">
            <summary>
            Exceptions that occur during XML processing.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionDataBase.XML_PROCESSING_ERROR">
            <summary>
            Error message. General wrapper exception for a variety of problems
            with processing XML documents or fragments. This error is used as a wrapper
            for exceptions that are associated with malformed XML and other "soft"
            errors that need not cause the termination of an XML read or other operations.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionDataBase.EXCESSIVE_XML_PROCESSING_ERRORS">
            <summary>
            Error message. Error indicating that the number of XML processi9ng errors
            has exceeded a threashold.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionDataBase.m_BadXMLFilePath">
            <summary>
            Backing for the prop.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionDataBase.#cctor">
            <summary>
            Static constructor loads our tags for extended.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionDataBase.#ctor(System.String,System.Object,System.Nullable{PlatformAgileFramework.Logging.PAFLoggingLevel},System.Nullable{System.Boolean})">
            <summary>
            Constructor builds with the standard arguments plus the <see cref="P:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionDataBase.BadXMLFilePath"/>.
            </summary>
            <param name="badXMLFilePath">
            Loads <see cref="P:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionDataBase.BadXMLFilePath"/>.
            </param>
            <param name="extensionData">
            Sets <see cref="P:PlatformAgileFramework.ErrorAndException.IPAFStandardExceptionData.ExtensionData"/>.
            </param>
            <param name="isFatal">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
            <param name="pafLoggingLevel">
            See <see cref="T:PlatformAgileFramework.ErrorAndException.PAFAbstractStandardExceptionDataBase"/>
            </param>
        </member>
        <member name="P:PlatformAgileFramework.XML.Exceptions.PAFXMLExceptionDataBase.BadXMLFilePath">
            <summary>
            See <see cref="T:PlatformAgileFramework.XML.Exceptions.IPAFXMLExceptionData"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions">
            <summary>
            <para>
            This is a set of extensions for LinqToXml objects. These are the simple
            ones that MS seems to have left out.
            </para>
            <para>
            Many of these methods also exist because there are either broken
            methods in either .Net or Mono or there is inconsistency in the way they work.
            </para>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.GetLastAttributeDeclarationUpXMLTree(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Climbs an element tree to get the last attribute in either
            the current element or containing elements.
            </summary>
            <param name="element">Current element.</param>
            <param name="levelsToClimb">
            Number of levels to go up the tree in the search. -1 goes to top.
            Default = -1.
            </param>
            <returns>
            The last attribute found on a search up the XML tree. <see langword="null"/>
            if none found.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.GetFirstNamespaceDeclarationAttribute(System.Xml.Linq.XElement)">
            <summary>
            Gets the first namespace declaration from an element's attributes.
            </summary>
            <param name="element">Element to examine.</param>
            <returns><see langword="null"/> if no namespace.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.GetFirstNamespaceDeclarationUpXMLTree(System.Xml.Linq.XElement)">
            <summary>
            Climbs an element tree to get the first namespace attribute in either
            the current element or containing elements.
            </summary>
            <param name="element">Current element.</param>
            <returns>
            The first namespace found on a search up the XML tree. <see langword="null"/>
            if none found.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.GetNamespace(System.Xml.Linq.XElement,System.String)">
            <summary>
            Finds a namespace with a given tag. The search will proceed up
            any element tree that the current element is contained in. Excludes
            the "xmlns" namespace.
            </summary>
            <param name="xElement">
            The element to start the search on. <see langword="null"/>
            gets <see langword="null"/>.
            </param>
            <param name="localName">
            Namespace tag. If <see cref="F:System.String.Empty"/> or <see langword="null"/>
            gets <see langword="null"/>.
            </param>
            <returns><see langword="null"/> if namespace was not located.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.GetNamespacesOnElement(System.Xml.Linq.XElement)">
            <summary>
            Creates a list of all namespaces on an element.
            </summary>
            <param name="xElement">
            The element to search. <see langword="null"/>
            gets <see langword="null"/>.
            </param>
            <returns>Empty list if element has no namespaces.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.GetAttributesOnElement(System.Xml.Linq.XElement)">
            <summary>
            Creates a list of all attributes on an element.
            </summary>
            <param name="xElement">
            The element to search. <see langword="null"/>
            gets <see langword="null"/>.
            </param>
            <returns>Empty list if element has no attributes.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.FirstElement(System.Xml.Linq.XElement)">
            <summary>
            Returns the first <see cref="T:System.Xml.Linq.XElement"/> in the element's
            descendants.
            </summary>
            <param name="xElement">The element to check.</param>
            <returns><c>null</c> for no descendant elements.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.FindNamedAttributeUpTree(System.Xml.Linq.XElement,System.Xml.Linq.XAttribute)">
            <summary>
            Climbs the XML tree to see if the name of the attribute is associated with
            the current element or an enclosing element.
            </summary>
            <param name="element">Element at current point in tree.</param>
            <param name="attribute">Attribute under consideration.</param>
            <returns><see langword="true"/> if named attribute found.</returns>
            <remarks>
            Used typically to find namespaces. Any <see langword="null"/> arguments returns 
            <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.HasNonNamespaceAttributes(System.Xml.Linq.XElement)">
            <summary>
            Determines if an element has non-namespace attributes.
            </summary>
            <param name="xelement">Element to examine.</param>
            <returns>
            <see langword="true"/> if element has any "regular" attributes.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.MovePastRoot(System.Xml.Linq.XElement)">
            <summary>
            Method simply moves to the first element inside the root element if
            the current element has "root" in its value. It's useful for moving
            off the obligatory root element in legacy documents.
            </summary>
            <param name="xElement">The element to check.</param>
            <returns>
            If this element is not a root, it returns itself unchanged. If it
            is a root element with no contained elements, <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.NamedAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            This method looks up a single attribute by name. It finds the first
            one with that name on an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="xElement">The element to examine.</param>
            <param name="xName">The name of the attribute to find.</param>
            <returns>A named attribute or <c>null</c> if none found.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.NamedChildElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            This method looks up a single element by name. It finds the first
            one with that name on an <see cref="T:System.Xml.Linq.XElement"/>.  It finds the immediate
            descendant element (child element) with that name on an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="xElement">The element to examine.</param>
            <param name="xName">The name of the element to find.</param>
            <returns>A named element or <c>null</c> if none found.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.NamedChildElements(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            This method looks up elements by name. It gathers the immediate
            descendant elements (child elements) with that name on an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="xElement">The element to examine.</param>
            <param name="xName">The name of the child elements to find.</param>
            <returns>A non- <c>null</c> enumeration.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.KeyValuePairsFromElements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            This method accepts a set of elements. It attempts to put the named attributes on
            the elements into a key/value collection. If it does not find keys and values of the
            appropriate names, it doesn't add them.
            </summary>
            <param name="xElements">The elements to process.</param>
            <param name="keyAttributeName">The name of the key attribute.</param>
            <param name="valueAttributeName">The name of the value attribute.</param>
            <returns>A non- <c>null</c> enumeration.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.GetNextNamespaceDeclarationUpXMLTree(System.Xml.Linq.XAttribute,System.Int32)">
            <summary>
            Looks for the next namespace attribute either at this element level
            or grabs the first one at the next level that has namespace attributes
            up the tree, if one exists. This is an iterator to search the XML tree
            in an ordered way.
            </summary>
            <param name="attribute">
            Attribute to find a forward sibling for. <see langword="null"/> gets 
            <see langword="null"/>.
            </param>
            <param name="levelsToClimb">
            Number of levels to go up the tree in the search. -1 goes to top.
            Default = -1.
            </param>
            <returns>
            <see langword="null"/> if attribute not parented.
            <see langword="null"/> another namespace attribute not found.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.GetPreviousAttributeUpXMLTree(System.Xml.Linq.XAttribute,System.Int32)">
            <summary>
            Looks for the previous attribute either at this element level
            or grabs the last one at the next level that has attributes
            up the tree, if one exists. This is an iterator to search the XML tree
            in an ordered way.
            </summary>
            <param name="attribute">
            Attribute to find a backward sibling for. <see langword="null"/> gets 
            <see langword="null"/>.
            </param>
            <param name="levelsToClimb">
            Number of levels to go up the tree in the search. -1 goes to top.
            Default = -1.
            </param>
            <returns>
            <see langword="null"/> if attribute not parented.
            <see langword="null"/> another attribute not found.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.IsXmlNamespaceDeclaration(System.Xml.Linq.XAttribute)">
            <summary>
            Checks both local name and namespacename against the template for the xml namespace.
            </summary>
            <param name="attribute">
            Attribute to be checked to see if it's the xml namespace.
            </param>
            <returns>
            <see langword="true"/> if we have the xml namespace def.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.PAFGetXContainerParent(System.Xml.Linq.XObject)">
            <summary>
            Returns this node's container if it has one. If the node doesn't
            have a parent, it's containing <see cref="T:System.Xml.Linq.XDocument"/> is returned,
            if it has one. A node needn't be contained in a document.
            </summary>
            <param name="node">The node to be checked.</param>
            <returns><see langword="null"/> if no container.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.GetNextNamespaceDeclarationOnCurrentElement(System.Xml.Linq.XAttribute)">
            <summary>
            This method just searches to the right of the current parented attribute
            to grab the next namespace declaration.
            </summary>
            <param name="attribute">The attribute to operate on.</param>
            <returns>
            <see langword="null"/> if the attribute is not parented or there are no more namespaces
            found.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.CanXmlNodeBeAnXPathNode(System.Xml.XmlNodeType)">
            <summary>
            This method determines whether an <see cref="T:System.Xml.XmlNodeType"/> can be
            an <c>XPathNodeType</c>.
            </summary>
            <param name="nodeType">The type to check.</param>
            <returns>
            <see langword="false"/> if the incoming type is not <see cref="F:System.Xml.XmlNodeType.Attribute"/>,
            <see cref="F:System.Xml.XmlNodeType.Comment"/>, <see cref="F:System.Xml.XmlNodeType.Text"/>, <see cref="F:System.Xml.XmlNodeType.CDATA"/>,
            <see cref="F:System.Xml.XmlNodeType.Element"/>, <see cref="F:System.Xml.XmlNodeType.Attribute"/>,
            <see cref="F:System.Xml.XmlNodeType.ProcessingInstruction"/>, <see cref="F:System.Xml.XmlNodeType.Whitespace"/>,
            <see cref="F:System.Xml.XmlNodeType.SignificantWhitespace"/>, <see cref="F:System.Xml.XmlNodeType.Document"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.CanXmlNodeBeAnXPathChildNode(System.Xml.XmlNodeType)">
            <summary>
            This method determines whether an <see cref="T:System.Xml.XmlNodeType"/> can be
            an <c>XPathNodeType</c>'s child.
            </summary>
            <param name="nodeType">The type to check.</param>
            <returns>
            <see langword="false"/> if the incoming type is not
            <see cref="F:System.Xml.XmlNodeType.Comment"/>, <see cref="F:System.Xml.XmlNodeType.Text"/>, <see cref="F:System.Xml.XmlNodeType.CDATA"/>,
            <see cref="F:System.Xml.XmlNodeType.Element"/>, <see cref="F:System.Xml.XmlNodeType.Attribute"/>,
            <see cref="F:System.Xml.XmlNodeType.ProcessingInstruction"/>, <see cref="F:System.Xml.XmlNodeType.Whitespace"/>,
            <see cref="F:System.Xml.XmlNodeType.SignificantWhitespace"/>.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLExtensions.CollectText(System.Xml.Linq.XText)">
            <summary>
            Scrapes the text from a text node. If the text node is
            in a container, the method also appends all of the text
            from contiguous forward sibling nodes if they are also
            all text nodes.
            </summary>
            <param name="textNode">The text node to process.</param>
            <returns>Gathered text.</returns>
        </member>
        <member name="T:PlatformAgileFramework.XML.Linq.PAFLinqToXMLUtils">
            <summary>
            <para>
            This is a set of utilities for LinqToXml objects.
            </para>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.Linq.PAFLinqToXMLUtils.XmlNamespaceDeclarationAttribute">
            <summary>
            Attribute containing the <see cref="F:PlatformAgileFramework.XML.XMLUtils.XML_PREFIX_NAMESPACE"/>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.Linq.PAFLinqToXMLUtils.XmlnsNamespaceDeclarationAttribute">
            <summary>
            Attribute containing the <see cref="F:PlatformAgileFramework.XML.XMLUtils.XMLNS_PREFIX_NAMESPACE"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLUtils.IsXPathContentType(System.Object)">
            <summary>
            Returns <see langword="true"/> if type of the object is 
            <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Xml.Linq.XCData"/>,  <see cref="T:System.Xml.Linq.XText"/>,
            <see cref="T:System.Xml.Linq.XElement"/>, <see cref="T:System.Xml.Linq.XAttribute"/>,
            <see cref="T:System.Xml.Linq.XProcessingInstruction"/>, <see cref="T:System.Xml.Linq.XComment"/>
            or <see langword="null"/>.
            </summary>
            <param name="objectToCheck">
            The incoming object to evaluate.
            </param>
            <returns>
            <see langword="true"/> if object is correct type.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLUtils.IsStrictXPathContentType(System.Object)">
            <summary>
            Returns <see langword="true"/> if type of the object is 
            <see cref="T:System.Xml.Linq.XCData"/>,  <see cref="T:System.Xml.Linq.XText"/>,
            <see cref="T:System.Xml.Linq.XElement"/>, <see cref="T:System.Xml.Linq.XAttribute"/>,
            <see cref="T:System.Xml.Linq.XProcessingInstruction"/> or <see cref="T:System.Xml.Linq.XComment"/>.
            </summary>
            <param name="objectToCheck">
            The incoming object to evaluate.
            </param>
            <returns>
            <see langword="true"/> if object is correct type.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.Linq.PAFLinqToXMLUtils.GetMeAsANonEmptyXContainer(System.Object)">
            <summary>
            Returns <see langword="true"/> if type of the object is 
            an <see cref="T:System.Xml.Linq.XContainer"/> and has a child.
            </summary>
            <param name="objectToCheck">
            The incoming object to evaluate.
            </param>
            <returns>
            <paramref name="objectToCheck"/> cast to a container if conditions
            are satisfied.
            </returns>
            <remarks>
            Note that calling this method causes an <see cref="T:System.Xml.Linq.XContainer"/>'s content
            to be wrapped in an <see cref="T:System.Xml.Linq.XText"/> type if the content is a lazy string.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.XML.XMLExaminerParams">
            <summary>
            Default implementation of the interface.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.KeyValueElementName">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.MaxErrors">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.MaxWarnings">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.ValidationEventHandler">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.ValidationEventHandlerDelegate">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.Validator">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.XMLInputFilePath">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.XMLInputStream">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.XMLSchemaDirectory">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.XMLSchemas">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminerParams.XMLValidationFlags">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminerParams"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminerParams.Dispose">
            <summary>
            Simple dispose for this one - only one item.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.IXMLExaminerParams">
            <summary>
            This interface contains the settable parameters for the
            XML examiner.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.KeyValueElementName">
            <summary>
            Specifies the name of elements that are to be scanned for
            "key/value" pairs in the initialization phase to populate
            the <see cref="P:PlatformAgileFramework.XML.IXMLExaminer.KeyValueDictionary"/>.
            </summary>
            <remarks>
            Needed for legacy support. If you don't know what this is,
            you don't want to know.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.MaxErrors">
            <summary>
            Set the maximum number of errors that will be tolerated before
            quitting, either from an installed validation event handler or
            from caught exceptions. If this number is exceeded, the read is
            stopped. Default is 100.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.MaxWarnings">
            <summary>
            Set the maximum number of warnings that will be tolerated before
            quitting, from an installed validation event handler. If this
            number is exceeded, the read is stopped. Default is 100.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.ValidationEventHandler">
            <summary>
            Installs a validation event handler.  If <see langword="true"/>, the
            internal textual-based event handler is used if <see cref="P:PlatformAgileFramework.XML.IXMLExaminerParams.Validator"/>
            is <see langword="true"/>.
            </summary>
            <remarks>
            In the old CLR version of this class, this used to be a standard
            XSD validation event. This member has been generalized to support an
            abstract notion of validation, which can be delegated to the XSD-style
            validation if desired as is done in the CLR extension.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.Validator">
            <summary>
            This allows plugging of an arbitrary validation mechanism. This, coupled
            with the <see cref="P:PlatformAgileFramework.XML.IXMLExaminerParams.ValidationEventHandler"/> allows augmentation
            of the examiner with external components. In contrast to the old CLR version,
            there is no default validation mechanism. If this property is not set, no
            validation is performed.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.XMLInputFilePath">
            <summary>
            Filename to open. May be a symbolic filename. Ignored if a stream is passed.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.XMLInputStream">
            <summary>
            This stream can be passed in or read internally from a supplied
            <see cref="P:PlatformAgileFramework.XML.IXMLExaminerParams.XMLInputFilePath"/>. It is exposed so that the caller
            may rewind the stream or perform arbitrary operations on it from
            the outside.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.XMLSchemaDirectory">
            <summary>
            Default schema directory is used if this is not set. Used to search for schemas
            specified by filenames only. If set, directory is prepended to each file
            name. The directory spec must have a trailing directory separator character.
            If not specified, raw filenames are used and thus must be full paths.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.XMLSchemas">
            <summary>
            Get/set schema file list. Used only when validating. This list must be set
            for validating to be performed. Otherwise validation delegate is ignored.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminerParams.XMLValidationFlags">
            <summary>
            Get/set the validation flags. These flags are not used if validation is
            not in effect. Default is errors reported only.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.PAFXMLNameTable">
            <summary>
            Class that holds the XML namespace names found in a tree.
            </summary>
            <threadsafety>
            safe.
            </threadsafety>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Created. Attempt to bring some sanity to the world by rewriting MS's "NameTable".
            </para>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLNameTable.m_NamespaceCollection">
            <summary>
            The backing dictionary.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.PAFXMLNameTable.#ctor">
            <summary>
            Constructor just set the fields.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.PAFXMLNameTable.#ctor(PlatformAgileFramework.XML.PAFXMLNameTable)">
            <summary>
            Deep copy constructor.
            </summary>
            <param name="other">Another one of us.</param>
        </member>
        <member name="M:PlatformAgileFramework.XML.PAFXMLNameTable.AddNamespace(System.String)">
            <summary>
            Allows a namespace to be added.
            </summary>
            <returns><see langword="false"/> if namespace already in collection.
            </returns>
            <remarks>
            This method corresponds to the storage notion in MS's "NameTable", providing backward
            compatibility.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.XML.PAFXMLNameTable.AddNamespace(System.String,System.String)">
            <summary>
            Allows a namespace to be added.
            </summary>
            <returns><see langword="false"/> if namespace already in collection.
            </returns>
            <remarks>
            This method allows a namespace to be keyed by its prefix tag.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.XML.PAFXMLNameTable.GetNamespace(System.String)">
            <summary>
            Allows a namespace to be retrieved.
            </summary>
            <returns><see langword="null"/> if namespace not found.
            </returns>
            <remarks>
            This method retrieves a namespace by its key, which may be just the
            namespace string itself.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.XML.PAFXMLNameTable.GetNamespaces">
            <summary>
            Allows all namespaces to be retrieved.
            </summary>
            <returns>
            A list of namespaces.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.PAFXMLNameTable.CreateNameTable">
            <summary>
            Creates a name table preloaded with
            <see cref="F:PlatformAgileFramework.XML.XMLUtils.XMLNS_PREFIX_NAMESPACE"/> and
            <see cref="F:PlatformAgileFramework.XML.XMLUtils.XML_PREFIX_NAMESPACE"/>.
            </summary>
            <returns>Preloaded table.</returns>
        </member>
        <member name="T:PlatformAgileFramework.XML.XMLStringValue">
            <summary>
            A little container to hold return values from our dictionary.
            Legacy support. Immutable implementation.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLStringValue.StringValue">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLStringValue"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLStringValue.ValueLiteralCodeValue">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLStringValue"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLStringValue.#ctor(System.String,PlatformAgileFramework.XML.ValueLiteralCode)">
            <summary>
            Constructor builds with props.
            </summary>
            <param name="stringValue">
            Sets <see cref="P:PlatformAgileFramework.XML.XMLStringValue.StringValue"/>.
            </param>
            <param name="valueLiteralCodeValue">
            Sets <see cref="P:PlatformAgileFramework.XML.XMLStringValue.ValueLiteralCodeValue"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.XML.IXMLStringValue">
            <summary>
            A little container to hold return values from our dictionary.
            Legacy support.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLStringValue.StringValue">
            <summary>
            The string value found in the dictionary.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLStringValue.ValueLiteralCodeValue">
            <summary>
            Returns the <see cref="T:PlatformAgileFramework.XML.ValueLiteralCode"/> used in the
            PAF configuration system.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.PAFXMLReaderErrorEventHandler">
            <summary>
            Delegate to process schema or other xml reading errors.
            </summary>
            <param name="sender">The usual object.</param>
            <param name="e">Our error event arguments.</param>
            <remarks>
            This method must not throw or pass exceptions.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.XML.PAFXMLValidationHandler">
            <summary>
            Delegate to validate an XML file.
            </summary>
            <param name="xmlExaminer">
            Set of params with an active stream with any position. Stream will be rewound.
            Stream can be left in any position. Not <see langword="null"/>.
            </param>
            <param name="schema">
            Set of schemas to validate against.If <see langword = "null"/> or empty,
            typical implementations will validate for correctly-formed XML.
            </param>
            <param name="errorHandler">
            May be <see langword="null"/>.
            </param>
            <remarks>
            This method may throw or pass exceptions. A typical scenario is for this
            method is to throw exceptions on fatal errors and to gather and return warnings.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.XML.IXMLSchemaSpec">
            <summary>
            A little container to hold filenames and ns's for schemas.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLSchemaSpec.FileName">
            <summary>
            Full path to xsd file. e.g. c:\myXsd.xsd
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLSchemaSpec.NameSpace">
            <summary>
            Target namespace. e.g. urn:content-type.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.XMLSchemaSpec">
            <summary>
            A little class to hold filenames and ns's for schemas.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Changed to inherit from interface.
            </para>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.XML.XMLSchemaSpec.m_fileName">
            <summary>
            Support for <see cref="T:PlatformAgileFramework.XML.IXMLSchemaSpec"/>.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.XMLSchemaSpec.m_nameSpace">
            <summary>
            Support for <see cref="T:PlatformAgileFramework.XML.IXMLSchemaSpec"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLSchemaSpec.#ctor(System.String,System.String)">
            <summary>
            Constructor just builds from the two input fields.
            </summary>
            <param name="fileName">
            Sets <see cref="P:PlatformAgileFramework.XML.XMLSchemaSpec.FileName"/>.
            </param>
            <param name="nameSpace">
            Sets <see cref="P:PlatformAgileFramework.XML.XMLSchemaSpec.NameSpace"/>.
            </param>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLSchemaSpec.FileName">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLSchemaSpec"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLSchemaSpec.NameSpace">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IXMLSchemaSpec"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs">
            <summary>
             Returns detailed information related to the XmlErrorEvent.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs.Exception">
            <summary>
            Gets the Exception associated with the error event.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs.Message">
            <summary>
            Gets the text description corresponding to the error event.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs.Warning">
            <summary>
            <see langword="true"/> for a warning as opposed to an error.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs">
            <summary>
            Returns detailed information related to the XmlErrorEvent.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            </para>
            </contribution>
            </history>
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs.m_Exception">
            <summary>
            Support for <see cref="T:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs"/>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs.m_Message">
            <summary>
            Support for <see cref="T:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs"/>
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs.m_Warning">
            <summary>
            Support for <see cref="T:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs"/>
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs.#ctor(System.Exception,System.String,System.Boolean)">
            <summary>
            Constructor just loads the fields.
            </summary>
            <param name="exception">
            The exception property. non-<see langword="null"/>.
            </param>
            <param name="message">
            The message property.
            </param>
            <param name="warning">
            The warning property.
            </param>
            <exceptions>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="exception"/> is <see langword="null"/>.
            </exception>
            </exceptions>
        </member>
        <member name="P:PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs.Exception">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs.Message">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs"/>
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs.Warning">
            <summary>
            <see cref="T:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs"/>
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.PAFXMLValidationEventHandlerDelegate">
            <summary>
            We expose a delegate to hook events.
            </summary>
            <param name="args">
            <see cref="T:PlatformAgileFramework.XML.IPAFXMLErrorEventArgs"/>.
            </param>
        </member>
        <member name="T:PlatformAgileFramework.XML.ValueLiteralCode">
            <summary>
            Enum for special codes inside the XML.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.ValueLiteralCode.Normal">
            <summary>
            Normal value.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.ValueLiteralCode.Defaulted">
            <summary>
            "DEFAULTED"
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.ValueLiteralCode.Inherited">
            <summary>
            "INHERITED"
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.PAFXMLSchemaValidationFlags">
            <summary>
            Specifies schema validation options used by a
            schema validator.
            </summary>
            This was a MS type that was made internal in Silverlight. We need it for
            legacy apps that use XSDs.
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLSchemaValidationFlags.None">
            <remark/>
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLSchemaValidationFlags.ProcessInlineSchema">
            <remark/>
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLSchemaValidationFlags.ProcessSchemaLocation">
            <remark/>
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLSchemaValidationFlags.ReportValidationWarnings">
            <remark/>
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLSchemaValidationFlags.ProcessIdentityConstraints">
            <remark/>
        </member>
        <member name="F:PlatformAgileFramework.XML.PAFXMLSchemaValidationFlags.AllowXmlAttributes">
            <remark/>
        </member>
        <member name="T:PlatformAgileFramework.XML.IXMLExaminer">
            <history>
            <description>
            <author> Brain T. </author>
            <date> 25apr2016 </date>
            <contribution>
            Put back basic linq stuff that can run in core that was removed.
            </contribution>
            </description>
            <description>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            </contribution>
            </description>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminer.ExceptionList">
            <summary>
            Get the list of exceptions generated. Useful when an unknown exception
            was triggered. This list is not populated when an error event handler
            is installed.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminer.KeyValueDictionary">
            <summary>
            Get the internal key/value dictionary, which is recreated every time
            readkeyvalues is called with a non-<c>null</c> "elementName" value.
            </summary>
            <remarks>
            Needed for legacy support. If you don't know what this is, you don't want to know.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminer.TotalErrors">
            <summary>
            Get the number of errors that have occurred, either from an
            installed validation event handler or from caught exceptions.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.IXMLExaminer.TotalWarnings">
            <summary>
            Get the number of warnings that have occurred from an installed
            validation event handler.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.IXMLExaminer.GetStringKeyValue(System.String,PlatformAgileFramework.XML.ValueLiteralCode@)">
            <summary>
            Gets a value corresponding to a key. This reads the key/value section of the XML
            file, if any.
            </summary>
            <param name="keyString">
            The name of the key associated with the element.
            </param>
            <param name="code">
            Tells if the element had a special literal.
            </param>
            <returns>
            A value if it is in the dictionary. <c>null</c> if not.
            </returns>
            <remarks>
            Needed for legacy support. If you don't know what this is, you don't want to know.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.XML.IXMLExaminer.ReadXMLDocumentLinq">
            <summary>
            Reads a document and points at the top <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>The element, if the read was successful.</returns>
            <remarks>
            This read should always close and dispose readers and streams when done.
            </remarks>
        </member>
        <member name="T:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase">
            <summary>
            Default class that allows manipulating a type with its XML
            namespace.
            </summary>
            <threadsafety>
            thread-safe
            </threadsafety>
        </member>
        <member name="F:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase.m_NameWrapper">
            <summary>
            Backing for Name.
            </summary>
            <remarks>
            Never serialized.
            </remarks>
        </member>
        <member name="F:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase.m_XMLNamespaceWrapper">
            <summary>
            Backing for XMLNamespace.
            </summary>
            <remarks>
            Never serialized.
            </remarks>
        </member>
        <member name="F:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase.m_ECMANamespaceWrapper">
            <summary>
            Backing for ECMANamespace.
            </summary>
            <remarks>
            Never serialized.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase.Name">
            <summary>
            See <see cref="T:PlatformAgileFramework.XML.Namespace.IXMLNamedType"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase.XMLNamespace">
            <summary>
            See <see cref="T:PlatformAgileFramework.XML.Namespace.IXMLNamedType"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase.ECMANameSpaceInternal">
            <summary>
            See <see cref="T:PlatformAgileFramework.XML.Namespace.IXMLNamedTypeInternal"/>.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase.PlatformAgileFramework#XML#Namespace#IXMLNamedTypeInternal#ECMANamespace">
            <summary>
            See <see cref="T:PlatformAgileFramework.XML.Namespace.IXMLNamedTypeInternal"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase.PlatformAgileFramework#XML#Namespace#IXMLNamedTypeInternal#SetName(System.String)">
            <summary>
            See <see cref="T:PlatformAgileFramework.XML.Namespace.IXMLNamedTypeInternal"/>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.Namespace.XMLNamedTypeBase.PlatformAgileFramework#XML#Namespace#IXMLNamedTypeInternal#SetXMLNamespace(System.String)">
            <summary>
            See <see cref="T:PlatformAgileFramework.XML.Namespace.IXMLNamedTypeInternal"/>.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.Namespace.IXMLNamedTypeInternal">
            <summary>
            Interface that allows manipulating a type with its XML
            namespace. This is the internal version that allows
            setting things and allows access to the ECMA namespace.
            </summary>
            <remarks>
            The interface can be worn by different types on different sides of
            a remote boundary and the whole thing is useful for translating to
            proxy types, deferred types, etc.
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.XML.Namespace.IXMLNamedTypeInternal.ECMANamespace">
            <summary>
            The ECMA namespace, which CAN be be <see langword="null"/> or blank. Note that
            the ECMA namespace can contain other data, including assembly info.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.Namespace.IXMLNamedTypeInternal.SetName(System.String)">
            <summary>
            Sets the name, which can never be <see langword="null"/> or blank.
            </summary>
            <param name="name">
            The name of the serialized/deserialized type.</param>
        </member>
        <member name="M:PlatformAgileFramework.XML.Namespace.IXMLNamedTypeInternal.SetXMLNamespace(System.String)">
            <summary>
            Sets the XML name space, which CAN be <see langword="null"/> or blank.
            </summary>
            <param name="xMLNamespace">
            The XML name of the serialized/deserialized type.</param>
        </member>
        <member name="T:PlatformAgileFramework.XML.Namespace.IXMLNamedType">
            <summary>
            Interface that allows manipulating a type with its XML
            namespace.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.Namespace.IXMLNamedType.Name">
            <summary>
            The name, which will never be <see langword="null"/> or blank.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.Namespace.IXMLNamedType.XMLNamespace">
            <summary>
            The XML namespace, which can be be <see langword="null"/> or blank.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.XMLAttribute">
            <summary>
            Class that holds the <see cref="T:System.String"/> components of an XML
            attribute of the form:
            <c>ATTRIBUTE_NAME="ATTRIBUTE_VALUE</c>.
            </summary>
            <history>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            <para>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            </para>
            </contribution>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLAttribute.AttributeName">
            <summary>
            The name, which will never be <c>null</c> or blank.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLAttribute.AttributeValue">
            <summary>
            The value, which will never be <c>null</c>.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor just set the fields.
            </summary>
            <param name="attributeName">
            The name. Not <c>null</c> or blank.
            </param>
            <param name="attributeValue">
            The name. Not <c>null</c>.
            </param>
            <exceptions>
            <exception> <see cref="T:System.ArgumentNullException"/> is thrown if
            either argument is <c>null</c>.
            </exception>
            <exception> <see cref="T:System.ArgumentException"/> is thrown if
            <paramref name="attributeName"/> is blank.
            </exception>
            </exceptions>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLAttribute.GetStringRepresentation">
            <summary>
            Produces output of the form:
            <see cref ="P:PlatformAgileFramework.XML.XMLAttribute.AttributeName"/>="<see cref="P:PlatformAgileFramework.XML.XMLAttribute.AttributeValue"/>".
            </summary>
            <returns>The output.</returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLAttribute.ParseStringRepresentation(System.String)">
            <summary>
            Accepts an input of the form:
            <see cref ="P:PlatformAgileFramework.XML.XMLAttribute.AttributeName"/>="<see cref="P:PlatformAgileFramework.XML.XMLAttribute.AttributeValue"/>"
            and builds an <see cref="T:PlatformAgileFramework.XML.XMLAttribute"/>.
            </summary>
            <param name="XMLAttributeString">Incoming attribute string.</param>
            <returns>
            Valid <see cref="T:PlatformAgileFramework.XML.XMLAttribute"/> if the parse was successful.
            <c>null</c> if not.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLAttribute.IsAnAttributeRepresentation(System.String)">
            <summary>
            Checks that the input of the form:
            <see cref ="P:PlatformAgileFramework.XML.XMLAttribute.AttributeName"/>="<see cref="P:PlatformAgileFramework.XML.XMLAttribute.AttributeValue"/>".
            String can have whitespece, but not in the name.
            </summary>
            <param name="stringToVerify">Incoming string.</param>
            <returns>
            <c>true</c> if the string fits the pattern.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLAttribute.PreParse(System.String,PlatformAgileFramework.XML.ParserIndices@)">
            <summary>
            Checks that the input of the form:
            <see cref ="P:PlatformAgileFramework.XML.XMLAttribute.AttributeName"/>="<see cref="P:PlatformAgileFramework.XML.XMLAttribute.AttributeValue"/>".
            String can have whitespece, but not in the name.
            </summary>
            <param name="stringToVerify">Incoming string.</param>
            <param name="indices">
            Return of the parsed indices for use in the full parse.
            </param>
            <returns>
            <c>true</c> if the string fits the pattern.
            </returns>
        </member>
        <member name="T:PlatformAgileFramework.XML.ParserIndices">
            <summary>
            A structure that allows return of some indices calculated in the parsing
            process.
            </summary>
        </member>
        <member name="T:PlatformAgileFramework.XML.XMLExaminer">
            <summary>
            This class reads an XML file or stream with optional validation and
            with error handling. It also has a "look-through" capability to
            read a configuration file or to selectively read configuration
            statements from a general XML file for setup for a second reading
            pass. The configuration file that this class reads can have the same
            specification as any app.config file, but the Key/Value dictionary
            that can be embedded in the file is limited to
            <ELEMENT_NAME key="StringKey" value="StringValue"/> constructs.
            The behavior of the class is largely dependent on the setting of
            various construction parameters. The class implements
            <see cref="T:System.IDisposable"/> to dispose of any internal streams.
            </summary>
            <threadsafety>
            Implementations are not expected to be thread-safe.
            </threadsafety>
            <history>
            <description>
            <author> Brain T. </author>
            <date> 25apr2016 </date>
            <contribution>
            Put back basic linq stuff that can run in core that was removed.
            </contribution>
            </description>
            <description>
            <author> DAP </author>
            <date> 05nov2012 </date>
            <contribution>
            Created. Support for allowing PAF legacy CLR stuff to run in core.
            Converted from CLR version, cleaned up and removed CLR-only stuff.
            </contribution>
            </description>
            </history>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminer.KeyValueDictionary">
            <summary>
            Get the internal key/value dictionary, which is recreated every time
            readkeyvalues is called with a non-<c>null</c> "elementName" value.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.XMLExaminer.m_NodeNumber">
            <summary>
            The number of the current reader node.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminer.TotalErrors">
            <summary>
            Get the number of errors that have occurred, either from an
            installed validation event handler or from caught exceptions.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminer.TotalWarnings">
            <summary>
            Get the number of warnings that have occurred from an installed
            validation event handler.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminer.ExceptionList">
            <summary>
            Allows logging of a list of exceptions that occurred during processing
            of an XML file. This list will not be populated if an event handler for
            XMLreader error is hooked.
            </summary>
        </member>
        <member name="F:PlatformAgileFramework.XML.XMLExaminer.m_GlobalSettings">
            <summary>
            Overall settings we always want.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.#cctor">
            <summary>
            Sets up XML settings not to close the stream when the reader is closed.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.#ctor">
            <summary>
            Default constructor. This constructor initializes props with default values.
            </summary>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminer.ExaminerParams">
            <summary>
            Little easier to access parameters.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.ReadKeyValues">
            <summary>
            Just reads in the XML file and gets the key/value pairs. Our XML
            configuration elements have a simple format in which a
            certain element can contain a simple set of key/value pairs.
            The <see cref="P:PlatformAgileFramework.XML.IXMLExaminerParams.XMLInputStream"/> must be
            set. It is rewound before the read.
            </summary>
            <remarks>
            This method is also called for the purpose of validating XML files
            against schemas or just for well-formedness, too. It's lightweight
            (forward XmlReader only) and only the key-values in the file are
            stored in the internal dictionary, anyway. Specify <see paramref="elementName"/>
            to be <c>null</c> and no key/values will be processed.
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.XmlReaderErrorEventHandler(System.Object,PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs)">
            <summary>
            This is default event handler for the XML validation process. It is
            very simple, just storing the exceptions in the list and tallying errors and warnings.
            </summary>
            <param name="sender">
            The usual event callback "sender" object.
            </param>
            <param name="xe">
            <see cref="T:PlatformAgileFramework.XML.PAFXMLValidationErrorEventArgs"/>.
            </param>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.OpenXMLFileForRead(System.String)">
            <summary>
            Opens an XML file for reading only.
            </summary>
            <param name="filePath">
            Path to get file from. Can be a symbolic path or an absolute path.
            </param>
            <returns>
            A valid <see cref="T:System.IO.Stream"/> if successful.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.Dispose">
            <summary>
            Disposes of any resources.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.Uninitialize">
            <summary>
            Disposes of any internal streams.
            </summary>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.GetStringKeyValue(System.String,PlatformAgileFramework.XML.ValueLiteralCode@)">
            <summary>
            Gets a value corresponding to a key. This reads the key/value section of the XML
            file, if any.
            </summary>
            <param name="keyString">
            The name of the key associated with the element.
            </param>
            <param name="code">
            Tells if the element had a special literal.
            </param>
            <returns>
            A value if it is in the dictionary. <c>null</c> if not.
            </returns>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.ReadXMLDocumentLinq">
            <summary>
            See <see cref="T:PlatformAgileFramework.XML.IXMLExaminer"/>
            </summary>
            <returns>
            See <see cref="T:PlatformAgileFramework.XML.IXMLExaminer"/>
            </returns>
            <remarks>
            <para>
            Since this method builds an XElement from the input stream, it
            always rewinds it first, since it must see the complete doc.
            </para>
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminer.IsExePipelineInitialized">
            <remarks>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminer"/>
            </remarks>
        </member>
        <member name="P:PlatformAgileFramework.XML.XMLExaminer.PipelineParams">
            <remarks>
            <see cref="T:PlatformAgileFramework.XML.IXMLExaminer"/>
            </remarks>
        </member>
        <member name="M:PlatformAgileFramework.XML.XMLExaminer.InitializeExePipeline(PlatformAgileFramework.TypeHandling.IPAFProviderPattern{PlatformAgileFramework.Execution.Pipeline.IPAFPipelineParams{PlatformAgileFramework.XML.IXMLExaminerParams}})">
            <summary>
            Initializes and optionally re-parametrizes the examiner. Opens a file if stream
            not active. Reads in key values, if appropriate. Performs validation, if appropriate.
            </summary>
            <param name="provider">
            Parameters supplied overwrite <see cref="P:PlatformAgileFramework.XML.XMLExaminer.PipelineParams"/> if not <see langword="null"/>.
            </param>
        </member>
    </members>
</doc>
